
kernel：     文件格式 elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	00 00                	add    %al,(%eax)
80100008:	fe 4f 52             	decb   0x52(%edi)
8010000b:	e4                   	.byte 0xe4

8010000c <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
8010000c:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
8010000f:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100012:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100015:	b8 00 20 11 00       	mov    $0x112000,%eax
  movl    %eax, %cr3
8010001a:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
8010001d:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100025:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
80100028:	bc 70 47 11 80       	mov    $0x80114770,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
8010002d:	b8 81 39 10 80       	mov    $0x80103981,%eax
  jmp *%eax
80100032:	ff e0                	jmp    *%eax

80100034 <binit>:
  struct buf head;
} bcache;

void
binit(void)
{
80100034:	55                   	push   %ebp
80100035:	89 e5                	mov    %esp,%ebp
80100037:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  initlock(&bcache.lock, "bcache");
8010003a:	83 ec 08             	sub    $0x8,%esp
8010003d:	68 60 c2 10 80       	push   $0x8010c260
80100042:	68 80 47 11 80       	push   $0x80114780
80100047:	e8 82 50 00 00       	call   801050ce <initlock>
8010004c:	83 c4 10             	add    $0x10,%esp

//PAGEBREAK!
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
8010004f:	c7 05 90 86 11 80 84 	movl   $0x80118684,0x80118690
80100056:	86 11 80 
  bcache.head.next = &bcache.head;
80100059:	c7 05 94 86 11 80 84 	movl   $0x80118684,0x80118694
80100060:	86 11 80 
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
80100063:	c7 45 f4 b4 47 11 80 	movl   $0x801147b4,-0xc(%ebp)
8010006a:	eb 3a                	jmp    801000a6 <binit+0x72>
    b->next = bcache.head.next;
8010006c:	8b 15 94 86 11 80    	mov    0x80118694,%edx
80100072:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100075:	89 50 10             	mov    %edx,0x10(%eax)
    b->prev = &bcache.head;
80100078:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010007b:	c7 40 0c 84 86 11 80 	movl   $0x80118684,0xc(%eax)
    b->dev = -1;
80100082:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100085:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
    bcache.head.next->prev = b;
8010008c:	a1 94 86 11 80       	mov    0x80118694,%eax
80100091:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100094:	89 50 0c             	mov    %edx,0xc(%eax)
    bcache.head.next = b;
80100097:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010009a:	a3 94 86 11 80       	mov    %eax,0x80118694

//PAGEBREAK!
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
  bcache.head.next = &bcache.head;
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
8010009f:	81 45 f4 18 02 00 00 	addl   $0x218,-0xc(%ebp)
801000a6:	b8 84 86 11 80       	mov    $0x80118684,%eax
801000ab:	39 45 f4             	cmp    %eax,-0xc(%ebp)
801000ae:	72 bc                	jb     8010006c <binit+0x38>
    b->prev = &bcache.head;
    b->dev = -1;
    bcache.head.next->prev = b;
    bcache.head.next = b;
  }
}
801000b0:	90                   	nop
801000b1:	c9                   	leave  
801000b2:	c3                   	ret    

801000b3 <bget>:
// Look through buffer cache for sector on device dev.
// If not found, allocate a buffer.
// In either case, return B_BUSY buffer.
static struct buf*
bget(uint dev, uint sector)
{
801000b3:	55                   	push   %ebp
801000b4:	89 e5                	mov    %esp,%ebp
801000b6:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  acquire(&bcache.lock);
801000b9:	83 ec 0c             	sub    $0xc,%esp
801000bc:	68 80 47 11 80       	push   $0x80114780
801000c1:	e8 2a 50 00 00       	call   801050f0 <acquire>
801000c6:	83 c4 10             	add    $0x10,%esp

 loop:
  // Is the sector already cached?
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
801000c9:	a1 94 86 11 80       	mov    0x80118694,%eax
801000ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
801000d1:	eb 67                	jmp    8010013a <bget+0x87>
    if(b->dev == dev && b->sector == sector){
801000d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801000d6:	8b 40 04             	mov    0x4(%eax),%eax
801000d9:	3b 45 08             	cmp    0x8(%ebp),%eax
801000dc:	75 53                	jne    80100131 <bget+0x7e>
801000de:	8b 45 f4             	mov    -0xc(%ebp),%eax
801000e1:	8b 40 08             	mov    0x8(%eax),%eax
801000e4:	3b 45 0c             	cmp    0xc(%ebp),%eax
801000e7:	75 48                	jne    80100131 <bget+0x7e>
      if(!(b->flags & B_BUSY)){
801000e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801000ec:	8b 00                	mov    (%eax),%eax
801000ee:	83 e0 01             	and    $0x1,%eax
801000f1:	85 c0                	test   %eax,%eax
801000f3:	75 27                	jne    8010011c <bget+0x69>
        b->flags |= B_BUSY;
801000f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801000f8:	8b 00                	mov    (%eax),%eax
801000fa:	83 c8 01             	or     $0x1,%eax
801000fd:	89 c2                	mov    %eax,%edx
801000ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100102:	89 10                	mov    %edx,(%eax)
        release(&bcache.lock);
80100104:	83 ec 0c             	sub    $0xc,%esp
80100107:	68 80 47 11 80       	push   $0x80114780
8010010c:	e8 46 50 00 00       	call   80105157 <release>
80100111:	83 c4 10             	add    $0x10,%esp
        return b;
80100114:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100117:	e9 98 00 00 00       	jmp    801001b4 <bget+0x101>
      }
      sleep(b, &bcache.lock);
8010011c:	83 ec 08             	sub    $0x8,%esp
8010011f:	68 80 47 11 80       	push   $0x80114780
80100124:	ff 75 f4             	pushl  -0xc(%ebp)
80100127:	e8 cb 4c 00 00       	call   80104df7 <sleep>
8010012c:	83 c4 10             	add    $0x10,%esp
      goto loop;
8010012f:	eb 98                	jmp    801000c9 <bget+0x16>

  acquire(&bcache.lock);

 loop:
  // Is the sector already cached?
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
80100131:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100134:	8b 40 10             	mov    0x10(%eax),%eax
80100137:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010013a:	81 7d f4 84 86 11 80 	cmpl   $0x80118684,-0xc(%ebp)
80100141:	75 90                	jne    801000d3 <bget+0x20>
  }

  // Not cached; recycle some non-busy and clean buffer.
  // "clean" because B_DIRTY and !B_BUSY means log.c
  // hasn't yet committed the changes to the buffer.
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
80100143:	a1 90 86 11 80       	mov    0x80118690,%eax
80100148:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010014b:	eb 51                	jmp    8010019e <bget+0xeb>
    if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
8010014d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100150:	8b 00                	mov    (%eax),%eax
80100152:	83 e0 01             	and    $0x1,%eax
80100155:	85 c0                	test   %eax,%eax
80100157:	75 3c                	jne    80100195 <bget+0xe2>
80100159:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010015c:	8b 00                	mov    (%eax),%eax
8010015e:	83 e0 04             	and    $0x4,%eax
80100161:	85 c0                	test   %eax,%eax
80100163:	75 30                	jne    80100195 <bget+0xe2>
      b->dev = dev;
80100165:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100168:	8b 55 08             	mov    0x8(%ebp),%edx
8010016b:	89 50 04             	mov    %edx,0x4(%eax)
      b->sector = sector;
8010016e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100171:	8b 55 0c             	mov    0xc(%ebp),%edx
80100174:	89 50 08             	mov    %edx,0x8(%eax)
      b->flags = B_BUSY;
80100177:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010017a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      release(&bcache.lock);
80100180:	83 ec 0c             	sub    $0xc,%esp
80100183:	68 80 47 11 80       	push   $0x80114780
80100188:	e8 ca 4f 00 00       	call   80105157 <release>
8010018d:	83 c4 10             	add    $0x10,%esp
      return b;
80100190:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100193:	eb 1f                	jmp    801001b4 <bget+0x101>
  }

  // Not cached; recycle some non-busy and clean buffer.
  // "clean" because B_DIRTY and !B_BUSY means log.c
  // hasn't yet committed the changes to the buffer.
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
80100195:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100198:	8b 40 0c             	mov    0xc(%eax),%eax
8010019b:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010019e:	81 7d f4 84 86 11 80 	cmpl   $0x80118684,-0xc(%ebp)
801001a5:	75 a6                	jne    8010014d <bget+0x9a>
      b->flags = B_BUSY;
      release(&bcache.lock);
      return b;
    }
  }
  panic("bget: no buffers");
801001a7:	83 ec 0c             	sub    $0xc,%esp
801001aa:	68 67 c2 10 80       	push   $0x8010c267
801001af:	e8 b2 03 00 00       	call   80100566 <panic>
}
801001b4:	c9                   	leave  
801001b5:	c3                   	ret    

801001b6 <bread>:

// Return a B_BUSY buf with the contents of the indicated disk sector.
struct buf*
bread(uint dev, uint sector)
{
801001b6:	55                   	push   %ebp
801001b7:	89 e5                	mov    %esp,%ebp
801001b9:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  b = bget(dev, sector);
801001bc:	83 ec 08             	sub    $0x8,%esp
801001bf:	ff 75 0c             	pushl  0xc(%ebp)
801001c2:	ff 75 08             	pushl  0x8(%ebp)
801001c5:	e8 e9 fe ff ff       	call   801000b3 <bget>
801001ca:	83 c4 10             	add    $0x10,%esp
801001cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!(b->flags & B_VALID))
801001d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801001d3:	8b 00                	mov    (%eax),%eax
801001d5:	83 e0 02             	and    $0x2,%eax
801001d8:	85 c0                	test   %eax,%eax
801001da:	75 0e                	jne    801001ea <bread+0x34>
    iderw(b);
801001dc:	83 ec 0c             	sub    $0xc,%esp
801001df:	ff 75 f4             	pushl  -0xc(%ebp)
801001e2:	e8 b7 27 00 00       	call   8010299e <iderw>
801001e7:	83 c4 10             	add    $0x10,%esp
  return b;
801001ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801001ed:	c9                   	leave  
801001ee:	c3                   	ret    

801001ef <bwrite>:

// Write b's contents to disk.  Must be B_BUSY.
void
bwrite(struct buf *b)
{
801001ef:	55                   	push   %ebp
801001f0:	89 e5                	mov    %esp,%ebp
801001f2:	83 ec 08             	sub    $0x8,%esp
  if((b->flags & B_BUSY) == 0)
801001f5:	8b 45 08             	mov    0x8(%ebp),%eax
801001f8:	8b 00                	mov    (%eax),%eax
801001fa:	83 e0 01             	and    $0x1,%eax
801001fd:	85 c0                	test   %eax,%eax
801001ff:	75 0d                	jne    8010020e <bwrite+0x1f>
    panic("bwrite");
80100201:	83 ec 0c             	sub    $0xc,%esp
80100204:	68 78 c2 10 80       	push   $0x8010c278
80100209:	e8 58 03 00 00       	call   80100566 <panic>
  b->flags |= B_DIRTY;
8010020e:	8b 45 08             	mov    0x8(%ebp),%eax
80100211:	8b 00                	mov    (%eax),%eax
80100213:	83 c8 04             	or     $0x4,%eax
80100216:	89 c2                	mov    %eax,%edx
80100218:	8b 45 08             	mov    0x8(%ebp),%eax
8010021b:	89 10                	mov    %edx,(%eax)
  iderw(b);
8010021d:	83 ec 0c             	sub    $0xc,%esp
80100220:	ff 75 08             	pushl  0x8(%ebp)
80100223:	e8 76 27 00 00       	call   8010299e <iderw>
80100228:	83 c4 10             	add    $0x10,%esp
}
8010022b:	90                   	nop
8010022c:	c9                   	leave  
8010022d:	c3                   	ret    

8010022e <brelse>:

// Release a B_BUSY buffer.
// Move to the head of the MRU list.
void
brelse(struct buf *b)
{
8010022e:	55                   	push   %ebp
8010022f:	89 e5                	mov    %esp,%ebp
80100231:	83 ec 08             	sub    $0x8,%esp
  if((b->flags & B_BUSY) == 0)
80100234:	8b 45 08             	mov    0x8(%ebp),%eax
80100237:	8b 00                	mov    (%eax),%eax
80100239:	83 e0 01             	and    $0x1,%eax
8010023c:	85 c0                	test   %eax,%eax
8010023e:	75 0d                	jne    8010024d <brelse+0x1f>
    panic("brelse");
80100240:	83 ec 0c             	sub    $0xc,%esp
80100243:	68 7f c2 10 80       	push   $0x8010c27f
80100248:	e8 19 03 00 00       	call   80100566 <panic>

  acquire(&bcache.lock);
8010024d:	83 ec 0c             	sub    $0xc,%esp
80100250:	68 80 47 11 80       	push   $0x80114780
80100255:	e8 96 4e 00 00       	call   801050f0 <acquire>
8010025a:	83 c4 10             	add    $0x10,%esp

  b->next->prev = b->prev;
8010025d:	8b 45 08             	mov    0x8(%ebp),%eax
80100260:	8b 40 10             	mov    0x10(%eax),%eax
80100263:	8b 55 08             	mov    0x8(%ebp),%edx
80100266:	8b 52 0c             	mov    0xc(%edx),%edx
80100269:	89 50 0c             	mov    %edx,0xc(%eax)
  b->prev->next = b->next;
8010026c:	8b 45 08             	mov    0x8(%ebp),%eax
8010026f:	8b 40 0c             	mov    0xc(%eax),%eax
80100272:	8b 55 08             	mov    0x8(%ebp),%edx
80100275:	8b 52 10             	mov    0x10(%edx),%edx
80100278:	89 50 10             	mov    %edx,0x10(%eax)
  b->next = bcache.head.next;
8010027b:	8b 15 94 86 11 80    	mov    0x80118694,%edx
80100281:	8b 45 08             	mov    0x8(%ebp),%eax
80100284:	89 50 10             	mov    %edx,0x10(%eax)
  b->prev = &bcache.head;
80100287:	8b 45 08             	mov    0x8(%ebp),%eax
8010028a:	c7 40 0c 84 86 11 80 	movl   $0x80118684,0xc(%eax)
  bcache.head.next->prev = b;
80100291:	a1 94 86 11 80       	mov    0x80118694,%eax
80100296:	8b 55 08             	mov    0x8(%ebp),%edx
80100299:	89 50 0c             	mov    %edx,0xc(%eax)
  bcache.head.next = b;
8010029c:	8b 45 08             	mov    0x8(%ebp),%eax
8010029f:	a3 94 86 11 80       	mov    %eax,0x80118694

  b->flags &= ~B_BUSY;
801002a4:	8b 45 08             	mov    0x8(%ebp),%eax
801002a7:	8b 00                	mov    (%eax),%eax
801002a9:	83 e0 fe             	and    $0xfffffffe,%eax
801002ac:	89 c2                	mov    %eax,%edx
801002ae:	8b 45 08             	mov    0x8(%ebp),%eax
801002b1:	89 10                	mov    %edx,(%eax)
  wakeup(b);
801002b3:	83 ec 0c             	sub    $0xc,%esp
801002b6:	ff 75 08             	pushl  0x8(%ebp)
801002b9:	e8 24 4c 00 00       	call   80104ee2 <wakeup>
801002be:	83 c4 10             	add    $0x10,%esp

  release(&bcache.lock);
801002c1:	83 ec 0c             	sub    $0xc,%esp
801002c4:	68 80 47 11 80       	push   $0x80114780
801002c9:	e8 89 4e 00 00       	call   80105157 <release>
801002ce:	83 c4 10             	add    $0x10,%esp
}
801002d1:	90                   	nop
801002d2:	c9                   	leave  
801002d3:	c3                   	ret    

801002d4 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
801002d4:	55                   	push   %ebp
801002d5:	89 e5                	mov    %esp,%ebp
801002d7:	83 ec 14             	sub    $0x14,%esp
801002da:	8b 45 08             	mov    0x8(%ebp),%eax
801002dd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801002e1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
801002e5:	89 c2                	mov    %eax,%edx
801002e7:	ec                   	in     (%dx),%al
801002e8:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
801002eb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
801002ef:	c9                   	leave  
801002f0:	c3                   	ret    

801002f1 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
801002f1:	55                   	push   %ebp
801002f2:	89 e5                	mov    %esp,%ebp
801002f4:	83 ec 08             	sub    $0x8,%esp
801002f7:	8b 55 08             	mov    0x8(%ebp),%edx
801002fa:	8b 45 0c             	mov    0xc(%ebp),%eax
801002fd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
80100301:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100304:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80100308:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
8010030c:	ee                   	out    %al,(%dx)
}
8010030d:	90                   	nop
8010030e:	c9                   	leave  
8010030f:	c3                   	ret    

80100310 <cli>:
  asm volatile("movw %0, %%gs" : : "r" (v));
}

static inline void
cli(void)
{
80100310:	55                   	push   %ebp
80100311:	89 e5                	mov    %esp,%ebp
  asm volatile("cli");
80100313:	fa                   	cli    
}
80100314:	90                   	nop
80100315:	5d                   	pop    %ebp
80100316:	c3                   	ret    

80100317 <printint>:
  int locking;
} cons;

static void
printint(int xx, int base, int sign)
{
80100317:	55                   	push   %ebp
80100318:	89 e5                	mov    %esp,%ebp
8010031a:	53                   	push   %ebx
8010031b:	83 ec 24             	sub    $0x24,%esp
  static char digits[] = "0123456789abcdef";
  char buf[16];
  int i;
  uint x;

  if(sign && (sign = xx < 0))
8010031e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100322:	74 1c                	je     80100340 <printint+0x29>
80100324:	8b 45 08             	mov    0x8(%ebp),%eax
80100327:	c1 e8 1f             	shr    $0x1f,%eax
8010032a:	0f b6 c0             	movzbl %al,%eax
8010032d:	89 45 10             	mov    %eax,0x10(%ebp)
80100330:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100334:	74 0a                	je     80100340 <printint+0x29>
    x = -xx;
80100336:	8b 45 08             	mov    0x8(%ebp),%eax
80100339:	f7 d8                	neg    %eax
8010033b:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010033e:	eb 06                	jmp    80100346 <printint+0x2f>
  else
    x = xx;
80100340:	8b 45 08             	mov    0x8(%ebp),%eax
80100343:	89 45 f0             	mov    %eax,-0x10(%ebp)

  i = 0;
80100346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  do{
    buf[i++] = digits[x % base];
8010034d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
80100350:	8d 41 01             	lea    0x1(%ecx),%eax
80100353:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100356:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80100359:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010035c:	ba 00 00 00 00       	mov    $0x0,%edx
80100361:	f7 f3                	div    %ebx
80100363:	89 d0                	mov    %edx,%eax
80100365:	0f b6 80 04 10 11 80 	movzbl -0x7feeeffc(%eax),%eax
8010036c:	88 44 0d e0          	mov    %al,-0x20(%ebp,%ecx,1)
  }while((x /= base) != 0);
80100370:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80100373:	8b 45 f0             	mov    -0x10(%ebp),%eax
80100376:	ba 00 00 00 00       	mov    $0x0,%edx
8010037b:	f7 f3                	div    %ebx
8010037d:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100380:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80100384:	75 c7                	jne    8010034d <printint+0x36>

  if(sign)
80100386:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
8010038a:	74 2a                	je     801003b6 <printint+0x9f>
    buf[i++] = '-';
8010038c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010038f:	8d 50 01             	lea    0x1(%eax),%edx
80100392:	89 55 f4             	mov    %edx,-0xc(%ebp)
80100395:	c6 44 05 e0 2d       	movb   $0x2d,-0x20(%ebp,%eax,1)

  while(--i >= 0)
8010039a:	eb 1a                	jmp    801003b6 <printint+0x9f>
    consputc(buf[i]);
8010039c:	8d 55 e0             	lea    -0x20(%ebp),%edx
8010039f:	8b 45 f4             	mov    -0xc(%ebp),%eax
801003a2:	01 d0                	add    %edx,%eax
801003a4:	0f b6 00             	movzbl (%eax),%eax
801003a7:	0f be c0             	movsbl %al,%eax
801003aa:	83 ec 0c             	sub    $0xc,%esp
801003ad:	50                   	push   %eax
801003ae:	e8 df 03 00 00       	call   80100792 <consputc>
801003b3:	83 c4 10             	add    $0x10,%esp
  }while((x /= base) != 0);

  if(sign)
    buf[i++] = '-';

  while(--i >= 0)
801003b6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
801003ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801003be:	79 dc                	jns    8010039c <printint+0x85>
    consputc(buf[i]);
}
801003c0:	90                   	nop
801003c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801003c4:	c9                   	leave  
801003c5:	c3                   	ret    

801003c6 <cprintf>:
//PAGEBREAK: 50

// Print to the console. only understands %d, %x, %p, %s.
void
cprintf(char *fmt, ...)
{
801003c6:	55                   	push   %ebp
801003c7:	89 e5                	mov    %esp,%ebp
801003c9:	83 ec 28             	sub    $0x28,%esp
  int i, c, locking;
  uint *argp;
  char *s;

  locking = cons.locking;
801003cc:	a1 14 36 11 80       	mov    0x80113614,%eax
801003d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if(locking)
801003d4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
801003d8:	74 10                	je     801003ea <cprintf+0x24>
    acquire(&cons.lock);
801003da:	83 ec 0c             	sub    $0xc,%esp
801003dd:	68 e0 35 11 80       	push   $0x801135e0
801003e2:	e8 09 4d 00 00       	call   801050f0 <acquire>
801003e7:	83 c4 10             	add    $0x10,%esp

  if (fmt == 0)
801003ea:	8b 45 08             	mov    0x8(%ebp),%eax
801003ed:	85 c0                	test   %eax,%eax
801003ef:	75 0d                	jne    801003fe <cprintf+0x38>
    panic("null fmt");
801003f1:	83 ec 0c             	sub    $0xc,%esp
801003f4:	68 86 c2 10 80       	push   $0x8010c286
801003f9:	e8 68 01 00 00       	call   80100566 <panic>

  argp = (uint*)(void*)(&fmt + 1);
801003fe:	8d 45 0c             	lea    0xc(%ebp),%eax
80100401:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
80100404:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010040b:	e9 1a 01 00 00       	jmp    8010052a <cprintf+0x164>
    if(c != '%'){
80100410:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
80100414:	74 13                	je     80100429 <cprintf+0x63>
      consputc(c);
80100416:	83 ec 0c             	sub    $0xc,%esp
80100419:	ff 75 e4             	pushl  -0x1c(%ebp)
8010041c:	e8 71 03 00 00       	call   80100792 <consputc>
80100421:	83 c4 10             	add    $0x10,%esp
      continue;
80100424:	e9 fd 00 00 00       	jmp    80100526 <cprintf+0x160>
    }
    c = fmt[++i] & 0xff;
80100429:	8b 55 08             	mov    0x8(%ebp),%edx
8010042c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80100430:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100433:	01 d0                	add    %edx,%eax
80100435:	0f b6 00             	movzbl (%eax),%eax
80100438:	0f be c0             	movsbl %al,%eax
8010043b:	25 ff 00 00 00       	and    $0xff,%eax
80100440:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(c == 0)
80100443:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
80100447:	0f 84 ff 00 00 00    	je     8010054c <cprintf+0x186>
      break;
    switch(c){
8010044d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100450:	83 f8 70             	cmp    $0x70,%eax
80100453:	74 47                	je     8010049c <cprintf+0xd6>
80100455:	83 f8 70             	cmp    $0x70,%eax
80100458:	7f 13                	jg     8010046d <cprintf+0xa7>
8010045a:	83 f8 25             	cmp    $0x25,%eax
8010045d:	0f 84 98 00 00 00    	je     801004fb <cprintf+0x135>
80100463:	83 f8 64             	cmp    $0x64,%eax
80100466:	74 14                	je     8010047c <cprintf+0xb6>
80100468:	e9 9d 00 00 00       	jmp    8010050a <cprintf+0x144>
8010046d:	83 f8 73             	cmp    $0x73,%eax
80100470:	74 47                	je     801004b9 <cprintf+0xf3>
80100472:	83 f8 78             	cmp    $0x78,%eax
80100475:	74 25                	je     8010049c <cprintf+0xd6>
80100477:	e9 8e 00 00 00       	jmp    8010050a <cprintf+0x144>
    case 'd':
      printint(*argp++, 10, 1);
8010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010047f:	8d 50 04             	lea    0x4(%eax),%edx
80100482:	89 55 f0             	mov    %edx,-0x10(%ebp)
80100485:	8b 00                	mov    (%eax),%eax
80100487:	83 ec 04             	sub    $0x4,%esp
8010048a:	6a 01                	push   $0x1
8010048c:	6a 0a                	push   $0xa
8010048e:	50                   	push   %eax
8010048f:	e8 83 fe ff ff       	call   80100317 <printint>
80100494:	83 c4 10             	add    $0x10,%esp
      break;
80100497:	e9 8a 00 00 00       	jmp    80100526 <cprintf+0x160>
    case 'x':
    case 'p':
      printint(*argp++, 16, 0);
8010049c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010049f:	8d 50 04             	lea    0x4(%eax),%edx
801004a2:	89 55 f0             	mov    %edx,-0x10(%ebp)
801004a5:	8b 00                	mov    (%eax),%eax
801004a7:	83 ec 04             	sub    $0x4,%esp
801004aa:	6a 00                	push   $0x0
801004ac:	6a 10                	push   $0x10
801004ae:	50                   	push   %eax
801004af:	e8 63 fe ff ff       	call   80100317 <printint>
801004b4:	83 c4 10             	add    $0x10,%esp
      break;
801004b7:	eb 6d                	jmp    80100526 <cprintf+0x160>
    case 's':
      if((s = (char*)*argp++) == 0)
801004b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801004bc:	8d 50 04             	lea    0x4(%eax),%edx
801004bf:	89 55 f0             	mov    %edx,-0x10(%ebp)
801004c2:	8b 00                	mov    (%eax),%eax
801004c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
801004c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
801004cb:	75 22                	jne    801004ef <cprintf+0x129>
        s = "(null)";
801004cd:	c7 45 ec 8f c2 10 80 	movl   $0x8010c28f,-0x14(%ebp)
      for(; *s; s++)
801004d4:	eb 19                	jmp    801004ef <cprintf+0x129>
        consputc(*s);
801004d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
801004d9:	0f b6 00             	movzbl (%eax),%eax
801004dc:	0f be c0             	movsbl %al,%eax
801004df:	83 ec 0c             	sub    $0xc,%esp
801004e2:	50                   	push   %eax
801004e3:	e8 aa 02 00 00       	call   80100792 <consputc>
801004e8:	83 c4 10             	add    $0x10,%esp
      printint(*argp++, 16, 0);
      break;
    case 's':
      if((s = (char*)*argp++) == 0)
        s = "(null)";
      for(; *s; s++)
801004eb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
801004ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
801004f2:	0f b6 00             	movzbl (%eax),%eax
801004f5:	84 c0                	test   %al,%al
801004f7:	75 dd                	jne    801004d6 <cprintf+0x110>
        consputc(*s);
      break;
801004f9:	eb 2b                	jmp    80100526 <cprintf+0x160>
    case '%':
      consputc('%');
801004fb:	83 ec 0c             	sub    $0xc,%esp
801004fe:	6a 25                	push   $0x25
80100500:	e8 8d 02 00 00       	call   80100792 <consputc>
80100505:	83 c4 10             	add    $0x10,%esp
      break;
80100508:	eb 1c                	jmp    80100526 <cprintf+0x160>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
8010050a:	83 ec 0c             	sub    $0xc,%esp
8010050d:	6a 25                	push   $0x25
8010050f:	e8 7e 02 00 00       	call   80100792 <consputc>
80100514:	83 c4 10             	add    $0x10,%esp
      consputc(c);
80100517:	83 ec 0c             	sub    $0xc,%esp
8010051a:	ff 75 e4             	pushl  -0x1c(%ebp)
8010051d:	e8 70 02 00 00       	call   80100792 <consputc>
80100522:	83 c4 10             	add    $0x10,%esp
      break;
80100525:	90                   	nop

  if (fmt == 0)
    panic("null fmt");

  argp = (uint*)(void*)(&fmt + 1);
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
80100526:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010052a:	8b 55 08             	mov    0x8(%ebp),%edx
8010052d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100530:	01 d0                	add    %edx,%eax
80100532:	0f b6 00             	movzbl (%eax),%eax
80100535:	0f be c0             	movsbl %al,%eax
80100538:	25 ff 00 00 00       	and    $0xff,%eax
8010053d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80100540:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
80100544:	0f 85 c6 fe ff ff    	jne    80100410 <cprintf+0x4a>
8010054a:	eb 01                	jmp    8010054d <cprintf+0x187>
      consputc(c);
      continue;
    }
    c = fmt[++i] & 0xff;
    if(c == 0)
      break;
8010054c:	90                   	nop
      consputc(c);
      break;
    }
  }

  if(locking)
8010054d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80100551:	74 10                	je     80100563 <cprintf+0x19d>
    release(&cons.lock);
80100553:	83 ec 0c             	sub    $0xc,%esp
80100556:	68 e0 35 11 80       	push   $0x801135e0
8010055b:	e8 f7 4b 00 00       	call   80105157 <release>
80100560:	83 c4 10             	add    $0x10,%esp
}
80100563:	90                   	nop
80100564:	c9                   	leave  
80100565:	c3                   	ret    

80100566 <panic>:

void
panic(char *s)
{
80100566:	55                   	push   %ebp
80100567:	89 e5                	mov    %esp,%ebp
80100569:	83 ec 38             	sub    $0x38,%esp
  int i;
  uint pcs[10];
  
  cli();
8010056c:	e8 9f fd ff ff       	call   80100310 <cli>
  cons.locking = 0;
80100571:	c7 05 14 36 11 80 00 	movl   $0x0,0x80113614
80100578:	00 00 00 
  cprintf("cpu%d: panic: ", cpu->id);
8010057b:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80100581:	0f b6 00             	movzbl (%eax),%eax
80100584:	0f b6 c0             	movzbl %al,%eax
80100587:	83 ec 08             	sub    $0x8,%esp
8010058a:	50                   	push   %eax
8010058b:	68 96 c2 10 80       	push   $0x8010c296
80100590:	e8 31 fe ff ff       	call   801003c6 <cprintf>
80100595:	83 c4 10             	add    $0x10,%esp
  cprintf(s);
80100598:	8b 45 08             	mov    0x8(%ebp),%eax
8010059b:	83 ec 0c             	sub    $0xc,%esp
8010059e:	50                   	push   %eax
8010059f:	e8 22 fe ff ff       	call   801003c6 <cprintf>
801005a4:	83 c4 10             	add    $0x10,%esp
  cprintf("\n");
801005a7:	83 ec 0c             	sub    $0xc,%esp
801005aa:	68 a5 c2 10 80       	push   $0x8010c2a5
801005af:	e8 12 fe ff ff       	call   801003c6 <cprintf>
801005b4:	83 c4 10             	add    $0x10,%esp
  getcallerpcs(&s, pcs);
801005b7:	83 ec 08             	sub    $0x8,%esp
801005ba:	8d 45 cc             	lea    -0x34(%ebp),%eax
801005bd:	50                   	push   %eax
801005be:	8d 45 08             	lea    0x8(%ebp),%eax
801005c1:	50                   	push   %eax
801005c2:	e8 e2 4b 00 00       	call   801051a9 <getcallerpcs>
801005c7:	83 c4 10             	add    $0x10,%esp
  for(i=0; i<10; i++)
801005ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801005d1:	eb 1c                	jmp    801005ef <panic+0x89>
    cprintf(" %p", pcs[i]);
801005d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801005d6:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax
801005da:	83 ec 08             	sub    $0x8,%esp
801005dd:	50                   	push   %eax
801005de:	68 a7 c2 10 80       	push   $0x8010c2a7
801005e3:	e8 de fd ff ff       	call   801003c6 <cprintf>
801005e8:	83 c4 10             	add    $0x10,%esp
  cons.locking = 0;
  cprintf("cpu%d: panic: ", cpu->id);
  cprintf(s);
  cprintf("\n");
  getcallerpcs(&s, pcs);
  for(i=0; i<10; i++)
801005eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
801005ef:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
801005f3:	7e de                	jle    801005d3 <panic+0x6d>
    cprintf(" %p", pcs[i]);
  panicked = 1; // freeze other CPU
801005f5:	c7 05 c0 35 11 80 01 	movl   $0x1,0x801135c0
801005fc:	00 00 00 
  for(;;)
    ;
801005ff:	eb fe                	jmp    801005ff <panic+0x99>

80100601 <cgaputc>:
#define CRTPORT 0x3d4
static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory

static void
cgaputc(int c)
{
80100601:	55                   	push   %ebp
80100602:	89 e5                	mov    %esp,%ebp
80100604:	83 ec 18             	sub    $0x18,%esp
  int pos;
  
  // Cursor position: col + 80*row.
  outb(CRTPORT, 14);
80100607:	6a 0e                	push   $0xe
80100609:	68 d4 03 00 00       	push   $0x3d4
8010060e:	e8 de fc ff ff       	call   801002f1 <outb>
80100613:	83 c4 08             	add    $0x8,%esp
  pos = inb(CRTPORT+1) << 8;
80100616:	68 d5 03 00 00       	push   $0x3d5
8010061b:	e8 b4 fc ff ff       	call   801002d4 <inb>
80100620:	83 c4 04             	add    $0x4,%esp
80100623:	0f b6 c0             	movzbl %al,%eax
80100626:	c1 e0 08             	shl    $0x8,%eax
80100629:	89 45 f4             	mov    %eax,-0xc(%ebp)
  outb(CRTPORT, 15);
8010062c:	6a 0f                	push   $0xf
8010062e:	68 d4 03 00 00       	push   $0x3d4
80100633:	e8 b9 fc ff ff       	call   801002f1 <outb>
80100638:	83 c4 08             	add    $0x8,%esp
  pos |= inb(CRTPORT+1);
8010063b:	68 d5 03 00 00       	push   $0x3d5
80100640:	e8 8f fc ff ff       	call   801002d4 <inb>
80100645:	83 c4 04             	add    $0x4,%esp
80100648:	0f b6 c0             	movzbl %al,%eax
8010064b:	09 45 f4             	or     %eax,-0xc(%ebp)

  if(c == '\n')
8010064e:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
80100652:	75 30                	jne    80100684 <cgaputc+0x83>
    pos += 80 - pos%80;
80100654:	8b 4d f4             	mov    -0xc(%ebp),%ecx
80100657:	ba 67 66 66 66       	mov    $0x66666667,%edx
8010065c:	89 c8                	mov    %ecx,%eax
8010065e:	f7 ea                	imul   %edx
80100660:	c1 fa 05             	sar    $0x5,%edx
80100663:	89 c8                	mov    %ecx,%eax
80100665:	c1 f8 1f             	sar    $0x1f,%eax
80100668:	29 c2                	sub    %eax,%edx
8010066a:	89 d0                	mov    %edx,%eax
8010066c:	c1 e0 02             	shl    $0x2,%eax
8010066f:	01 d0                	add    %edx,%eax
80100671:	c1 e0 04             	shl    $0x4,%eax
80100674:	29 c1                	sub    %eax,%ecx
80100676:	89 ca                	mov    %ecx,%edx
80100678:	b8 50 00 00 00       	mov    $0x50,%eax
8010067d:	29 d0                	sub    %edx,%eax
8010067f:	01 45 f4             	add    %eax,-0xc(%ebp)
80100682:	eb 34                	jmp    801006b8 <cgaputc+0xb7>
  else if(c == BACKSPACE){
80100684:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
8010068b:	75 0c                	jne    80100699 <cgaputc+0x98>
    if(pos > 0) --pos;
8010068d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80100691:	7e 25                	jle    801006b8 <cgaputc+0xb7>
80100693:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
80100697:	eb 1f                	jmp    801006b8 <cgaputc+0xb7>
  } else
    crt[pos++] = (c&0xff) | 0x0700;  // black on white
80100699:	8b 0d 00 10 11 80    	mov    0x80111000,%ecx
8010069f:	8b 45 f4             	mov    -0xc(%ebp),%eax
801006a2:	8d 50 01             	lea    0x1(%eax),%edx
801006a5:	89 55 f4             	mov    %edx,-0xc(%ebp)
801006a8:	01 c0                	add    %eax,%eax
801006aa:	01 c8                	add    %ecx,%eax
801006ac:	8b 55 08             	mov    0x8(%ebp),%edx
801006af:	0f b6 d2             	movzbl %dl,%edx
801006b2:	80 ce 07             	or     $0x7,%dh
801006b5:	66 89 10             	mov    %dx,(%eax)

  if(pos < 0 || pos > 25*80)
801006b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801006bc:	78 09                	js     801006c7 <cgaputc+0xc6>
801006be:	81 7d f4 d0 07 00 00 	cmpl   $0x7d0,-0xc(%ebp)
801006c5:	7e 0d                	jle    801006d4 <cgaputc+0xd3>
    panic("pos under/overflow");
801006c7:	83 ec 0c             	sub    $0xc,%esp
801006ca:	68 ab c2 10 80       	push   $0x8010c2ab
801006cf:	e8 92 fe ff ff       	call   80100566 <panic>
  
  if((pos/80) >= 24){  // Scroll up.
801006d4:	81 7d f4 7f 07 00 00 	cmpl   $0x77f,-0xc(%ebp)
801006db:	7e 4c                	jle    80100729 <cgaputc+0x128>
    memmove(crt, crt+80, sizeof(crt[0])*23*80);
801006dd:	a1 00 10 11 80       	mov    0x80111000,%eax
801006e2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
801006e8:	a1 00 10 11 80       	mov    0x80111000,%eax
801006ed:	83 ec 04             	sub    $0x4,%esp
801006f0:	68 60 0e 00 00       	push   $0xe60
801006f5:	52                   	push   %edx
801006f6:	50                   	push   %eax
801006f7:	e8 16 4d 00 00       	call   80105412 <memmove>
801006fc:	83 c4 10             	add    $0x10,%esp
    pos -= 80;
801006ff:	83 6d f4 50          	subl   $0x50,-0xc(%ebp)
    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
80100703:	b8 80 07 00 00       	mov    $0x780,%eax
80100708:	2b 45 f4             	sub    -0xc(%ebp),%eax
8010070b:	8d 14 00             	lea    (%eax,%eax,1),%edx
8010070e:	a1 00 10 11 80       	mov    0x80111000,%eax
80100713:	8b 4d f4             	mov    -0xc(%ebp),%ecx
80100716:	01 c9                	add    %ecx,%ecx
80100718:	01 c8                	add    %ecx,%eax
8010071a:	83 ec 04             	sub    $0x4,%esp
8010071d:	52                   	push   %edx
8010071e:	6a 00                	push   $0x0
80100720:	50                   	push   %eax
80100721:	e8 2d 4c 00 00       	call   80105353 <memset>
80100726:	83 c4 10             	add    $0x10,%esp
  }
  
  outb(CRTPORT, 14);
80100729:	83 ec 08             	sub    $0x8,%esp
8010072c:	6a 0e                	push   $0xe
8010072e:	68 d4 03 00 00       	push   $0x3d4
80100733:	e8 b9 fb ff ff       	call   801002f1 <outb>
80100738:	83 c4 10             	add    $0x10,%esp
  outb(CRTPORT+1, pos>>8);
8010073b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010073e:	c1 f8 08             	sar    $0x8,%eax
80100741:	0f b6 c0             	movzbl %al,%eax
80100744:	83 ec 08             	sub    $0x8,%esp
80100747:	50                   	push   %eax
80100748:	68 d5 03 00 00       	push   $0x3d5
8010074d:	e8 9f fb ff ff       	call   801002f1 <outb>
80100752:	83 c4 10             	add    $0x10,%esp
  outb(CRTPORT, 15);
80100755:	83 ec 08             	sub    $0x8,%esp
80100758:	6a 0f                	push   $0xf
8010075a:	68 d4 03 00 00       	push   $0x3d4
8010075f:	e8 8d fb ff ff       	call   801002f1 <outb>
80100764:	83 c4 10             	add    $0x10,%esp
  outb(CRTPORT+1, pos);
80100767:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010076a:	0f b6 c0             	movzbl %al,%eax
8010076d:	83 ec 08             	sub    $0x8,%esp
80100770:	50                   	push   %eax
80100771:	68 d5 03 00 00       	push   $0x3d5
80100776:	e8 76 fb ff ff       	call   801002f1 <outb>
8010077b:	83 c4 10             	add    $0x10,%esp
  crt[pos] = ' ' | 0x0700;
8010077e:	a1 00 10 11 80       	mov    0x80111000,%eax
80100783:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100786:	01 d2                	add    %edx,%edx
80100788:	01 d0                	add    %edx,%eax
8010078a:	66 c7 00 20 07       	movw   $0x720,(%eax)
}
8010078f:	90                   	nop
80100790:	c9                   	leave  
80100791:	c3                   	ret    

80100792 <consputc>:

void
consputc(int c)
{
80100792:	55                   	push   %ebp
80100793:	89 e5                	mov    %esp,%ebp
80100795:	83 ec 08             	sub    $0x8,%esp
  if(panicked){
80100798:	a1 c0 35 11 80       	mov    0x801135c0,%eax
8010079d:	85 c0                	test   %eax,%eax
8010079f:	74 07                	je     801007a8 <consputc+0x16>
    cli();
801007a1:	e8 6a fb ff ff       	call   80100310 <cli>
    for(;;)
      ;
801007a6:	eb fe                	jmp    801007a6 <consputc+0x14>
  }

  if(c == BACKSPACE){
801007a8:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
801007af:	75 29                	jne    801007da <consputc+0x48>
    uartputc('\b'); uartputc(' '); uartputc('\b');
801007b1:	83 ec 0c             	sub    $0xc,%esp
801007b4:	6a 08                	push   $0x8
801007b6:	e8 37 65 00 00       	call   80106cf2 <uartputc>
801007bb:	83 c4 10             	add    $0x10,%esp
801007be:	83 ec 0c             	sub    $0xc,%esp
801007c1:	6a 20                	push   $0x20
801007c3:	e8 2a 65 00 00       	call   80106cf2 <uartputc>
801007c8:	83 c4 10             	add    $0x10,%esp
801007cb:	83 ec 0c             	sub    $0xc,%esp
801007ce:	6a 08                	push   $0x8
801007d0:	e8 1d 65 00 00       	call   80106cf2 <uartputc>
801007d5:	83 c4 10             	add    $0x10,%esp
801007d8:	eb 0e                	jmp    801007e8 <consputc+0x56>
  } else
    uartputc(c);
801007da:	83 ec 0c             	sub    $0xc,%esp
801007dd:	ff 75 08             	pushl  0x8(%ebp)
801007e0:	e8 0d 65 00 00       	call   80106cf2 <uartputc>
801007e5:	83 c4 10             	add    $0x10,%esp
  cgaputc(c);
801007e8:	83 ec 0c             	sub    $0xc,%esp
801007eb:	ff 75 08             	pushl  0x8(%ebp)
801007ee:	e8 0e fe ff ff       	call   80100601 <cgaputc>
801007f3:	83 c4 10             	add    $0x10,%esp
}
801007f6:	90                   	nop
801007f7:	c9                   	leave  
801007f8:	c3                   	ret    

801007f9 <consoleintr>:

#define C(x)  ((x)-'@')  // Control-x

void
consoleintr(int (*getc)(void))
{
801007f9:	55                   	push   %ebp
801007fa:	89 e5                	mov    %esp,%ebp
801007fc:	83 ec 18             	sub    $0x18,%esp
  int c, doprocdump = 0;
801007ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  acquire(&cons.lock);
80100806:	83 ec 0c             	sub    $0xc,%esp
80100809:	68 e0 35 11 80       	push   $0x801135e0
8010080e:	e8 dd 48 00 00       	call   801050f0 <acquire>
80100813:	83 c4 10             	add    $0x10,%esp
  while((c = getc()) >= 0){
80100816:	e9 0c 01 00 00       	jmp    80100927 <consoleintr+0x12e>
    switch(c){
8010081b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010081e:	83 f8 10             	cmp    $0x10,%eax
80100821:	74 18                	je     8010083b <consoleintr+0x42>
80100823:	83 f8 10             	cmp    $0x10,%eax
80100826:	7f 07                	jg     8010082f <consoleintr+0x36>
80100828:	83 f8 08             	cmp    $0x8,%eax
8010082b:	74 55                	je     80100882 <consoleintr+0x89>
8010082d:	eb 78                	jmp    801008a7 <consoleintr+0xae>
8010082f:	83 f8 15             	cmp    $0x15,%eax
80100832:	74 20                	je     80100854 <consoleintr+0x5b>
80100834:	83 f8 7f             	cmp    $0x7f,%eax
80100837:	74 49                	je     80100882 <consoleintr+0x89>
80100839:	eb 6c                	jmp    801008a7 <consoleintr+0xae>
    case C('P'):  // Process listing.
      doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
8010083b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
      break;
80100842:	e9 e0 00 00 00       	jmp    80100927 <consoleintr+0x12e>
    case C('U'):  // Kill line.
      while(input.e != input.w &&
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
        input.e--;
80100847:	a1 28 89 11 80       	mov    0x80118928,%eax
8010084c:	83 e8 01             	sub    $0x1,%eax
8010084f:	a3 28 89 11 80       	mov    %eax,0x80118928
    switch(c){
    case C('P'):  // Process listing.
      doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
      break;
    case C('U'):  // Kill line.
      while(input.e != input.w &&
80100854:	8b 15 28 89 11 80    	mov    0x80118928,%edx
8010085a:	a1 24 89 11 80       	mov    0x80118924,%eax
8010085f:	39 c2                	cmp    %eax,%edx
80100861:	0f 84 c0 00 00 00    	je     80100927 <consoleintr+0x12e>
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
80100867:	a1 28 89 11 80       	mov    0x80118928,%eax
8010086c:	83 e8 01             	sub    $0x1,%eax
8010086f:	83 e0 7f             	and    $0x7f,%eax
80100872:	0f b6 80 a0 88 11 80 	movzbl -0x7fee7760(%eax),%eax
    switch(c){
    case C('P'):  // Process listing.
      doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
      break;
    case C('U'):  // Kill line.
      while(input.e != input.w &&
80100879:	3c 0a                	cmp    $0xa,%al
8010087b:	75 ca                	jne    80100847 <consoleintr+0x4e>
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
        input.e--;
//        consputc(BACKSPACE);
      }
      break;
8010087d:	e9 a5 00 00 00       	jmp    80100927 <consoleintr+0x12e>
    case C('H'): case '\x7f':  // Backspace
      if(input.e != input.w){
80100882:	8b 15 28 89 11 80    	mov    0x80118928,%edx
80100888:	a1 24 89 11 80       	mov    0x80118924,%eax
8010088d:	39 c2                	cmp    %eax,%edx
8010088f:	0f 84 92 00 00 00    	je     80100927 <consoleintr+0x12e>
        input.e--;
80100895:	a1 28 89 11 80       	mov    0x80118928,%eax
8010089a:	83 e8 01             	sub    $0x1,%eax
8010089d:	a3 28 89 11 80       	mov    %eax,0x80118928
//        consputc(BACKSPACE);
      }
      break;
801008a2:	e9 80 00 00 00       	jmp    80100927 <consoleintr+0x12e>
    default:
      if(c != 0 && input.e-input.r < INPUT_BUF){
801008a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801008ab:	74 79                	je     80100926 <consoleintr+0x12d>
801008ad:	8b 15 28 89 11 80    	mov    0x80118928,%edx
801008b3:	a1 20 89 11 80       	mov    0x80118920,%eax
801008b8:	29 c2                	sub    %eax,%edx
801008ba:	89 d0                	mov    %edx,%eax
801008bc:	83 f8 7f             	cmp    $0x7f,%eax
801008bf:	77 65                	ja     80100926 <consoleintr+0x12d>
        c = (c == '\r') ? '\n' : c;
801008c1:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
801008c5:	74 05                	je     801008cc <consoleintr+0xd3>
801008c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801008ca:	eb 05                	jmp    801008d1 <consoleintr+0xd8>
801008cc:	b8 0a 00 00 00       	mov    $0xa,%eax
801008d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        input.buf[input.e++ % INPUT_BUF] = c;
801008d4:	a1 28 89 11 80       	mov    0x80118928,%eax
801008d9:	8d 50 01             	lea    0x1(%eax),%edx
801008dc:	89 15 28 89 11 80    	mov    %edx,0x80118928
801008e2:	83 e0 7f             	and    $0x7f,%eax
801008e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
801008e8:	88 90 a0 88 11 80    	mov    %dl,-0x7fee7760(%eax)
//        consputc(c);
        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
801008ee:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
801008f2:	74 18                	je     8010090c <consoleintr+0x113>
801008f4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
801008f8:	74 12                	je     8010090c <consoleintr+0x113>
801008fa:	a1 28 89 11 80       	mov    0x80118928,%eax
801008ff:	8b 15 20 89 11 80    	mov    0x80118920,%edx
80100905:	83 ea 80             	sub    $0xffffff80,%edx
80100908:	39 d0                	cmp    %edx,%eax
8010090a:	75 1a                	jne    80100926 <consoleintr+0x12d>
          input.w = input.e;
8010090c:	a1 28 89 11 80       	mov    0x80118928,%eax
80100911:	a3 24 89 11 80       	mov    %eax,0x80118924
          wakeup(&input.r);
80100916:	83 ec 0c             	sub    $0xc,%esp
80100919:	68 20 89 11 80       	push   $0x80118920
8010091e:	e8 bf 45 00 00       	call   80104ee2 <wakeup>
80100923:	83 c4 10             	add    $0x10,%esp
        }
      }
      break;
80100926:	90                   	nop
consoleintr(int (*getc)(void))
{
  int c, doprocdump = 0;

  acquire(&cons.lock);
  while((c = getc()) >= 0){
80100927:	8b 45 08             	mov    0x8(%ebp),%eax
8010092a:	ff d0                	call   *%eax
8010092c:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010092f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80100933:	0f 89 e2 fe ff ff    	jns    8010081b <consoleintr+0x22>
        }
      }
      break;
    }
  }
  release(&cons.lock);
80100939:	83 ec 0c             	sub    $0xc,%esp
8010093c:	68 e0 35 11 80       	push   $0x801135e0
80100941:	e8 11 48 00 00       	call   80105157 <release>
80100946:	83 c4 10             	add    $0x10,%esp
  if(doprocdump) {
80100949:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010094d:	74 05                	je     80100954 <consoleintr+0x15b>
    procdump();  // now call procdump() wo. cons.lock held
8010094f:	e8 49 46 00 00       	call   80104f9d <procdump>
  }
}
80100954:	90                   	nop
80100955:	c9                   	leave  
80100956:	c3                   	ret    

80100957 <consoleread>:

int
consoleread(struct inode *ip, char *dst, int n)
{
80100957:	55                   	push   %ebp
80100958:	89 e5                	mov    %esp,%ebp
8010095a:	83 ec 18             	sub    $0x18,%esp
  uint target;
  int c;

  iunlock(ip);
8010095d:	83 ec 0c             	sub    $0xc,%esp
80100960:	ff 75 08             	pushl  0x8(%ebp)
80100963:	e8 de 10 00 00       	call   80101a46 <iunlock>
80100968:	83 c4 10             	add    $0x10,%esp
  target = n;
8010096b:	8b 45 10             	mov    0x10(%ebp),%eax
8010096e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  acquire(&cons.lock);
80100971:	83 ec 0c             	sub    $0xc,%esp
80100974:	68 e0 35 11 80       	push   $0x801135e0
80100979:	e8 72 47 00 00       	call   801050f0 <acquire>
8010097e:	83 c4 10             	add    $0x10,%esp
  while(n > 0){
80100981:	e9 ac 00 00 00       	jmp    80100a32 <consoleread+0xdb>
    while(input.r == input.w){
      if(proc->killed){
80100986:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010098c:	8b 40 24             	mov    0x24(%eax),%eax
8010098f:	85 c0                	test   %eax,%eax
80100991:	74 28                	je     801009bb <consoleread+0x64>
        release(&cons.lock);
80100993:	83 ec 0c             	sub    $0xc,%esp
80100996:	68 e0 35 11 80       	push   $0x801135e0
8010099b:	e8 b7 47 00 00       	call   80105157 <release>
801009a0:	83 c4 10             	add    $0x10,%esp
        ilock(ip);
801009a3:	83 ec 0c             	sub    $0xc,%esp
801009a6:	ff 75 08             	pushl  0x8(%ebp)
801009a9:	e8 40 0f 00 00       	call   801018ee <ilock>
801009ae:	83 c4 10             	add    $0x10,%esp
        return -1;
801009b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801009b6:	e9 ab 00 00 00       	jmp    80100a66 <consoleread+0x10f>
      }
      sleep(&input.r, &cons.lock);
801009bb:	83 ec 08             	sub    $0x8,%esp
801009be:	68 e0 35 11 80       	push   $0x801135e0
801009c3:	68 20 89 11 80       	push   $0x80118920
801009c8:	e8 2a 44 00 00       	call   80104df7 <sleep>
801009cd:	83 c4 10             	add    $0x10,%esp

  iunlock(ip);
  target = n;
  acquire(&cons.lock);
  while(n > 0){
    while(input.r == input.w){
801009d0:	8b 15 20 89 11 80    	mov    0x80118920,%edx
801009d6:	a1 24 89 11 80       	mov    0x80118924,%eax
801009db:	39 c2                	cmp    %eax,%edx
801009dd:	74 a7                	je     80100986 <consoleread+0x2f>
        ilock(ip);
        return -1;
      }
      sleep(&input.r, &cons.lock);
    }
    c = input.buf[input.r++ % INPUT_BUF];
801009df:	a1 20 89 11 80       	mov    0x80118920,%eax
801009e4:	8d 50 01             	lea    0x1(%eax),%edx
801009e7:	89 15 20 89 11 80    	mov    %edx,0x80118920
801009ed:	83 e0 7f             	and    $0x7f,%eax
801009f0:	0f b6 80 a0 88 11 80 	movzbl -0x7fee7760(%eax),%eax
801009f7:	0f be c0             	movsbl %al,%eax
801009fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(c == C('D')){  // EOF
801009fd:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
80100a01:	75 17                	jne    80100a1a <consoleread+0xc3>
      if(n < target){
80100a03:	8b 45 10             	mov    0x10(%ebp),%eax
80100a06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80100a09:	73 2f                	jae    80100a3a <consoleread+0xe3>
        // Save ^D for next time, to make sure
        // caller gets a 0-byte result.
        input.r--;
80100a0b:	a1 20 89 11 80       	mov    0x80118920,%eax
80100a10:	83 e8 01             	sub    $0x1,%eax
80100a13:	a3 20 89 11 80       	mov    %eax,0x80118920
      }
      break;
80100a18:	eb 20                	jmp    80100a3a <consoleread+0xe3>
    }
    *dst++ = c;
80100a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
80100a1d:	8d 50 01             	lea    0x1(%eax),%edx
80100a20:	89 55 0c             	mov    %edx,0xc(%ebp)
80100a23:	8b 55 f0             	mov    -0x10(%ebp),%edx
80100a26:	88 10                	mov    %dl,(%eax)
    --n;
80100a28:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    if(c == '\n')
80100a2c:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
80100a30:	74 0b                	je     80100a3d <consoleread+0xe6>
  int c;

  iunlock(ip);
  target = n;
  acquire(&cons.lock);
  while(n > 0){
80100a32:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100a36:	7f 98                	jg     801009d0 <consoleread+0x79>
80100a38:	eb 04                	jmp    80100a3e <consoleread+0xe7>
      if(n < target){
        // Save ^D for next time, to make sure
        // caller gets a 0-byte result.
        input.r--;
      }
      break;
80100a3a:	90                   	nop
80100a3b:	eb 01                	jmp    80100a3e <consoleread+0xe7>
    }
    *dst++ = c;
    --n;
    if(c == '\n')
      break;
80100a3d:	90                   	nop
  }
  release(&cons.lock);
80100a3e:	83 ec 0c             	sub    $0xc,%esp
80100a41:	68 e0 35 11 80       	push   $0x801135e0
80100a46:	e8 0c 47 00 00       	call   80105157 <release>
80100a4b:	83 c4 10             	add    $0x10,%esp
  ilock(ip);
80100a4e:	83 ec 0c             	sub    $0xc,%esp
80100a51:	ff 75 08             	pushl  0x8(%ebp)
80100a54:	e8 95 0e 00 00       	call   801018ee <ilock>
80100a59:	83 c4 10             	add    $0x10,%esp

  return target - n;
80100a5c:	8b 45 10             	mov    0x10(%ebp),%eax
80100a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100a62:	29 c2                	sub    %eax,%edx
80100a64:	89 d0                	mov    %edx,%eax
}
80100a66:	c9                   	leave  
80100a67:	c3                   	ret    

80100a68 <consolewrite>:

int
consolewrite(struct inode *ip, char *buf, int n)
{
80100a68:	55                   	push   %ebp
80100a69:	89 e5                	mov    %esp,%ebp
80100a6b:	83 ec 18             	sub    $0x18,%esp
  int i;

  iunlock(ip);
80100a6e:	83 ec 0c             	sub    $0xc,%esp
80100a71:	ff 75 08             	pushl  0x8(%ebp)
80100a74:	e8 cd 0f 00 00       	call   80101a46 <iunlock>
80100a79:	83 c4 10             	add    $0x10,%esp
  acquire(&cons.lock);
80100a7c:	83 ec 0c             	sub    $0xc,%esp
80100a7f:	68 e0 35 11 80       	push   $0x801135e0
80100a84:	e8 67 46 00 00       	call   801050f0 <acquire>
80100a89:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < n; i++)
80100a8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80100a93:	eb 21                	jmp    80100ab6 <consolewrite+0x4e>
    consputc(buf[i] & 0xff);
80100a95:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100a98:	8b 45 0c             	mov    0xc(%ebp),%eax
80100a9b:	01 d0                	add    %edx,%eax
80100a9d:	0f b6 00             	movzbl (%eax),%eax
80100aa0:	0f be c0             	movsbl %al,%eax
80100aa3:	0f b6 c0             	movzbl %al,%eax
80100aa6:	83 ec 0c             	sub    $0xc,%esp
80100aa9:	50                   	push   %eax
80100aaa:	e8 e3 fc ff ff       	call   80100792 <consputc>
80100aaf:	83 c4 10             	add    $0x10,%esp
{
  int i;

  iunlock(ip);
  acquire(&cons.lock);
  for(i = 0; i < n; i++)
80100ab2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80100ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100ab9:	3b 45 10             	cmp    0x10(%ebp),%eax
80100abc:	7c d7                	jl     80100a95 <consolewrite+0x2d>
    consputc(buf[i] & 0xff);
  release(&cons.lock);
80100abe:	83 ec 0c             	sub    $0xc,%esp
80100ac1:	68 e0 35 11 80       	push   $0x801135e0
80100ac6:	e8 8c 46 00 00       	call   80105157 <release>
80100acb:	83 c4 10             	add    $0x10,%esp
  ilock(ip);
80100ace:	83 ec 0c             	sub    $0xc,%esp
80100ad1:	ff 75 08             	pushl  0x8(%ebp)
80100ad4:	e8 15 0e 00 00       	call   801018ee <ilock>
80100ad9:	83 c4 10             	add    $0x10,%esp

  return n;
80100adc:	8b 45 10             	mov    0x10(%ebp),%eax
}
80100adf:	c9                   	leave  
80100ae0:	c3                   	ret    

80100ae1 <consoleinit>:

void
consoleinit(void)
{
80100ae1:	55                   	push   %ebp
80100ae2:	89 e5                	mov    %esp,%ebp
80100ae4:	83 ec 08             	sub    $0x8,%esp
  initlock(&cons.lock, "console");
80100ae7:	83 ec 08             	sub    $0x8,%esp
80100aea:	68 be c2 10 80       	push   $0x8010c2be
80100aef:	68 e0 35 11 80       	push   $0x801135e0
80100af4:	e8 d5 45 00 00       	call   801050ce <initlock>
80100af9:	83 c4 10             	add    $0x10,%esp

  devsw[CONSOLE].write = consolewrite;
80100afc:	c7 05 ec 92 11 80 68 	movl   $0x80100a68,0x801192ec
80100b03:	0a 10 80 
  devsw[CONSOLE].read = consoleread;
80100b06:	c7 05 e8 92 11 80 57 	movl   $0x80100957,0x801192e8
80100b0d:	09 10 80 
  cons.locking = 1;
80100b10:	c7 05 14 36 11 80 01 	movl   $0x1,0x80113614
80100b17:	00 00 00 

  picenable(IRQ_KBD);
80100b1a:	83 ec 0c             	sub    $0xc,%esp
80100b1d:	6a 01                	push   $0x1
80100b1f:	e8 0d 35 00 00       	call   80104031 <picenable>
80100b24:	83 c4 10             	add    $0x10,%esp
  ioapicenable(IRQ_KBD, 0);
80100b27:	83 ec 08             	sub    $0x8,%esp
80100b2a:	6a 00                	push   $0x0
80100b2c:	6a 01                	push   $0x1
80100b2e:	e8 38 20 00 00       	call   80102b6b <ioapicenable>
80100b33:	83 c4 10             	add    $0x10,%esp
}
80100b36:	90                   	nop
80100b37:	c9                   	leave  
80100b38:	c3                   	ret    

80100b39 <exec>:
#include "x86.h"
#include "elf.h"

int
exec(char *path, char **argv)
{
80100b39:	55                   	push   %ebp
80100b3a:	89 e5                	mov    %esp,%ebp
80100b3c:	81 ec 18 01 00 00    	sub    $0x118,%esp
  struct elfhdr elf;
  struct inode *ip;
  struct proghdr ph;
  pde_t *pgdir, *oldpgdir;

  begin_op();
80100b42:	e8 18 2b 00 00       	call   8010365f <begin_op>
  if((ip = namei(path)) == 0){
80100b47:	83 ec 0c             	sub    $0xc,%esp
80100b4a:	ff 75 08             	pushl  0x8(%ebp)
80100b4d:	e8 a3 1a 00 00       	call   801025f5 <namei>
80100b52:	83 c4 10             	add    $0x10,%esp
80100b55:	89 45 d8             	mov    %eax,-0x28(%ebp)
80100b58:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
80100b5c:	75 0f                	jne    80100b6d <exec+0x34>
    end_op();
80100b5e:	e8 88 2b 00 00       	call   801036eb <end_op>
    return -1;
80100b63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80100b68:	e9 ce 03 00 00       	jmp    80100f3b <exec+0x402>
  }
  ilock(ip);
80100b6d:	83 ec 0c             	sub    $0xc,%esp
80100b70:	ff 75 d8             	pushl  -0x28(%ebp)
80100b73:	e8 76 0d 00 00       	call   801018ee <ilock>
80100b78:	83 c4 10             	add    $0x10,%esp
  pgdir = 0;
80100b7b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

  // Check ELF header
  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
80100b82:	6a 34                	push   $0x34
80100b84:	6a 00                	push   $0x0
80100b86:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
80100b8c:	50                   	push   %eax
80100b8d:	ff 75 d8             	pushl  -0x28(%ebp)
80100b90:	e8 10 14 00 00       	call   80101fa5 <readi>
80100b95:	83 c4 10             	add    $0x10,%esp
80100b98:	83 f8 33             	cmp    $0x33,%eax
80100b9b:	0f 86 49 03 00 00    	jbe    80100eea <exec+0x3b1>
    goto bad;
  if(elf.magic != ELF_MAGIC)
80100ba1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
80100ba7:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
80100bac:	0f 85 3b 03 00 00    	jne    80100eed <exec+0x3b4>
    goto bad;

  if((pgdir = setupkvm()) == 0)
80100bb2:	e8 90 72 00 00       	call   80107e47 <setupkvm>
80100bb7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80100bba:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
80100bbe:	0f 84 2c 03 00 00    	je     80100ef0 <exec+0x3b7>
    goto bad;

  // Load program into memory.
  sz = 0;
80100bc4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
80100bcb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80100bd2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
80100bd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
80100bdb:	e9 ab 00 00 00       	jmp    80100c8b <exec+0x152>
    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
80100be0:	8b 45 e8             	mov    -0x18(%ebp),%eax
80100be3:	6a 20                	push   $0x20
80100be5:	50                   	push   %eax
80100be6:	8d 85 ec fe ff ff    	lea    -0x114(%ebp),%eax
80100bec:	50                   	push   %eax
80100bed:	ff 75 d8             	pushl  -0x28(%ebp)
80100bf0:	e8 b0 13 00 00       	call   80101fa5 <readi>
80100bf5:	83 c4 10             	add    $0x10,%esp
80100bf8:	83 f8 20             	cmp    $0x20,%eax
80100bfb:	0f 85 f2 02 00 00    	jne    80100ef3 <exec+0x3ba>
      goto bad;
    if(ph.type != ELF_PROG_LOAD)
80100c01:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
80100c07:	83 f8 01             	cmp    $0x1,%eax
80100c0a:	75 71                	jne    80100c7d <exec+0x144>
      continue;
    if(ph.memsz < ph.filesz)
80100c0c:	8b 95 00 ff ff ff    	mov    -0x100(%ebp),%edx
80100c12:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
80100c18:	39 c2                	cmp    %eax,%edx
80100c1a:	0f 82 d6 02 00 00    	jb     80100ef6 <exec+0x3bd>
      goto bad;
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
80100c20:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
80100c26:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
80100c2c:	01 d0                	add    %edx,%eax
80100c2e:	83 ec 04             	sub    $0x4,%esp
80100c31:	50                   	push   %eax
80100c32:	ff 75 e0             	pushl  -0x20(%ebp)
80100c35:	ff 75 d4             	pushl  -0x2c(%ebp)
80100c38:	e8 b1 75 00 00       	call   801081ee <allocuvm>
80100c3d:	83 c4 10             	add    $0x10,%esp
80100c40:	89 45 e0             	mov    %eax,-0x20(%ebp)
80100c43:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80100c47:	0f 84 ac 02 00 00    	je     80100ef9 <exec+0x3c0>
      goto bad;
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
80100c4d:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
80100c53:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
80100c59:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
80100c5f:	83 ec 0c             	sub    $0xc,%esp
80100c62:	52                   	push   %edx
80100c63:	50                   	push   %eax
80100c64:	ff 75 d8             	pushl  -0x28(%ebp)
80100c67:	51                   	push   %ecx
80100c68:	ff 75 d4             	pushl  -0x2c(%ebp)
80100c6b:	e8 a7 74 00 00       	call   80108117 <loaduvm>
80100c70:	83 c4 20             	add    $0x20,%esp
80100c73:	85 c0                	test   %eax,%eax
80100c75:	0f 88 81 02 00 00    	js     80100efc <exec+0x3c3>
80100c7b:	eb 01                	jmp    80100c7e <exec+0x145>
  sz = 0;
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
      goto bad;
    if(ph.type != ELF_PROG_LOAD)
      continue;
80100c7d:	90                   	nop
  if((pgdir = setupkvm()) == 0)
    goto bad;

  // Load program into memory.
  sz = 0;
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
80100c7e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
80100c82:	8b 45 e8             	mov    -0x18(%ebp),%eax
80100c85:	83 c0 20             	add    $0x20,%eax
80100c88:	89 45 e8             	mov    %eax,-0x18(%ebp)
80100c8b:	0f b7 85 38 ff ff ff 	movzwl -0xc8(%ebp),%eax
80100c92:	0f b7 c0             	movzwl %ax,%eax
80100c95:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80100c98:	0f 8f 42 ff ff ff    	jg     80100be0 <exec+0xa7>
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
      goto bad;
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
      goto bad;
  }
  iunlockput(ip);
80100c9e:	83 ec 0c             	sub    $0xc,%esp
80100ca1:	ff 75 d8             	pushl  -0x28(%ebp)
80100ca4:	e8 ff 0e 00 00       	call   80101ba8 <iunlockput>
80100ca9:	83 c4 10             	add    $0x10,%esp
  end_op();
80100cac:	e8 3a 2a 00 00       	call   801036eb <end_op>
  ip = 0;
80100cb1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

  // Allocate two pages at the next page boundary.
  // Make the first inaccessible.  Use the second as the user stack.
  sz = PGROUNDUP(sz);
80100cb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
80100cbb:	05 ff 0f 00 00       	add    $0xfff,%eax
80100cc0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80100cc5:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
80100cc8:	8b 45 e0             	mov    -0x20(%ebp),%eax
80100ccb:	05 00 20 00 00       	add    $0x2000,%eax
80100cd0:	83 ec 04             	sub    $0x4,%esp
80100cd3:	50                   	push   %eax
80100cd4:	ff 75 e0             	pushl  -0x20(%ebp)
80100cd7:	ff 75 d4             	pushl  -0x2c(%ebp)
80100cda:	e8 0f 75 00 00       	call   801081ee <allocuvm>
80100cdf:	83 c4 10             	add    $0x10,%esp
80100ce2:	89 45 e0             	mov    %eax,-0x20(%ebp)
80100ce5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80100ce9:	0f 84 10 02 00 00    	je     80100eff <exec+0x3c6>
    goto bad;
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
80100cef:	8b 45 e0             	mov    -0x20(%ebp),%eax
80100cf2:	2d 00 20 00 00       	sub    $0x2000,%eax
80100cf7:	83 ec 08             	sub    $0x8,%esp
80100cfa:	50                   	push   %eax
80100cfb:	ff 75 d4             	pushl  -0x2c(%ebp)
80100cfe:	e8 11 77 00 00       	call   80108414 <clearpteu>
80100d03:	83 c4 10             	add    $0x10,%esp
  sp = sz;
80100d06:	8b 45 e0             	mov    -0x20(%ebp),%eax
80100d09:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // Push argument strings, prepare rest of stack in ustack.
  for(argc = 0; argv[argc]; argc++) {
80100d0c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80100d13:	e9 96 00 00 00       	jmp    80100dae <exec+0x275>
    if(argc >= MAXARG)
80100d18:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
80100d1c:	0f 87 e0 01 00 00    	ja     80100f02 <exec+0x3c9>
      goto bad;
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
80100d22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100d25:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80100d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
80100d2f:	01 d0                	add    %edx,%eax
80100d31:	8b 00                	mov    (%eax),%eax
80100d33:	83 ec 0c             	sub    $0xc,%esp
80100d36:	50                   	push   %eax
80100d37:	e8 64 48 00 00       	call   801055a0 <strlen>
80100d3c:	83 c4 10             	add    $0x10,%esp
80100d3f:	89 c2                	mov    %eax,%edx
80100d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
80100d44:	29 d0                	sub    %edx,%eax
80100d46:	83 e8 01             	sub    $0x1,%eax
80100d49:	83 e0 fc             	and    $0xfffffffc,%eax
80100d4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
80100d4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100d52:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80100d59:	8b 45 0c             	mov    0xc(%ebp),%eax
80100d5c:	01 d0                	add    %edx,%eax
80100d5e:	8b 00                	mov    (%eax),%eax
80100d60:	83 ec 0c             	sub    $0xc,%esp
80100d63:	50                   	push   %eax
80100d64:	e8 37 48 00 00       	call   801055a0 <strlen>
80100d69:	83 c4 10             	add    $0x10,%esp
80100d6c:	83 c0 01             	add    $0x1,%eax
80100d6f:	89 c1                	mov    %eax,%ecx
80100d71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100d74:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80100d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
80100d7e:	01 d0                	add    %edx,%eax
80100d80:	8b 00                	mov    (%eax),%eax
80100d82:	51                   	push   %ecx
80100d83:	50                   	push   %eax
80100d84:	ff 75 dc             	pushl  -0x24(%ebp)
80100d87:	ff 75 d4             	pushl  -0x2c(%ebp)
80100d8a:	e8 3c 78 00 00       	call   801085cb <copyout>
80100d8f:	83 c4 10             	add    $0x10,%esp
80100d92:	85 c0                	test   %eax,%eax
80100d94:	0f 88 6b 01 00 00    	js     80100f05 <exec+0x3cc>
      goto bad;
    ustack[3+argc] = sp;
80100d9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100d9d:	8d 50 03             	lea    0x3(%eax),%edx
80100da0:	8b 45 dc             	mov    -0x24(%ebp),%eax
80100da3:	89 84 95 40 ff ff ff 	mov    %eax,-0xc0(%ebp,%edx,4)
    goto bad;
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
  sp = sz;

  // Push argument strings, prepare rest of stack in ustack.
  for(argc = 0; argv[argc]; argc++) {
80100daa:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
80100dae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100db1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80100db8:	8b 45 0c             	mov    0xc(%ebp),%eax
80100dbb:	01 d0                	add    %edx,%eax
80100dbd:	8b 00                	mov    (%eax),%eax
80100dbf:	85 c0                	test   %eax,%eax
80100dc1:	0f 85 51 ff ff ff    	jne    80100d18 <exec+0x1df>
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
      goto bad;
    ustack[3+argc] = sp;
  }
  ustack[3+argc] = 0;
80100dc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100dca:	83 c0 03             	add    $0x3,%eax
80100dcd:	c7 84 85 40 ff ff ff 	movl   $0x0,-0xc0(%ebp,%eax,4)
80100dd4:	00 00 00 00 

  ustack[0] = 0xffffffff;  // fake return PC
80100dd8:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
80100ddf:	ff ff ff 
  ustack[1] = argc;
80100de2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100de5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  ustack[2] = sp - (argc+1)*4;  // argv pointer
80100deb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100dee:	83 c0 01             	add    $0x1,%eax
80100df1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80100df8:	8b 45 dc             	mov    -0x24(%ebp),%eax
80100dfb:	29 d0                	sub    %edx,%eax
80100dfd:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

  sp -= (3+argc+1) * 4;
80100e03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100e06:	83 c0 04             	add    $0x4,%eax
80100e09:	c1 e0 02             	shl    $0x2,%eax
80100e0c:	29 45 dc             	sub    %eax,-0x24(%ebp)
  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
80100e0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100e12:	83 c0 04             	add    $0x4,%eax
80100e15:	c1 e0 02             	shl    $0x2,%eax
80100e18:	50                   	push   %eax
80100e19:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
80100e1f:	50                   	push   %eax
80100e20:	ff 75 dc             	pushl  -0x24(%ebp)
80100e23:	ff 75 d4             	pushl  -0x2c(%ebp)
80100e26:	e8 a0 77 00 00       	call   801085cb <copyout>
80100e2b:	83 c4 10             	add    $0x10,%esp
80100e2e:	85 c0                	test   %eax,%eax
80100e30:	0f 88 d2 00 00 00    	js     80100f08 <exec+0x3cf>
    goto bad;

  // Save program name for debugging.
  for(last=s=path; *s; s++)
80100e36:	8b 45 08             	mov    0x8(%ebp),%eax
80100e39:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100e3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100e3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100e42:	eb 17                	jmp    80100e5b <exec+0x322>
    if(*s == '/')
80100e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100e47:	0f b6 00             	movzbl (%eax),%eax
80100e4a:	3c 2f                	cmp    $0x2f,%al
80100e4c:	75 09                	jne    80100e57 <exec+0x31e>
      last = s+1;
80100e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100e51:	83 c0 01             	add    $0x1,%eax
80100e54:	89 45 f0             	mov    %eax,-0x10(%ebp)
  sp -= (3+argc+1) * 4;
  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
    goto bad;

  // Save program name for debugging.
  for(last=s=path; *s; s++)
80100e57:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80100e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100e5e:	0f b6 00             	movzbl (%eax),%eax
80100e61:	84 c0                	test   %al,%al
80100e63:	75 df                	jne    80100e44 <exec+0x30b>
    if(*s == '/')
      last = s+1;
  safestrcpy(proc->name, last, sizeof(proc->name));
80100e65:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100e6b:	83 c0 6c             	add    $0x6c,%eax
80100e6e:	83 ec 04             	sub    $0x4,%esp
80100e71:	6a 10                	push   $0x10
80100e73:	ff 75 f0             	pushl  -0x10(%ebp)
80100e76:	50                   	push   %eax
80100e77:	e8 da 46 00 00       	call   80105556 <safestrcpy>
80100e7c:	83 c4 10             	add    $0x10,%esp

  // Commit to the user image.
  oldpgdir = proc->pgdir;
80100e7f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100e85:	8b 40 04             	mov    0x4(%eax),%eax
80100e88:	89 45 d0             	mov    %eax,-0x30(%ebp)
  proc->pgdir = pgdir;
80100e8b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100e91:	8b 55 d4             	mov    -0x2c(%ebp),%edx
80100e94:	89 50 04             	mov    %edx,0x4(%eax)
  proc->sz = sz;
80100e97:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100e9d:	8b 55 e0             	mov    -0x20(%ebp),%edx
80100ea0:	89 10                	mov    %edx,(%eax)
  proc->tf->eip = elf.entry;  // main
80100ea2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100ea8:	8b 40 18             	mov    0x18(%eax),%eax
80100eab:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
80100eb1:	89 50 38             	mov    %edx,0x38(%eax)
  proc->tf->esp = sp;
80100eb4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100eba:	8b 40 18             	mov    0x18(%eax),%eax
80100ebd:	8b 55 dc             	mov    -0x24(%ebp),%edx
80100ec0:	89 50 44             	mov    %edx,0x44(%eax)
  switchuvm(proc);
80100ec3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80100ec9:	83 ec 0c             	sub    $0xc,%esp
80100ecc:	50                   	push   %eax
80100ecd:	e8 5c 70 00 00       	call   80107f2e <switchuvm>
80100ed2:	83 c4 10             	add    $0x10,%esp
  freevm(oldpgdir);
80100ed5:	83 ec 0c             	sub    $0xc,%esp
80100ed8:	ff 75 d0             	pushl  -0x30(%ebp)
80100edb:	e8 94 74 00 00       	call   80108374 <freevm>
80100ee0:	83 c4 10             	add    $0x10,%esp
  return 0;
80100ee3:	b8 00 00 00 00       	mov    $0x0,%eax
80100ee8:	eb 51                	jmp    80100f3b <exec+0x402>
  ilock(ip);
  pgdir = 0;

  // Check ELF header
  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
    goto bad;
80100eea:	90                   	nop
80100eeb:	eb 1c                	jmp    80100f09 <exec+0x3d0>
  if(elf.magic != ELF_MAGIC)
    goto bad;
80100eed:	90                   	nop
80100eee:	eb 19                	jmp    80100f09 <exec+0x3d0>

  if((pgdir = setupkvm()) == 0)
    goto bad;
80100ef0:	90                   	nop
80100ef1:	eb 16                	jmp    80100f09 <exec+0x3d0>

  // Load program into memory.
  sz = 0;
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
      goto bad;
80100ef3:	90                   	nop
80100ef4:	eb 13                	jmp    80100f09 <exec+0x3d0>
    if(ph.type != ELF_PROG_LOAD)
      continue;
    if(ph.memsz < ph.filesz)
      goto bad;
80100ef6:	90                   	nop
80100ef7:	eb 10                	jmp    80100f09 <exec+0x3d0>
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
      goto bad;
80100ef9:	90                   	nop
80100efa:	eb 0d                	jmp    80100f09 <exec+0x3d0>
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
      goto bad;
80100efc:	90                   	nop
80100efd:	eb 0a                	jmp    80100f09 <exec+0x3d0>

  // Allocate two pages at the next page boundary.
  // Make the first inaccessible.  Use the second as the user stack.
  sz = PGROUNDUP(sz);
  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
    goto bad;
80100eff:	90                   	nop
80100f00:	eb 07                	jmp    80100f09 <exec+0x3d0>
  sp = sz;

  // Push argument strings, prepare rest of stack in ustack.
  for(argc = 0; argv[argc]; argc++) {
    if(argc >= MAXARG)
      goto bad;
80100f02:	90                   	nop
80100f03:	eb 04                	jmp    80100f09 <exec+0x3d0>
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
      goto bad;
80100f05:	90                   	nop
80100f06:	eb 01                	jmp    80100f09 <exec+0x3d0>
  ustack[1] = argc;
  ustack[2] = sp - (argc+1)*4;  // argv pointer

  sp -= (3+argc+1) * 4;
  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
    goto bad;
80100f08:	90                   	nop
  switchuvm(proc);
  freevm(oldpgdir);
  return 0;

 bad:
  if(pgdir)
80100f09:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
80100f0d:	74 0e                	je     80100f1d <exec+0x3e4>
    freevm(pgdir);
80100f0f:	83 ec 0c             	sub    $0xc,%esp
80100f12:	ff 75 d4             	pushl  -0x2c(%ebp)
80100f15:	e8 5a 74 00 00       	call   80108374 <freevm>
80100f1a:	83 c4 10             	add    $0x10,%esp
  if(ip){
80100f1d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
80100f21:	74 13                	je     80100f36 <exec+0x3fd>
    iunlockput(ip);
80100f23:	83 ec 0c             	sub    $0xc,%esp
80100f26:	ff 75 d8             	pushl  -0x28(%ebp)
80100f29:	e8 7a 0c 00 00       	call   80101ba8 <iunlockput>
80100f2e:	83 c4 10             	add    $0x10,%esp
    end_op();
80100f31:	e8 b5 27 00 00       	call   801036eb <end_op>
  }
  return -1;
80100f36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80100f3b:	c9                   	leave  
80100f3c:	c3                   	ret    

80100f3d <fileinit>:
  struct file file[NFILE];
} ftable;

void
fileinit(void)
{
80100f3d:	55                   	push   %ebp
80100f3e:	89 e5                	mov    %esp,%ebp
80100f40:	83 ec 08             	sub    $0x8,%esp
  initlock(&ftable.lock, "ftable");
80100f43:	83 ec 08             	sub    $0x8,%esp
80100f46:	68 c6 c2 10 80       	push   $0x8010c2c6
80100f4b:	68 40 89 11 80       	push   $0x80118940
80100f50:	e8 79 41 00 00       	call   801050ce <initlock>
80100f55:	83 c4 10             	add    $0x10,%esp
}
80100f58:	90                   	nop
80100f59:	c9                   	leave  
80100f5a:	c3                   	ret    

80100f5b <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
80100f5b:	55                   	push   %ebp
80100f5c:	89 e5                	mov    %esp,%ebp
80100f5e:	83 ec 18             	sub    $0x18,%esp
  struct file *f;

  acquire(&ftable.lock);
80100f61:	83 ec 0c             	sub    $0xc,%esp
80100f64:	68 40 89 11 80       	push   $0x80118940
80100f69:	e8 82 41 00 00       	call   801050f0 <acquire>
80100f6e:	83 c4 10             	add    $0x10,%esp
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80100f71:	c7 45 f4 74 89 11 80 	movl   $0x80118974,-0xc(%ebp)
80100f78:	eb 2d                	jmp    80100fa7 <filealloc+0x4c>
    if(f->ref == 0){
80100f7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100f7d:	8b 40 04             	mov    0x4(%eax),%eax
80100f80:	85 c0                	test   %eax,%eax
80100f82:	75 1f                	jne    80100fa3 <filealloc+0x48>
      f->ref = 1;
80100f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100f87:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
      release(&ftable.lock);
80100f8e:	83 ec 0c             	sub    $0xc,%esp
80100f91:	68 40 89 11 80       	push   $0x80118940
80100f96:	e8 bc 41 00 00       	call   80105157 <release>
80100f9b:	83 c4 10             	add    $0x10,%esp
      return f;
80100f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100fa1:	eb 23                	jmp    80100fc6 <filealloc+0x6b>
filealloc(void)
{
  struct file *f;

  acquire(&ftable.lock);
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80100fa3:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
80100fa7:	b8 d4 92 11 80       	mov    $0x801192d4,%eax
80100fac:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80100faf:	72 c9                	jb     80100f7a <filealloc+0x1f>
      f->ref = 1;
      release(&ftable.lock);
      return f;
    }
  }
  release(&ftable.lock);
80100fb1:	83 ec 0c             	sub    $0xc,%esp
80100fb4:	68 40 89 11 80       	push   $0x80118940
80100fb9:	e8 99 41 00 00       	call   80105157 <release>
80100fbe:	83 c4 10             	add    $0x10,%esp
  return 0;
80100fc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
80100fc6:	c9                   	leave  
80100fc7:	c3                   	ret    

80100fc8 <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
80100fc8:	55                   	push   %ebp
80100fc9:	89 e5                	mov    %esp,%ebp
80100fcb:	83 ec 08             	sub    $0x8,%esp
  acquire(&ftable.lock);
80100fce:	83 ec 0c             	sub    $0xc,%esp
80100fd1:	68 40 89 11 80       	push   $0x80118940
80100fd6:	e8 15 41 00 00       	call   801050f0 <acquire>
80100fdb:	83 c4 10             	add    $0x10,%esp
  if(f->ref < 1)
80100fde:	8b 45 08             	mov    0x8(%ebp),%eax
80100fe1:	8b 40 04             	mov    0x4(%eax),%eax
80100fe4:	85 c0                	test   %eax,%eax
80100fe6:	7f 0d                	jg     80100ff5 <filedup+0x2d>
    panic("filedup");
80100fe8:	83 ec 0c             	sub    $0xc,%esp
80100feb:	68 cd c2 10 80       	push   $0x8010c2cd
80100ff0:	e8 71 f5 ff ff       	call   80100566 <panic>
  f->ref++;
80100ff5:	8b 45 08             	mov    0x8(%ebp),%eax
80100ff8:	8b 40 04             	mov    0x4(%eax),%eax
80100ffb:	8d 50 01             	lea    0x1(%eax),%edx
80100ffe:	8b 45 08             	mov    0x8(%ebp),%eax
80101001:	89 50 04             	mov    %edx,0x4(%eax)
  release(&ftable.lock);
80101004:	83 ec 0c             	sub    $0xc,%esp
80101007:	68 40 89 11 80       	push   $0x80118940
8010100c:	e8 46 41 00 00       	call   80105157 <release>
80101011:	83 c4 10             	add    $0x10,%esp
  return f;
80101014:	8b 45 08             	mov    0x8(%ebp),%eax
}
80101017:	c9                   	leave  
80101018:	c3                   	ret    

80101019 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
80101019:	55                   	push   %ebp
8010101a:	89 e5                	mov    %esp,%ebp
8010101c:	83 ec 28             	sub    $0x28,%esp
  struct file ff;

  acquire(&ftable.lock);
8010101f:	83 ec 0c             	sub    $0xc,%esp
80101022:	68 40 89 11 80       	push   $0x80118940
80101027:	e8 c4 40 00 00       	call   801050f0 <acquire>
8010102c:	83 c4 10             	add    $0x10,%esp
  if(f->ref < 1)
8010102f:	8b 45 08             	mov    0x8(%ebp),%eax
80101032:	8b 40 04             	mov    0x4(%eax),%eax
80101035:	85 c0                	test   %eax,%eax
80101037:	7f 0d                	jg     80101046 <fileclose+0x2d>
    panic("fileclose");
80101039:	83 ec 0c             	sub    $0xc,%esp
8010103c:	68 d5 c2 10 80       	push   $0x8010c2d5
80101041:	e8 20 f5 ff ff       	call   80100566 <panic>
  if(--f->ref > 0){
80101046:	8b 45 08             	mov    0x8(%ebp),%eax
80101049:	8b 40 04             	mov    0x4(%eax),%eax
8010104c:	8d 50 ff             	lea    -0x1(%eax),%edx
8010104f:	8b 45 08             	mov    0x8(%ebp),%eax
80101052:	89 50 04             	mov    %edx,0x4(%eax)
80101055:	8b 45 08             	mov    0x8(%ebp),%eax
80101058:	8b 40 04             	mov    0x4(%eax),%eax
8010105b:	85 c0                	test   %eax,%eax
8010105d:	7e 15                	jle    80101074 <fileclose+0x5b>
    release(&ftable.lock);
8010105f:	83 ec 0c             	sub    $0xc,%esp
80101062:	68 40 89 11 80       	push   $0x80118940
80101067:	e8 eb 40 00 00       	call   80105157 <release>
8010106c:	83 c4 10             	add    $0x10,%esp
8010106f:	e9 8b 00 00 00       	jmp    801010ff <fileclose+0xe6>
    return;
  }
  ff = *f;
80101074:	8b 45 08             	mov    0x8(%ebp),%eax
80101077:	8b 10                	mov    (%eax),%edx
80101079:	89 55 e0             	mov    %edx,-0x20(%ebp)
8010107c:	8b 50 04             	mov    0x4(%eax),%edx
8010107f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101082:	8b 50 08             	mov    0x8(%eax),%edx
80101085:	89 55 e8             	mov    %edx,-0x18(%ebp)
80101088:	8b 50 0c             	mov    0xc(%eax),%edx
8010108b:	89 55 ec             	mov    %edx,-0x14(%ebp)
8010108e:	8b 50 10             	mov    0x10(%eax),%edx
80101091:	89 55 f0             	mov    %edx,-0x10(%ebp)
80101094:	8b 40 14             	mov    0x14(%eax),%eax
80101097:	89 45 f4             	mov    %eax,-0xc(%ebp)
  f->ref = 0;
8010109a:	8b 45 08             	mov    0x8(%ebp),%eax
8010109d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  f->type = FD_NONE;
801010a4:	8b 45 08             	mov    0x8(%ebp),%eax
801010a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  release(&ftable.lock);
801010ad:	83 ec 0c             	sub    $0xc,%esp
801010b0:	68 40 89 11 80       	push   $0x80118940
801010b5:	e8 9d 40 00 00       	call   80105157 <release>
801010ba:	83 c4 10             	add    $0x10,%esp
  
  if(ff.type == FD_PIPE)
801010bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
801010c0:	83 f8 01             	cmp    $0x1,%eax
801010c3:	75 19                	jne    801010de <fileclose+0xc5>
    pipeclose(ff.pipe, ff.writable);
801010c5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
801010c9:	0f be d0             	movsbl %al,%edx
801010cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
801010cf:	83 ec 08             	sub    $0x8,%esp
801010d2:	52                   	push   %edx
801010d3:	50                   	push   %eax
801010d4:	e8 c1 31 00 00       	call   8010429a <pipeclose>
801010d9:	83 c4 10             	add    $0x10,%esp
801010dc:	eb 21                	jmp    801010ff <fileclose+0xe6>
  else if(ff.type == FD_INODE){
801010de:	8b 45 e0             	mov    -0x20(%ebp),%eax
801010e1:	83 f8 02             	cmp    $0x2,%eax
801010e4:	75 19                	jne    801010ff <fileclose+0xe6>
    begin_op();
801010e6:	e8 74 25 00 00       	call   8010365f <begin_op>
    iput(ff.ip);
801010eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
801010ee:	83 ec 0c             	sub    $0xc,%esp
801010f1:	50                   	push   %eax
801010f2:	e8 c1 09 00 00       	call   80101ab8 <iput>
801010f7:	83 c4 10             	add    $0x10,%esp
    end_op();
801010fa:	e8 ec 25 00 00       	call   801036eb <end_op>
  }
}
801010ff:	c9                   	leave  
80101100:	c3                   	ret    

80101101 <filestat>:

// Get metadata about file f.
int
filestat(struct file *f, struct stat *st)
{
80101101:	55                   	push   %ebp
80101102:	89 e5                	mov    %esp,%ebp
80101104:	83 ec 08             	sub    $0x8,%esp
  if(f->type == FD_INODE){
80101107:	8b 45 08             	mov    0x8(%ebp),%eax
8010110a:	8b 00                	mov    (%eax),%eax
8010110c:	83 f8 02             	cmp    $0x2,%eax
8010110f:	75 40                	jne    80101151 <filestat+0x50>
    ilock(f->ip);
80101111:	8b 45 08             	mov    0x8(%ebp),%eax
80101114:	8b 40 10             	mov    0x10(%eax),%eax
80101117:	83 ec 0c             	sub    $0xc,%esp
8010111a:	50                   	push   %eax
8010111b:	e8 ce 07 00 00       	call   801018ee <ilock>
80101120:	83 c4 10             	add    $0x10,%esp
    stati(f->ip, st);
80101123:	8b 45 08             	mov    0x8(%ebp),%eax
80101126:	8b 40 10             	mov    0x10(%eax),%eax
80101129:	83 ec 08             	sub    $0x8,%esp
8010112c:	ff 75 0c             	pushl  0xc(%ebp)
8010112f:	50                   	push   %eax
80101130:	e8 2a 0e 00 00       	call   80101f5f <stati>
80101135:	83 c4 10             	add    $0x10,%esp
    iunlock(f->ip);
80101138:	8b 45 08             	mov    0x8(%ebp),%eax
8010113b:	8b 40 10             	mov    0x10(%eax),%eax
8010113e:	83 ec 0c             	sub    $0xc,%esp
80101141:	50                   	push   %eax
80101142:	e8 ff 08 00 00       	call   80101a46 <iunlock>
80101147:	83 c4 10             	add    $0x10,%esp
    return 0;
8010114a:	b8 00 00 00 00       	mov    $0x0,%eax
8010114f:	eb 05                	jmp    80101156 <filestat+0x55>
  }
  return -1;
80101151:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101156:	c9                   	leave  
80101157:	c3                   	ret    

80101158 <fileread>:

// Read from file f.
int
fileread(struct file *f, char *addr, int n)
{
80101158:	55                   	push   %ebp
80101159:	89 e5                	mov    %esp,%ebp
8010115b:	83 ec 18             	sub    $0x18,%esp
  int r;

  if(f->readable == 0)
8010115e:	8b 45 08             	mov    0x8(%ebp),%eax
80101161:	0f b6 40 08          	movzbl 0x8(%eax),%eax
80101165:	84 c0                	test   %al,%al
80101167:	75 0a                	jne    80101173 <fileread+0x1b>
    return -1;
80101169:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010116e:	e9 9b 00 00 00       	jmp    8010120e <fileread+0xb6>
  if(f->type == FD_PIPE)
80101173:	8b 45 08             	mov    0x8(%ebp),%eax
80101176:	8b 00                	mov    (%eax),%eax
80101178:	83 f8 01             	cmp    $0x1,%eax
8010117b:	75 1a                	jne    80101197 <fileread+0x3f>
    return piperead(f->pipe, addr, n);
8010117d:	8b 45 08             	mov    0x8(%ebp),%eax
80101180:	8b 40 0c             	mov    0xc(%eax),%eax
80101183:	83 ec 04             	sub    $0x4,%esp
80101186:	ff 75 10             	pushl  0x10(%ebp)
80101189:	ff 75 0c             	pushl  0xc(%ebp)
8010118c:	50                   	push   %eax
8010118d:	e8 b0 32 00 00       	call   80104442 <piperead>
80101192:	83 c4 10             	add    $0x10,%esp
80101195:	eb 77                	jmp    8010120e <fileread+0xb6>
  if(f->type == FD_INODE){
80101197:	8b 45 08             	mov    0x8(%ebp),%eax
8010119a:	8b 00                	mov    (%eax),%eax
8010119c:	83 f8 02             	cmp    $0x2,%eax
8010119f:	75 60                	jne    80101201 <fileread+0xa9>
    ilock(f->ip);
801011a1:	8b 45 08             	mov    0x8(%ebp),%eax
801011a4:	8b 40 10             	mov    0x10(%eax),%eax
801011a7:	83 ec 0c             	sub    $0xc,%esp
801011aa:	50                   	push   %eax
801011ab:	e8 3e 07 00 00       	call   801018ee <ilock>
801011b0:	83 c4 10             	add    $0x10,%esp
    if((r = readi(f->ip, addr, f->off, n)) > 0)
801011b3:	8b 4d 10             	mov    0x10(%ebp),%ecx
801011b6:	8b 45 08             	mov    0x8(%ebp),%eax
801011b9:	8b 50 14             	mov    0x14(%eax),%edx
801011bc:	8b 45 08             	mov    0x8(%ebp),%eax
801011bf:	8b 40 10             	mov    0x10(%eax),%eax
801011c2:	51                   	push   %ecx
801011c3:	52                   	push   %edx
801011c4:	ff 75 0c             	pushl  0xc(%ebp)
801011c7:	50                   	push   %eax
801011c8:	e8 d8 0d 00 00       	call   80101fa5 <readi>
801011cd:	83 c4 10             	add    $0x10,%esp
801011d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
801011d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801011d7:	7e 11                	jle    801011ea <fileread+0x92>
      f->off += r;
801011d9:	8b 45 08             	mov    0x8(%ebp),%eax
801011dc:	8b 50 14             	mov    0x14(%eax),%edx
801011df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801011e2:	01 c2                	add    %eax,%edx
801011e4:	8b 45 08             	mov    0x8(%ebp),%eax
801011e7:	89 50 14             	mov    %edx,0x14(%eax)
    iunlock(f->ip);
801011ea:	8b 45 08             	mov    0x8(%ebp),%eax
801011ed:	8b 40 10             	mov    0x10(%eax),%eax
801011f0:	83 ec 0c             	sub    $0xc,%esp
801011f3:	50                   	push   %eax
801011f4:	e8 4d 08 00 00       	call   80101a46 <iunlock>
801011f9:	83 c4 10             	add    $0x10,%esp
    return r;
801011fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801011ff:	eb 0d                	jmp    8010120e <fileread+0xb6>
  }
  panic("fileread");
80101201:	83 ec 0c             	sub    $0xc,%esp
80101204:	68 df c2 10 80       	push   $0x8010c2df
80101209:	e8 58 f3 ff ff       	call   80100566 <panic>
}
8010120e:	c9                   	leave  
8010120f:	c3                   	ret    

80101210 <filewrite>:

//PAGEBREAK!
// Write to file f.
int
filewrite(struct file *f, char *addr, int n)
{
80101210:	55                   	push   %ebp
80101211:	89 e5                	mov    %esp,%ebp
80101213:	53                   	push   %ebx
80101214:	83 ec 14             	sub    $0x14,%esp
  int r;

  if(f->writable == 0)
80101217:	8b 45 08             	mov    0x8(%ebp),%eax
8010121a:	0f b6 40 09          	movzbl 0x9(%eax),%eax
8010121e:	84 c0                	test   %al,%al
80101220:	75 0a                	jne    8010122c <filewrite+0x1c>
    return -1;
80101222:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101227:	e9 1b 01 00 00       	jmp    80101347 <filewrite+0x137>
  if(f->type == FD_PIPE)
8010122c:	8b 45 08             	mov    0x8(%ebp),%eax
8010122f:	8b 00                	mov    (%eax),%eax
80101231:	83 f8 01             	cmp    $0x1,%eax
80101234:	75 1d                	jne    80101253 <filewrite+0x43>
    return pipewrite(f->pipe, addr, n);
80101236:	8b 45 08             	mov    0x8(%ebp),%eax
80101239:	8b 40 0c             	mov    0xc(%eax),%eax
8010123c:	83 ec 04             	sub    $0x4,%esp
8010123f:	ff 75 10             	pushl  0x10(%ebp)
80101242:	ff 75 0c             	pushl  0xc(%ebp)
80101245:	50                   	push   %eax
80101246:	e8 f9 30 00 00       	call   80104344 <pipewrite>
8010124b:	83 c4 10             	add    $0x10,%esp
8010124e:	e9 f4 00 00 00       	jmp    80101347 <filewrite+0x137>
  if(f->type == FD_INODE){
80101253:	8b 45 08             	mov    0x8(%ebp),%eax
80101256:	8b 00                	mov    (%eax),%eax
80101258:	83 f8 02             	cmp    $0x2,%eax
8010125b:	0f 85 d9 00 00 00    	jne    8010133a <filewrite+0x12a>
    // the maximum log transaction size, including
    // i-node, indirect block, allocation blocks,
    // and 2 blocks of slop for non-aligned writes.
    // this really belongs lower down, since writei()
    // might be writing a device like the console.
    int max = ((LOGSIZE-1-1-2) / 2) * 512;
80101261:	c7 45 ec 00 1a 00 00 	movl   $0x1a00,-0x14(%ebp)
    int i = 0;
80101268:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(i < n){
8010126f:	e9 a3 00 00 00       	jmp    80101317 <filewrite+0x107>
      int n1 = n - i;
80101274:	8b 45 10             	mov    0x10(%ebp),%eax
80101277:	2b 45 f4             	sub    -0xc(%ebp),%eax
8010127a:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(n1 > max)
8010127d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101280:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80101283:	7e 06                	jle    8010128b <filewrite+0x7b>
        n1 = max;
80101285:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101288:	89 45 f0             	mov    %eax,-0x10(%ebp)

      begin_op();
8010128b:	e8 cf 23 00 00       	call   8010365f <begin_op>
      ilock(f->ip);
80101290:	8b 45 08             	mov    0x8(%ebp),%eax
80101293:	8b 40 10             	mov    0x10(%eax),%eax
80101296:	83 ec 0c             	sub    $0xc,%esp
80101299:	50                   	push   %eax
8010129a:	e8 4f 06 00 00       	call   801018ee <ilock>
8010129f:	83 c4 10             	add    $0x10,%esp
      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
801012a2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
801012a5:	8b 45 08             	mov    0x8(%ebp),%eax
801012a8:	8b 50 14             	mov    0x14(%eax),%edx
801012ab:	8b 5d f4             	mov    -0xc(%ebp),%ebx
801012ae:	8b 45 0c             	mov    0xc(%ebp),%eax
801012b1:	01 c3                	add    %eax,%ebx
801012b3:	8b 45 08             	mov    0x8(%ebp),%eax
801012b6:	8b 40 10             	mov    0x10(%eax),%eax
801012b9:	51                   	push   %ecx
801012ba:	52                   	push   %edx
801012bb:	53                   	push   %ebx
801012bc:	50                   	push   %eax
801012bd:	e8 3a 0e 00 00       	call   801020fc <writei>
801012c2:	83 c4 10             	add    $0x10,%esp
801012c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
801012c8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
801012cc:	7e 11                	jle    801012df <filewrite+0xcf>
        f->off += r;
801012ce:	8b 45 08             	mov    0x8(%ebp),%eax
801012d1:	8b 50 14             	mov    0x14(%eax),%edx
801012d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
801012d7:	01 c2                	add    %eax,%edx
801012d9:	8b 45 08             	mov    0x8(%ebp),%eax
801012dc:	89 50 14             	mov    %edx,0x14(%eax)
      iunlock(f->ip);
801012df:	8b 45 08             	mov    0x8(%ebp),%eax
801012e2:	8b 40 10             	mov    0x10(%eax),%eax
801012e5:	83 ec 0c             	sub    $0xc,%esp
801012e8:	50                   	push   %eax
801012e9:	e8 58 07 00 00       	call   80101a46 <iunlock>
801012ee:	83 c4 10             	add    $0x10,%esp
      end_op();
801012f1:	e8 f5 23 00 00       	call   801036eb <end_op>

      if(r < 0)
801012f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
801012fa:	78 29                	js     80101325 <filewrite+0x115>
        break;
      if(r != n1)
801012fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
801012ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80101302:	74 0d                	je     80101311 <filewrite+0x101>
        panic("short filewrite");
80101304:	83 ec 0c             	sub    $0xc,%esp
80101307:	68 e8 c2 10 80       	push   $0x8010c2e8
8010130c:	e8 55 f2 ff ff       	call   80100566 <panic>
      i += r;
80101311:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101314:	01 45 f4             	add    %eax,-0xc(%ebp)
    // and 2 blocks of slop for non-aligned writes.
    // this really belongs lower down, since writei()
    // might be writing a device like the console.
    int max = ((LOGSIZE-1-1-2) / 2) * 512;
    int i = 0;
    while(i < n){
80101317:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010131a:	3b 45 10             	cmp    0x10(%ebp),%eax
8010131d:	0f 8c 51 ff ff ff    	jl     80101274 <filewrite+0x64>
80101323:	eb 01                	jmp    80101326 <filewrite+0x116>
        f->off += r;
      iunlock(f->ip);
      end_op();

      if(r < 0)
        break;
80101325:	90                   	nop
      if(r != n1)
        panic("short filewrite");
      i += r;
    }
    return i == n ? n : -1;
80101326:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101329:	3b 45 10             	cmp    0x10(%ebp),%eax
8010132c:	75 05                	jne    80101333 <filewrite+0x123>
8010132e:	8b 45 10             	mov    0x10(%ebp),%eax
80101331:	eb 14                	jmp    80101347 <filewrite+0x137>
80101333:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101338:	eb 0d                	jmp    80101347 <filewrite+0x137>
  }
  panic("filewrite");
8010133a:	83 ec 0c             	sub    $0xc,%esp
8010133d:	68 f8 c2 10 80       	push   $0x8010c2f8
80101342:	e8 1f f2 ff ff       	call   80100566 <panic>
}
80101347:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010134a:	c9                   	leave  
8010134b:	c3                   	ret    

8010134c <readsb>:
static void itrunc(struct inode*);

// Read the super block.
void
readsb(int dev, struct superblock *sb)
{
8010134c:	55                   	push   %ebp
8010134d:	89 e5                	mov    %esp,%ebp
8010134f:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  
  bp = bread(dev, 1);
80101352:	8b 45 08             	mov    0x8(%ebp),%eax
80101355:	83 ec 08             	sub    $0x8,%esp
80101358:	6a 01                	push   $0x1
8010135a:	50                   	push   %eax
8010135b:	e8 56 ee ff ff       	call   801001b6 <bread>
80101360:	83 c4 10             	add    $0x10,%esp
80101363:	89 45 f4             	mov    %eax,-0xc(%ebp)
  memmove(sb, bp->data, sizeof(*sb));
80101366:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101369:	83 c0 18             	add    $0x18,%eax
8010136c:	83 ec 04             	sub    $0x4,%esp
8010136f:	6a 10                	push   $0x10
80101371:	50                   	push   %eax
80101372:	ff 75 0c             	pushl  0xc(%ebp)
80101375:	e8 98 40 00 00       	call   80105412 <memmove>
8010137a:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
8010137d:	83 ec 0c             	sub    $0xc,%esp
80101380:	ff 75 f4             	pushl  -0xc(%ebp)
80101383:	e8 a6 ee ff ff       	call   8010022e <brelse>
80101388:	83 c4 10             	add    $0x10,%esp
}
8010138b:	90                   	nop
8010138c:	c9                   	leave  
8010138d:	c3                   	ret    

8010138e <bzero>:

// Zero a block.
static void
bzero(int dev, int bno)
{
8010138e:	55                   	push   %ebp
8010138f:	89 e5                	mov    %esp,%ebp
80101391:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  
  bp = bread(dev, bno);
80101394:	8b 55 0c             	mov    0xc(%ebp),%edx
80101397:	8b 45 08             	mov    0x8(%ebp),%eax
8010139a:	83 ec 08             	sub    $0x8,%esp
8010139d:	52                   	push   %edx
8010139e:	50                   	push   %eax
8010139f:	e8 12 ee ff ff       	call   801001b6 <bread>
801013a4:	83 c4 10             	add    $0x10,%esp
801013a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  memset(bp->data, 0, BSIZE);
801013aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
801013ad:	83 c0 18             	add    $0x18,%eax
801013b0:	83 ec 04             	sub    $0x4,%esp
801013b3:	68 00 02 00 00       	push   $0x200
801013b8:	6a 00                	push   $0x0
801013ba:	50                   	push   %eax
801013bb:	e8 93 3f 00 00       	call   80105353 <memset>
801013c0:	83 c4 10             	add    $0x10,%esp
  log_write(bp);
801013c3:	83 ec 0c             	sub    $0xc,%esp
801013c6:	ff 75 f4             	pushl  -0xc(%ebp)
801013c9:	e8 c9 24 00 00       	call   80103897 <log_write>
801013ce:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
801013d1:	83 ec 0c             	sub    $0xc,%esp
801013d4:	ff 75 f4             	pushl  -0xc(%ebp)
801013d7:	e8 52 ee ff ff       	call   8010022e <brelse>
801013dc:	83 c4 10             	add    $0x10,%esp
}
801013df:	90                   	nop
801013e0:	c9                   	leave  
801013e1:	c3                   	ret    

801013e2 <balloc>:
// Blocks. 

// Allocate a zeroed disk block.
static uint
balloc(uint dev)
{
801013e2:	55                   	push   %ebp
801013e3:	89 e5                	mov    %esp,%ebp
801013e5:	83 ec 28             	sub    $0x28,%esp
  int b, bi, m;
  struct buf *bp;
  struct superblock sb;

  bp = 0;
801013e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  readsb(dev, &sb);
801013ef:	8b 45 08             	mov    0x8(%ebp),%eax
801013f2:	83 ec 08             	sub    $0x8,%esp
801013f5:	8d 55 d8             	lea    -0x28(%ebp),%edx
801013f8:	52                   	push   %edx
801013f9:	50                   	push   %eax
801013fa:	e8 4d ff ff ff       	call   8010134c <readsb>
801013ff:	83 c4 10             	add    $0x10,%esp
  for(b = 0; b < sb.size; b += BPB){
80101402:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80101409:	e9 15 01 00 00       	jmp    80101523 <balloc+0x141>
    bp = bread(dev, BBLOCK(b, sb.ninodes));
8010140e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101411:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
80101417:	85 c0                	test   %eax,%eax
80101419:	0f 48 c2             	cmovs  %edx,%eax
8010141c:	c1 f8 0c             	sar    $0xc,%eax
8010141f:	89 c2                	mov    %eax,%edx
80101421:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101424:	c1 e8 03             	shr    $0x3,%eax
80101427:	01 d0                	add    %edx,%eax
80101429:	83 c0 03             	add    $0x3,%eax
8010142c:	83 ec 08             	sub    $0x8,%esp
8010142f:	50                   	push   %eax
80101430:	ff 75 08             	pushl  0x8(%ebp)
80101433:	e8 7e ed ff ff       	call   801001b6 <bread>
80101438:	83 c4 10             	add    $0x10,%esp
8010143b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
8010143e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80101445:	e9 a6 00 00 00       	jmp    801014f0 <balloc+0x10e>
      m = 1 << (bi % 8);
8010144a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010144d:	99                   	cltd   
8010144e:	c1 ea 1d             	shr    $0x1d,%edx
80101451:	01 d0                	add    %edx,%eax
80101453:	83 e0 07             	and    $0x7,%eax
80101456:	29 d0                	sub    %edx,%eax
80101458:	ba 01 00 00 00       	mov    $0x1,%edx
8010145d:	89 c1                	mov    %eax,%ecx
8010145f:	d3 e2                	shl    %cl,%edx
80101461:	89 d0                	mov    %edx,%eax
80101463:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if((bp->data[bi/8] & m) == 0){  // Is block free?
80101466:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101469:	8d 50 07             	lea    0x7(%eax),%edx
8010146c:	85 c0                	test   %eax,%eax
8010146e:	0f 48 c2             	cmovs  %edx,%eax
80101471:	c1 f8 03             	sar    $0x3,%eax
80101474:	89 c2                	mov    %eax,%edx
80101476:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101479:	0f b6 44 10 18       	movzbl 0x18(%eax,%edx,1),%eax
8010147e:	0f b6 c0             	movzbl %al,%eax
80101481:	23 45 e8             	and    -0x18(%ebp),%eax
80101484:	85 c0                	test   %eax,%eax
80101486:	75 64                	jne    801014ec <balloc+0x10a>
        bp->data[bi/8] |= m;  // Mark block in use.
80101488:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010148b:	8d 50 07             	lea    0x7(%eax),%edx
8010148e:	85 c0                	test   %eax,%eax
80101490:	0f 48 c2             	cmovs  %edx,%eax
80101493:	c1 f8 03             	sar    $0x3,%eax
80101496:	8b 55 ec             	mov    -0x14(%ebp),%edx
80101499:	0f b6 54 02 18       	movzbl 0x18(%edx,%eax,1),%edx
8010149e:	89 d1                	mov    %edx,%ecx
801014a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
801014a3:	09 ca                	or     %ecx,%edx
801014a5:	89 d1                	mov    %edx,%ecx
801014a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
801014aa:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
        log_write(bp);
801014ae:	83 ec 0c             	sub    $0xc,%esp
801014b1:	ff 75 ec             	pushl  -0x14(%ebp)
801014b4:	e8 de 23 00 00       	call   80103897 <log_write>
801014b9:	83 c4 10             	add    $0x10,%esp
        brelse(bp);
801014bc:	83 ec 0c             	sub    $0xc,%esp
801014bf:	ff 75 ec             	pushl  -0x14(%ebp)
801014c2:	e8 67 ed ff ff       	call   8010022e <brelse>
801014c7:	83 c4 10             	add    $0x10,%esp
        bzero(dev, b + bi);
801014ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
801014cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
801014d0:	01 c2                	add    %eax,%edx
801014d2:	8b 45 08             	mov    0x8(%ebp),%eax
801014d5:	83 ec 08             	sub    $0x8,%esp
801014d8:	52                   	push   %edx
801014d9:	50                   	push   %eax
801014da:	e8 af fe ff ff       	call   8010138e <bzero>
801014df:	83 c4 10             	add    $0x10,%esp
        return b + bi;
801014e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
801014e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
801014e8:	01 d0                	add    %edx,%eax
801014ea:	eb 52                	jmp    8010153e <balloc+0x15c>

  bp = 0;
  readsb(dev, &sb);
  for(b = 0; b < sb.size; b += BPB){
    bp = bread(dev, BBLOCK(b, sb.ninodes));
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
801014ec:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
801014f0:	81 7d f0 ff 0f 00 00 	cmpl   $0xfff,-0x10(%ebp)
801014f7:	7f 15                	jg     8010150e <balloc+0x12c>
801014f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
801014fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801014ff:	01 d0                	add    %edx,%eax
80101501:	89 c2                	mov    %eax,%edx
80101503:	8b 45 d8             	mov    -0x28(%ebp),%eax
80101506:	39 c2                	cmp    %eax,%edx
80101508:	0f 82 3c ff ff ff    	jb     8010144a <balloc+0x68>
        brelse(bp);
        bzero(dev, b + bi);
        return b + bi;
      }
    }
    brelse(bp);
8010150e:	83 ec 0c             	sub    $0xc,%esp
80101511:	ff 75 ec             	pushl  -0x14(%ebp)
80101514:	e8 15 ed ff ff       	call   8010022e <brelse>
80101519:	83 c4 10             	add    $0x10,%esp
  struct buf *bp;
  struct superblock sb;

  bp = 0;
  readsb(dev, &sb);
  for(b = 0; b < sb.size; b += BPB){
8010151c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80101523:	8b 55 d8             	mov    -0x28(%ebp),%edx
80101526:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101529:	39 c2                	cmp    %eax,%edx
8010152b:	0f 87 dd fe ff ff    	ja     8010140e <balloc+0x2c>
        return b + bi;
      }
    }
    brelse(bp);
  }
  panic("balloc: out of blocks");
80101531:	83 ec 0c             	sub    $0xc,%esp
80101534:	68 02 c3 10 80       	push   $0x8010c302
80101539:	e8 28 f0 ff ff       	call   80100566 <panic>
}
8010153e:	c9                   	leave  
8010153f:	c3                   	ret    

80101540 <bfree>:

// Free a disk block.
static void
bfree(int dev, uint b)
{
80101540:	55                   	push   %ebp
80101541:	89 e5                	mov    %esp,%ebp
80101543:	83 ec 28             	sub    $0x28,%esp
  struct buf *bp;
  struct superblock sb;
  int bi, m;

  readsb(dev, &sb);
80101546:	83 ec 08             	sub    $0x8,%esp
80101549:	8d 45 dc             	lea    -0x24(%ebp),%eax
8010154c:	50                   	push   %eax
8010154d:	ff 75 08             	pushl  0x8(%ebp)
80101550:	e8 f7 fd ff ff       	call   8010134c <readsb>
80101555:	83 c4 10             	add    $0x10,%esp
  bp = bread(dev, BBLOCK(b, sb.ninodes));
80101558:	8b 45 0c             	mov    0xc(%ebp),%eax
8010155b:	c1 e8 0c             	shr    $0xc,%eax
8010155e:	89 c2                	mov    %eax,%edx
80101560:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101563:	c1 e8 03             	shr    $0x3,%eax
80101566:	01 d0                	add    %edx,%eax
80101568:	8d 50 03             	lea    0x3(%eax),%edx
8010156b:	8b 45 08             	mov    0x8(%ebp),%eax
8010156e:	83 ec 08             	sub    $0x8,%esp
80101571:	52                   	push   %edx
80101572:	50                   	push   %eax
80101573:	e8 3e ec ff ff       	call   801001b6 <bread>
80101578:	83 c4 10             	add    $0x10,%esp
8010157b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  bi = b % BPB;
8010157e:	8b 45 0c             	mov    0xc(%ebp),%eax
80101581:	25 ff 0f 00 00       	and    $0xfff,%eax
80101586:	89 45 f0             	mov    %eax,-0x10(%ebp)
  m = 1 << (bi % 8);
80101589:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010158c:	99                   	cltd   
8010158d:	c1 ea 1d             	shr    $0x1d,%edx
80101590:	01 d0                	add    %edx,%eax
80101592:	83 e0 07             	and    $0x7,%eax
80101595:	29 d0                	sub    %edx,%eax
80101597:	ba 01 00 00 00       	mov    $0x1,%edx
8010159c:	89 c1                	mov    %eax,%ecx
8010159e:	d3 e2                	shl    %cl,%edx
801015a0:	89 d0                	mov    %edx,%eax
801015a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((bp->data[bi/8] & m) == 0)
801015a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
801015a8:	8d 50 07             	lea    0x7(%eax),%edx
801015ab:	85 c0                	test   %eax,%eax
801015ad:	0f 48 c2             	cmovs  %edx,%eax
801015b0:	c1 f8 03             	sar    $0x3,%eax
801015b3:	89 c2                	mov    %eax,%edx
801015b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801015b8:	0f b6 44 10 18       	movzbl 0x18(%eax,%edx,1),%eax
801015bd:	0f b6 c0             	movzbl %al,%eax
801015c0:	23 45 ec             	and    -0x14(%ebp),%eax
801015c3:	85 c0                	test   %eax,%eax
801015c5:	75 0d                	jne    801015d4 <bfree+0x94>
    panic("freeing free block");
801015c7:	83 ec 0c             	sub    $0xc,%esp
801015ca:	68 18 c3 10 80       	push   $0x8010c318
801015cf:	e8 92 ef ff ff       	call   80100566 <panic>
  bp->data[bi/8] &= ~m;
801015d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801015d7:	8d 50 07             	lea    0x7(%eax),%edx
801015da:	85 c0                	test   %eax,%eax
801015dc:	0f 48 c2             	cmovs  %edx,%eax
801015df:	c1 f8 03             	sar    $0x3,%eax
801015e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
801015e5:	0f b6 54 02 18       	movzbl 0x18(%edx,%eax,1),%edx
801015ea:	89 d1                	mov    %edx,%ecx
801015ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
801015ef:	f7 d2                	not    %edx
801015f1:	21 ca                	and    %ecx,%edx
801015f3:	89 d1                	mov    %edx,%ecx
801015f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
801015f8:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
  log_write(bp);
801015fc:	83 ec 0c             	sub    $0xc,%esp
801015ff:	ff 75 f4             	pushl  -0xc(%ebp)
80101602:	e8 90 22 00 00       	call   80103897 <log_write>
80101607:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
8010160a:	83 ec 0c             	sub    $0xc,%esp
8010160d:	ff 75 f4             	pushl  -0xc(%ebp)
80101610:	e8 19 ec ff ff       	call   8010022e <brelse>
80101615:	83 c4 10             	add    $0x10,%esp
}
80101618:	90                   	nop
80101619:	c9                   	leave  
8010161a:	c3                   	ret    

8010161b <iinit>:
  struct inode inode[NINODE];
} icache;

void
iinit(void)
{
8010161b:	55                   	push   %ebp
8010161c:	89 e5                	mov    %esp,%ebp
8010161e:	83 ec 08             	sub    $0x8,%esp
  initlock(&icache.lock, "icache");
80101621:	83 ec 08             	sub    $0x8,%esp
80101624:	68 2b c3 10 80       	push   $0x8010c32b
80101629:	68 40 93 11 80       	push   $0x80119340
8010162e:	e8 9b 3a 00 00       	call   801050ce <initlock>
80101633:	83 c4 10             	add    $0x10,%esp
}
80101636:	90                   	nop
80101637:	c9                   	leave  
80101638:	c3                   	ret    

80101639 <ialloc>:
//PAGEBREAK!
// Allocate a new inode with the given type on device dev.
// A free inode has a type of zero.
struct inode*
ialloc(uint dev, short type)
{
80101639:	55                   	push   %ebp
8010163a:	89 e5                	mov    %esp,%ebp
8010163c:	83 ec 38             	sub    $0x38,%esp
8010163f:	8b 45 0c             	mov    0xc(%ebp),%eax
80101642:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
  int inum;
  struct buf *bp;
  struct dinode *dip;
  struct superblock sb;

  readsb(dev, &sb);
80101646:	8b 45 08             	mov    0x8(%ebp),%eax
80101649:	83 ec 08             	sub    $0x8,%esp
8010164c:	8d 55 dc             	lea    -0x24(%ebp),%edx
8010164f:	52                   	push   %edx
80101650:	50                   	push   %eax
80101651:	e8 f6 fc ff ff       	call   8010134c <readsb>
80101656:	83 c4 10             	add    $0x10,%esp

  for(inum = 1; inum < sb.ninodes; inum++){
80101659:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
80101660:	e9 98 00 00 00       	jmp    801016fd <ialloc+0xc4>
    bp = bread(dev, IBLOCK(inum));
80101665:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101668:	c1 e8 03             	shr    $0x3,%eax
8010166b:	83 c0 02             	add    $0x2,%eax
8010166e:	83 ec 08             	sub    $0x8,%esp
80101671:	50                   	push   %eax
80101672:	ff 75 08             	pushl  0x8(%ebp)
80101675:	e8 3c eb ff ff       	call   801001b6 <bread>
8010167a:	83 c4 10             	add    $0x10,%esp
8010167d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    dip = (struct dinode*)bp->data + inum%IPB;
80101680:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101683:	8d 50 18             	lea    0x18(%eax),%edx
80101686:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101689:	83 e0 07             	and    $0x7,%eax
8010168c:	c1 e0 06             	shl    $0x6,%eax
8010168f:	01 d0                	add    %edx,%eax
80101691:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(dip->type == 0){  // a free inode
80101694:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101697:	0f b7 00             	movzwl (%eax),%eax
8010169a:	66 85 c0             	test   %ax,%ax
8010169d:	75 4c                	jne    801016eb <ialloc+0xb2>
      memset(dip, 0, sizeof(*dip));
8010169f:	83 ec 04             	sub    $0x4,%esp
801016a2:	6a 40                	push   $0x40
801016a4:	6a 00                	push   $0x0
801016a6:	ff 75 ec             	pushl  -0x14(%ebp)
801016a9:	e8 a5 3c 00 00       	call   80105353 <memset>
801016ae:	83 c4 10             	add    $0x10,%esp
      dip->type = type;
801016b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
801016b4:	0f b7 55 d4          	movzwl -0x2c(%ebp),%edx
801016b8:	66 89 10             	mov    %dx,(%eax)
      log_write(bp);   // mark it allocated on the disk
801016bb:	83 ec 0c             	sub    $0xc,%esp
801016be:	ff 75 f0             	pushl  -0x10(%ebp)
801016c1:	e8 d1 21 00 00       	call   80103897 <log_write>
801016c6:	83 c4 10             	add    $0x10,%esp
      brelse(bp);
801016c9:	83 ec 0c             	sub    $0xc,%esp
801016cc:	ff 75 f0             	pushl  -0x10(%ebp)
801016cf:	e8 5a eb ff ff       	call   8010022e <brelse>
801016d4:	83 c4 10             	add    $0x10,%esp
      return iget(dev, inum);
801016d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801016da:	83 ec 08             	sub    $0x8,%esp
801016dd:	50                   	push   %eax
801016de:	ff 75 08             	pushl  0x8(%ebp)
801016e1:	e8 ef 00 00 00       	call   801017d5 <iget>
801016e6:	83 c4 10             	add    $0x10,%esp
801016e9:	eb 2d                	jmp    80101718 <ialloc+0xdf>
    }
    brelse(bp);
801016eb:	83 ec 0c             	sub    $0xc,%esp
801016ee:	ff 75 f0             	pushl  -0x10(%ebp)
801016f1:	e8 38 eb ff ff       	call   8010022e <brelse>
801016f6:	83 c4 10             	add    $0x10,%esp
  struct dinode *dip;
  struct superblock sb;

  readsb(dev, &sb);

  for(inum = 1; inum < sb.ninodes; inum++){
801016f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
801016fd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101700:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101703:	39 c2                	cmp    %eax,%edx
80101705:	0f 87 5a ff ff ff    	ja     80101665 <ialloc+0x2c>
      brelse(bp);
      return iget(dev, inum);
    }
    brelse(bp);
  }
  panic("ialloc: no inodes");
8010170b:	83 ec 0c             	sub    $0xc,%esp
8010170e:	68 32 c3 10 80       	push   $0x8010c332
80101713:	e8 4e ee ff ff       	call   80100566 <panic>
}
80101718:	c9                   	leave  
80101719:	c3                   	ret    

8010171a <iupdate>:

// Copy a modified in-memory inode to disk.
void
iupdate(struct inode *ip)
{
8010171a:	55                   	push   %ebp
8010171b:	89 e5                	mov    %esp,%ebp
8010171d:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  struct dinode *dip;

  bp = bread(ip->dev, IBLOCK(ip->inum));
80101720:	8b 45 08             	mov    0x8(%ebp),%eax
80101723:	8b 40 04             	mov    0x4(%eax),%eax
80101726:	c1 e8 03             	shr    $0x3,%eax
80101729:	8d 50 02             	lea    0x2(%eax),%edx
8010172c:	8b 45 08             	mov    0x8(%ebp),%eax
8010172f:	8b 00                	mov    (%eax),%eax
80101731:	83 ec 08             	sub    $0x8,%esp
80101734:	52                   	push   %edx
80101735:	50                   	push   %eax
80101736:	e8 7b ea ff ff       	call   801001b6 <bread>
8010173b:	83 c4 10             	add    $0x10,%esp
8010173e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  dip = (struct dinode*)bp->data + ip->inum%IPB;
80101741:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101744:	8d 50 18             	lea    0x18(%eax),%edx
80101747:	8b 45 08             	mov    0x8(%ebp),%eax
8010174a:	8b 40 04             	mov    0x4(%eax),%eax
8010174d:	83 e0 07             	and    $0x7,%eax
80101750:	c1 e0 06             	shl    $0x6,%eax
80101753:	01 d0                	add    %edx,%eax
80101755:	89 45 f0             	mov    %eax,-0x10(%ebp)
  dip->type = ip->type;
80101758:	8b 45 08             	mov    0x8(%ebp),%eax
8010175b:	0f b7 50 10          	movzwl 0x10(%eax),%edx
8010175f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101762:	66 89 10             	mov    %dx,(%eax)
  dip->major = ip->major;
80101765:	8b 45 08             	mov    0x8(%ebp),%eax
80101768:	0f b7 50 12          	movzwl 0x12(%eax),%edx
8010176c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010176f:	66 89 50 02          	mov    %dx,0x2(%eax)
  dip->minor = ip->minor;
80101773:	8b 45 08             	mov    0x8(%ebp),%eax
80101776:	0f b7 50 14          	movzwl 0x14(%eax),%edx
8010177a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010177d:	66 89 50 04          	mov    %dx,0x4(%eax)
  dip->nlink = ip->nlink;
80101781:	8b 45 08             	mov    0x8(%ebp),%eax
80101784:	0f b7 50 16          	movzwl 0x16(%eax),%edx
80101788:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010178b:	66 89 50 06          	mov    %dx,0x6(%eax)
  dip->size = ip->size;
8010178f:	8b 45 08             	mov    0x8(%ebp),%eax
80101792:	8b 50 18             	mov    0x18(%eax),%edx
80101795:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101798:	89 50 08             	mov    %edx,0x8(%eax)
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
8010179b:	8b 45 08             	mov    0x8(%ebp),%eax
8010179e:	8d 50 1c             	lea    0x1c(%eax),%edx
801017a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801017a4:	83 c0 0c             	add    $0xc,%eax
801017a7:	83 ec 04             	sub    $0x4,%esp
801017aa:	6a 34                	push   $0x34
801017ac:	52                   	push   %edx
801017ad:	50                   	push   %eax
801017ae:	e8 5f 3c 00 00       	call   80105412 <memmove>
801017b3:	83 c4 10             	add    $0x10,%esp
  log_write(bp);
801017b6:	83 ec 0c             	sub    $0xc,%esp
801017b9:	ff 75 f4             	pushl  -0xc(%ebp)
801017bc:	e8 d6 20 00 00       	call   80103897 <log_write>
801017c1:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
801017c4:	83 ec 0c             	sub    $0xc,%esp
801017c7:	ff 75 f4             	pushl  -0xc(%ebp)
801017ca:	e8 5f ea ff ff       	call   8010022e <brelse>
801017cf:	83 c4 10             	add    $0x10,%esp
}
801017d2:	90                   	nop
801017d3:	c9                   	leave  
801017d4:	c3                   	ret    

801017d5 <iget>:
// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.
static struct inode*
iget(uint dev, uint inum)
{
801017d5:	55                   	push   %ebp
801017d6:	89 e5                	mov    %esp,%ebp
801017d8:	83 ec 18             	sub    $0x18,%esp
  struct inode *ip, *empty;

  acquire(&icache.lock);
801017db:	83 ec 0c             	sub    $0xc,%esp
801017de:	68 40 93 11 80       	push   $0x80119340
801017e3:	e8 08 39 00 00       	call   801050f0 <acquire>
801017e8:	83 c4 10             	add    $0x10,%esp

  // Is the inode already cached?
  empty = 0;
801017eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
801017f2:	c7 45 f4 74 93 11 80 	movl   $0x80119374,-0xc(%ebp)
801017f9:	eb 5d                	jmp    80101858 <iget+0x83>
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
801017fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801017fe:	8b 40 08             	mov    0x8(%eax),%eax
80101801:	85 c0                	test   %eax,%eax
80101803:	7e 39                	jle    8010183e <iget+0x69>
80101805:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101808:	8b 00                	mov    (%eax),%eax
8010180a:	3b 45 08             	cmp    0x8(%ebp),%eax
8010180d:	75 2f                	jne    8010183e <iget+0x69>
8010180f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101812:	8b 40 04             	mov    0x4(%eax),%eax
80101815:	3b 45 0c             	cmp    0xc(%ebp),%eax
80101818:	75 24                	jne    8010183e <iget+0x69>
      ip->ref++;
8010181a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010181d:	8b 40 08             	mov    0x8(%eax),%eax
80101820:	8d 50 01             	lea    0x1(%eax),%edx
80101823:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101826:	89 50 08             	mov    %edx,0x8(%eax)
      release(&icache.lock);
80101829:	83 ec 0c             	sub    $0xc,%esp
8010182c:	68 40 93 11 80       	push   $0x80119340
80101831:	e8 21 39 00 00       	call   80105157 <release>
80101836:	83 c4 10             	add    $0x10,%esp
      return ip;
80101839:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010183c:	eb 74                	jmp    801018b2 <iget+0xdd>
    }
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
8010183e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80101842:	75 10                	jne    80101854 <iget+0x7f>
80101844:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101847:	8b 40 08             	mov    0x8(%eax),%eax
8010184a:	85 c0                	test   %eax,%eax
8010184c:	75 06                	jne    80101854 <iget+0x7f>
      empty = ip;
8010184e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101851:	89 45 f0             	mov    %eax,-0x10(%ebp)

  acquire(&icache.lock);

  // Is the inode already cached?
  empty = 0;
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
80101854:	83 45 f4 50          	addl   $0x50,-0xc(%ebp)
80101858:	81 7d f4 14 a3 11 80 	cmpl   $0x8011a314,-0xc(%ebp)
8010185f:	72 9a                	jb     801017fb <iget+0x26>
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
      empty = ip;
  }

  // Recycle an inode cache entry.
  if(empty == 0)
80101861:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80101865:	75 0d                	jne    80101874 <iget+0x9f>
    panic("iget: no inodes");
80101867:	83 ec 0c             	sub    $0xc,%esp
8010186a:	68 44 c3 10 80       	push   $0x8010c344
8010186f:	e8 f2 ec ff ff       	call   80100566 <panic>

  ip = empty;
80101874:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101877:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ip->dev = dev;
8010187a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010187d:	8b 55 08             	mov    0x8(%ebp),%edx
80101880:	89 10                	mov    %edx,(%eax)
  ip->inum = inum;
80101882:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101885:	8b 55 0c             	mov    0xc(%ebp),%edx
80101888:	89 50 04             	mov    %edx,0x4(%eax)
  ip->ref = 1;
8010188b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010188e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
  ip->flags = 0;
80101895:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101898:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
  release(&icache.lock);
8010189f:	83 ec 0c             	sub    $0xc,%esp
801018a2:	68 40 93 11 80       	push   $0x80119340
801018a7:	e8 ab 38 00 00       	call   80105157 <release>
801018ac:	83 c4 10             	add    $0x10,%esp

  return ip;
801018af:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801018b2:	c9                   	leave  
801018b3:	c3                   	ret    

801018b4 <idup>:

// Increment reference count for ip.
// Returns ip to enable ip = idup(ip1) idiom.
struct inode*
idup(struct inode *ip)
{
801018b4:	55                   	push   %ebp
801018b5:	89 e5                	mov    %esp,%ebp
801018b7:	83 ec 08             	sub    $0x8,%esp
  acquire(&icache.lock);
801018ba:	83 ec 0c             	sub    $0xc,%esp
801018bd:	68 40 93 11 80       	push   $0x80119340
801018c2:	e8 29 38 00 00       	call   801050f0 <acquire>
801018c7:	83 c4 10             	add    $0x10,%esp
  ip->ref++;
801018ca:	8b 45 08             	mov    0x8(%ebp),%eax
801018cd:	8b 40 08             	mov    0x8(%eax),%eax
801018d0:	8d 50 01             	lea    0x1(%eax),%edx
801018d3:	8b 45 08             	mov    0x8(%ebp),%eax
801018d6:	89 50 08             	mov    %edx,0x8(%eax)
  release(&icache.lock);
801018d9:	83 ec 0c             	sub    $0xc,%esp
801018dc:	68 40 93 11 80       	push   $0x80119340
801018e1:	e8 71 38 00 00       	call   80105157 <release>
801018e6:	83 c4 10             	add    $0x10,%esp
  return ip;
801018e9:	8b 45 08             	mov    0x8(%ebp),%eax
}
801018ec:	c9                   	leave  
801018ed:	c3                   	ret    

801018ee <ilock>:

// Lock the given inode.
// Reads the inode from disk if necessary.
void
ilock(struct inode *ip)
{
801018ee:	55                   	push   %ebp
801018ef:	89 e5                	mov    %esp,%ebp
801018f1:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  struct dinode *dip;

  if(ip == 0 || ip->ref < 1)
801018f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801018f8:	74 0a                	je     80101904 <ilock+0x16>
801018fa:	8b 45 08             	mov    0x8(%ebp),%eax
801018fd:	8b 40 08             	mov    0x8(%eax),%eax
80101900:	85 c0                	test   %eax,%eax
80101902:	7f 0d                	jg     80101911 <ilock+0x23>
    panic("ilock");
80101904:	83 ec 0c             	sub    $0xc,%esp
80101907:	68 54 c3 10 80       	push   $0x8010c354
8010190c:	e8 55 ec ff ff       	call   80100566 <panic>

  acquire(&icache.lock);
80101911:	83 ec 0c             	sub    $0xc,%esp
80101914:	68 40 93 11 80       	push   $0x80119340
80101919:	e8 d2 37 00 00       	call   801050f0 <acquire>
8010191e:	83 c4 10             	add    $0x10,%esp
  while(ip->flags & I_BUSY)
80101921:	eb 13                	jmp    80101936 <ilock+0x48>
    sleep(ip, &icache.lock);
80101923:	83 ec 08             	sub    $0x8,%esp
80101926:	68 40 93 11 80       	push   $0x80119340
8010192b:	ff 75 08             	pushl  0x8(%ebp)
8010192e:	e8 c4 34 00 00       	call   80104df7 <sleep>
80101933:	83 c4 10             	add    $0x10,%esp

  if(ip == 0 || ip->ref < 1)
    panic("ilock");

  acquire(&icache.lock);
  while(ip->flags & I_BUSY)
80101936:	8b 45 08             	mov    0x8(%ebp),%eax
80101939:	8b 40 0c             	mov    0xc(%eax),%eax
8010193c:	83 e0 01             	and    $0x1,%eax
8010193f:	85 c0                	test   %eax,%eax
80101941:	75 e0                	jne    80101923 <ilock+0x35>
    sleep(ip, &icache.lock);
  ip->flags |= I_BUSY;
80101943:	8b 45 08             	mov    0x8(%ebp),%eax
80101946:	8b 40 0c             	mov    0xc(%eax),%eax
80101949:	83 c8 01             	or     $0x1,%eax
8010194c:	89 c2                	mov    %eax,%edx
8010194e:	8b 45 08             	mov    0x8(%ebp),%eax
80101951:	89 50 0c             	mov    %edx,0xc(%eax)
  release(&icache.lock);
80101954:	83 ec 0c             	sub    $0xc,%esp
80101957:	68 40 93 11 80       	push   $0x80119340
8010195c:	e8 f6 37 00 00       	call   80105157 <release>
80101961:	83 c4 10             	add    $0x10,%esp

  if(!(ip->flags & I_VALID)){
80101964:	8b 45 08             	mov    0x8(%ebp),%eax
80101967:	8b 40 0c             	mov    0xc(%eax),%eax
8010196a:	83 e0 02             	and    $0x2,%eax
8010196d:	85 c0                	test   %eax,%eax
8010196f:	0f 85 ce 00 00 00    	jne    80101a43 <ilock+0x155>
    bp = bread(ip->dev, IBLOCK(ip->inum));
80101975:	8b 45 08             	mov    0x8(%ebp),%eax
80101978:	8b 40 04             	mov    0x4(%eax),%eax
8010197b:	c1 e8 03             	shr    $0x3,%eax
8010197e:	8d 50 02             	lea    0x2(%eax),%edx
80101981:	8b 45 08             	mov    0x8(%ebp),%eax
80101984:	8b 00                	mov    (%eax),%eax
80101986:	83 ec 08             	sub    $0x8,%esp
80101989:	52                   	push   %edx
8010198a:	50                   	push   %eax
8010198b:	e8 26 e8 ff ff       	call   801001b6 <bread>
80101990:	83 c4 10             	add    $0x10,%esp
80101993:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dip = (struct dinode*)bp->data + ip->inum%IPB;
80101996:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101999:	8d 50 18             	lea    0x18(%eax),%edx
8010199c:	8b 45 08             	mov    0x8(%ebp),%eax
8010199f:	8b 40 04             	mov    0x4(%eax),%eax
801019a2:	83 e0 07             	and    $0x7,%eax
801019a5:	c1 e0 06             	shl    $0x6,%eax
801019a8:	01 d0                	add    %edx,%eax
801019aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ip->type = dip->type;
801019ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
801019b0:	0f b7 10             	movzwl (%eax),%edx
801019b3:	8b 45 08             	mov    0x8(%ebp),%eax
801019b6:	66 89 50 10          	mov    %dx,0x10(%eax)
    ip->major = dip->major;
801019ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
801019bd:	0f b7 50 02          	movzwl 0x2(%eax),%edx
801019c1:	8b 45 08             	mov    0x8(%ebp),%eax
801019c4:	66 89 50 12          	mov    %dx,0x12(%eax)
    ip->minor = dip->minor;
801019c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801019cb:	0f b7 50 04          	movzwl 0x4(%eax),%edx
801019cf:	8b 45 08             	mov    0x8(%ebp),%eax
801019d2:	66 89 50 14          	mov    %dx,0x14(%eax)
    ip->nlink = dip->nlink;
801019d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801019d9:	0f b7 50 06          	movzwl 0x6(%eax),%edx
801019dd:	8b 45 08             	mov    0x8(%ebp),%eax
801019e0:	66 89 50 16          	mov    %dx,0x16(%eax)
    ip->size = dip->size;
801019e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801019e7:	8b 50 08             	mov    0x8(%eax),%edx
801019ea:	8b 45 08             	mov    0x8(%ebp),%eax
801019ed:	89 50 18             	mov    %edx,0x18(%eax)
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
801019f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
801019f3:	8d 50 0c             	lea    0xc(%eax),%edx
801019f6:	8b 45 08             	mov    0x8(%ebp),%eax
801019f9:	83 c0 1c             	add    $0x1c,%eax
801019fc:	83 ec 04             	sub    $0x4,%esp
801019ff:	6a 34                	push   $0x34
80101a01:	52                   	push   %edx
80101a02:	50                   	push   %eax
80101a03:	e8 0a 3a 00 00       	call   80105412 <memmove>
80101a08:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80101a0b:	83 ec 0c             	sub    $0xc,%esp
80101a0e:	ff 75 f4             	pushl  -0xc(%ebp)
80101a11:	e8 18 e8 ff ff       	call   8010022e <brelse>
80101a16:	83 c4 10             	add    $0x10,%esp
    ip->flags |= I_VALID;
80101a19:	8b 45 08             	mov    0x8(%ebp),%eax
80101a1c:	8b 40 0c             	mov    0xc(%eax),%eax
80101a1f:	83 c8 02             	or     $0x2,%eax
80101a22:	89 c2                	mov    %eax,%edx
80101a24:	8b 45 08             	mov    0x8(%ebp),%eax
80101a27:	89 50 0c             	mov    %edx,0xc(%eax)
    if(ip->type == 0)
80101a2a:	8b 45 08             	mov    0x8(%ebp),%eax
80101a2d:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80101a31:	66 85 c0             	test   %ax,%ax
80101a34:	75 0d                	jne    80101a43 <ilock+0x155>
      panic("ilock: no type");
80101a36:	83 ec 0c             	sub    $0xc,%esp
80101a39:	68 5a c3 10 80       	push   $0x8010c35a
80101a3e:	e8 23 eb ff ff       	call   80100566 <panic>
  }
}
80101a43:	90                   	nop
80101a44:	c9                   	leave  
80101a45:	c3                   	ret    

80101a46 <iunlock>:

// Unlock the given inode.
void
iunlock(struct inode *ip)
{
80101a46:	55                   	push   %ebp
80101a47:	89 e5                	mov    %esp,%ebp
80101a49:	83 ec 08             	sub    $0x8,%esp
  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
80101a4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80101a50:	74 17                	je     80101a69 <iunlock+0x23>
80101a52:	8b 45 08             	mov    0x8(%ebp),%eax
80101a55:	8b 40 0c             	mov    0xc(%eax),%eax
80101a58:	83 e0 01             	and    $0x1,%eax
80101a5b:	85 c0                	test   %eax,%eax
80101a5d:	74 0a                	je     80101a69 <iunlock+0x23>
80101a5f:	8b 45 08             	mov    0x8(%ebp),%eax
80101a62:	8b 40 08             	mov    0x8(%eax),%eax
80101a65:	85 c0                	test   %eax,%eax
80101a67:	7f 0d                	jg     80101a76 <iunlock+0x30>
    panic("iunlock");
80101a69:	83 ec 0c             	sub    $0xc,%esp
80101a6c:	68 69 c3 10 80       	push   $0x8010c369
80101a71:	e8 f0 ea ff ff       	call   80100566 <panic>

  acquire(&icache.lock);
80101a76:	83 ec 0c             	sub    $0xc,%esp
80101a79:	68 40 93 11 80       	push   $0x80119340
80101a7e:	e8 6d 36 00 00       	call   801050f0 <acquire>
80101a83:	83 c4 10             	add    $0x10,%esp
  ip->flags &= ~I_BUSY;
80101a86:	8b 45 08             	mov    0x8(%ebp),%eax
80101a89:	8b 40 0c             	mov    0xc(%eax),%eax
80101a8c:	83 e0 fe             	and    $0xfffffffe,%eax
80101a8f:	89 c2                	mov    %eax,%edx
80101a91:	8b 45 08             	mov    0x8(%ebp),%eax
80101a94:	89 50 0c             	mov    %edx,0xc(%eax)
  wakeup(ip);
80101a97:	83 ec 0c             	sub    $0xc,%esp
80101a9a:	ff 75 08             	pushl  0x8(%ebp)
80101a9d:	e8 40 34 00 00       	call   80104ee2 <wakeup>
80101aa2:	83 c4 10             	add    $0x10,%esp
  release(&icache.lock);
80101aa5:	83 ec 0c             	sub    $0xc,%esp
80101aa8:	68 40 93 11 80       	push   $0x80119340
80101aad:	e8 a5 36 00 00       	call   80105157 <release>
80101ab2:	83 c4 10             	add    $0x10,%esp
}
80101ab5:	90                   	nop
80101ab6:	c9                   	leave  
80101ab7:	c3                   	ret    

80101ab8 <iput>:
// to it, free the inode (and its content) on disk.
// All calls to iput() must be inside a transaction in
// case it has to free the inode.
void
iput(struct inode *ip)
{
80101ab8:	55                   	push   %ebp
80101ab9:	89 e5                	mov    %esp,%ebp
80101abb:	83 ec 08             	sub    $0x8,%esp
  acquire(&icache.lock);
80101abe:	83 ec 0c             	sub    $0xc,%esp
80101ac1:	68 40 93 11 80       	push   $0x80119340
80101ac6:	e8 25 36 00 00       	call   801050f0 <acquire>
80101acb:	83 c4 10             	add    $0x10,%esp
  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
80101ace:	8b 45 08             	mov    0x8(%ebp),%eax
80101ad1:	8b 40 08             	mov    0x8(%eax),%eax
80101ad4:	83 f8 01             	cmp    $0x1,%eax
80101ad7:	0f 85 a9 00 00 00    	jne    80101b86 <iput+0xce>
80101add:	8b 45 08             	mov    0x8(%ebp),%eax
80101ae0:	8b 40 0c             	mov    0xc(%eax),%eax
80101ae3:	83 e0 02             	and    $0x2,%eax
80101ae6:	85 c0                	test   %eax,%eax
80101ae8:	0f 84 98 00 00 00    	je     80101b86 <iput+0xce>
80101aee:	8b 45 08             	mov    0x8(%ebp),%eax
80101af1:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80101af5:	66 85 c0             	test   %ax,%ax
80101af8:	0f 85 88 00 00 00    	jne    80101b86 <iput+0xce>
    // inode has no links and no other references: truncate and free.
    if(ip->flags & I_BUSY)
80101afe:	8b 45 08             	mov    0x8(%ebp),%eax
80101b01:	8b 40 0c             	mov    0xc(%eax),%eax
80101b04:	83 e0 01             	and    $0x1,%eax
80101b07:	85 c0                	test   %eax,%eax
80101b09:	74 0d                	je     80101b18 <iput+0x60>
      panic("iput busy");
80101b0b:	83 ec 0c             	sub    $0xc,%esp
80101b0e:	68 71 c3 10 80       	push   $0x8010c371
80101b13:	e8 4e ea ff ff       	call   80100566 <panic>
    ip->flags |= I_BUSY;
80101b18:	8b 45 08             	mov    0x8(%ebp),%eax
80101b1b:	8b 40 0c             	mov    0xc(%eax),%eax
80101b1e:	83 c8 01             	or     $0x1,%eax
80101b21:	89 c2                	mov    %eax,%edx
80101b23:	8b 45 08             	mov    0x8(%ebp),%eax
80101b26:	89 50 0c             	mov    %edx,0xc(%eax)
    release(&icache.lock);
80101b29:	83 ec 0c             	sub    $0xc,%esp
80101b2c:	68 40 93 11 80       	push   $0x80119340
80101b31:	e8 21 36 00 00       	call   80105157 <release>
80101b36:	83 c4 10             	add    $0x10,%esp
    itrunc(ip);
80101b39:	83 ec 0c             	sub    $0xc,%esp
80101b3c:	ff 75 08             	pushl  0x8(%ebp)
80101b3f:	e8 f7 02 00 00       	call   80101e3b <itrunc>
80101b44:	83 c4 10             	add    $0x10,%esp
    ip->type = 0;
80101b47:	8b 45 08             	mov    0x8(%ebp),%eax
80101b4a:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    iupdate(ip);
80101b50:	83 ec 0c             	sub    $0xc,%esp
80101b53:	ff 75 08             	pushl  0x8(%ebp)
80101b56:	e8 bf fb ff ff       	call   8010171a <iupdate>
80101b5b:	83 c4 10             	add    $0x10,%esp
    acquire(&icache.lock);
80101b5e:	83 ec 0c             	sub    $0xc,%esp
80101b61:	68 40 93 11 80       	push   $0x80119340
80101b66:	e8 85 35 00 00       	call   801050f0 <acquire>
80101b6b:	83 c4 10             	add    $0x10,%esp
    ip->flags = 0;
80101b6e:	8b 45 08             	mov    0x8(%ebp),%eax
80101b71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    wakeup(ip);
80101b78:	83 ec 0c             	sub    $0xc,%esp
80101b7b:	ff 75 08             	pushl  0x8(%ebp)
80101b7e:	e8 5f 33 00 00       	call   80104ee2 <wakeup>
80101b83:	83 c4 10             	add    $0x10,%esp
  }
  ip->ref--;
80101b86:	8b 45 08             	mov    0x8(%ebp),%eax
80101b89:	8b 40 08             	mov    0x8(%eax),%eax
80101b8c:	8d 50 ff             	lea    -0x1(%eax),%edx
80101b8f:	8b 45 08             	mov    0x8(%ebp),%eax
80101b92:	89 50 08             	mov    %edx,0x8(%eax)
  release(&icache.lock);
80101b95:	83 ec 0c             	sub    $0xc,%esp
80101b98:	68 40 93 11 80       	push   $0x80119340
80101b9d:	e8 b5 35 00 00       	call   80105157 <release>
80101ba2:	83 c4 10             	add    $0x10,%esp
}
80101ba5:	90                   	nop
80101ba6:	c9                   	leave  
80101ba7:	c3                   	ret    

80101ba8 <iunlockput>:

// Common idiom: unlock, then put.
void
iunlockput(struct inode *ip)
{
80101ba8:	55                   	push   %ebp
80101ba9:	89 e5                	mov    %esp,%ebp
80101bab:	83 ec 08             	sub    $0x8,%esp
  iunlock(ip);
80101bae:	83 ec 0c             	sub    $0xc,%esp
80101bb1:	ff 75 08             	pushl  0x8(%ebp)
80101bb4:	e8 8d fe ff ff       	call   80101a46 <iunlock>
80101bb9:	83 c4 10             	add    $0x10,%esp
  iput(ip);
80101bbc:	83 ec 0c             	sub    $0xc,%esp
80101bbf:	ff 75 08             	pushl  0x8(%ebp)
80101bc2:	e8 f1 fe ff ff       	call   80101ab8 <iput>
80101bc7:	83 c4 10             	add    $0x10,%esp
}
80101bca:	90                   	nop
80101bcb:	c9                   	leave  
80101bcc:	c3                   	ret    

80101bcd <bmap>:

// Return the disk block address of the nth block in inode ip.
// If there is no such block, bmap allocates one.
static uint
bmap(struct inode *ip, uint bn)
{
80101bcd:	55                   	push   %ebp
80101bce:	89 e5                	mov    %esp,%ebp
80101bd0:	53                   	push   %ebx
80101bd1:	83 ec 14             	sub    $0x14,%esp
  uint addr, *a;
  struct buf *bp;

  if(bn < NDIRECT){
80101bd4:	83 7d 0c 0a          	cmpl   $0xa,0xc(%ebp)
80101bd8:	77 42                	ja     80101c1c <bmap+0x4f>
    if((addr = ip->addrs[bn]) == 0)
80101bda:	8b 45 08             	mov    0x8(%ebp),%eax
80101bdd:	8b 55 0c             	mov    0xc(%ebp),%edx
80101be0:	83 c2 04             	add    $0x4,%edx
80101be3:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
80101be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101bea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101bee:	75 24                	jne    80101c14 <bmap+0x47>
      ip->addrs[bn] = addr = balloc(ip->dev);
80101bf0:	8b 45 08             	mov    0x8(%ebp),%eax
80101bf3:	8b 00                	mov    (%eax),%eax
80101bf5:	83 ec 0c             	sub    $0xc,%esp
80101bf8:	50                   	push   %eax
80101bf9:	e8 e4 f7 ff ff       	call   801013e2 <balloc>
80101bfe:	83 c4 10             	add    $0x10,%esp
80101c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101c04:	8b 45 08             	mov    0x8(%ebp),%eax
80101c07:	8b 55 0c             	mov    0xc(%ebp),%edx
80101c0a:	8d 4a 04             	lea    0x4(%edx),%ecx
80101c0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101c10:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
    return addr;
80101c14:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101c17:	e9 1a 02 00 00       	jmp    80101e36 <bmap+0x269>
  }
  bn -= NDIRECT;
80101c1c:	83 6d 0c 0b          	subl   $0xb,0xc(%ebp)

  if(bn < NINDIRECT){
80101c20:	83 7d 0c 7f          	cmpl   $0x7f,0xc(%ebp)
80101c24:	0f 87 b3 00 00 00    	ja     80101cdd <bmap+0x110>
    // Load indirect block, allocating if necessary.
    if((addr = ip->addrs[NDIRECT]) == 0)
80101c2a:	8b 45 08             	mov    0x8(%ebp),%eax
80101c2d:	8b 40 48             	mov    0x48(%eax),%eax
80101c30:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101c33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101c37:	75 1d                	jne    80101c56 <bmap+0x89>
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
80101c39:	8b 45 08             	mov    0x8(%ebp),%eax
80101c3c:	8b 00                	mov    (%eax),%eax
80101c3e:	83 ec 0c             	sub    $0xc,%esp
80101c41:	50                   	push   %eax
80101c42:	e8 9b f7 ff ff       	call   801013e2 <balloc>
80101c47:	83 c4 10             	add    $0x10,%esp
80101c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101c4d:	8b 45 08             	mov    0x8(%ebp),%eax
80101c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101c53:	89 50 48             	mov    %edx,0x48(%eax)
    bp = bread(ip->dev, addr);
80101c56:	8b 45 08             	mov    0x8(%ebp),%eax
80101c59:	8b 00                	mov    (%eax),%eax
80101c5b:	83 ec 08             	sub    $0x8,%esp
80101c5e:	ff 75 f4             	pushl  -0xc(%ebp)
80101c61:	50                   	push   %eax
80101c62:	e8 4f e5 ff ff       	call   801001b6 <bread>
80101c67:	83 c4 10             	add    $0x10,%esp
80101c6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    a = (uint*)bp->data;
80101c6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101c70:	83 c0 18             	add    $0x18,%eax
80101c73:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((addr = a[bn]) == 0){
80101c76:	8b 45 0c             	mov    0xc(%ebp),%eax
80101c79:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101c80:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101c83:	01 d0                	add    %edx,%eax
80101c85:	8b 00                	mov    (%eax),%eax
80101c87:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101c8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101c8e:	75 37                	jne    80101cc7 <bmap+0xfa>
      a[bn] = addr = balloc(ip->dev);
80101c90:	8b 45 0c             	mov    0xc(%ebp),%eax
80101c93:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101c9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101c9d:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
80101ca0:	8b 45 08             	mov    0x8(%ebp),%eax
80101ca3:	8b 00                	mov    (%eax),%eax
80101ca5:	83 ec 0c             	sub    $0xc,%esp
80101ca8:	50                   	push   %eax
80101ca9:	e8 34 f7 ff ff       	call   801013e2 <balloc>
80101cae:	83 c4 10             	add    $0x10,%esp
80101cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101cb7:	89 03                	mov    %eax,(%ebx)
      log_write(bp);
80101cb9:	83 ec 0c             	sub    $0xc,%esp
80101cbc:	ff 75 f0             	pushl  -0x10(%ebp)
80101cbf:	e8 d3 1b 00 00       	call   80103897 <log_write>
80101cc4:	83 c4 10             	add    $0x10,%esp
    }
    brelse(bp);
80101cc7:	83 ec 0c             	sub    $0xc,%esp
80101cca:	ff 75 f0             	pushl  -0x10(%ebp)
80101ccd:	e8 5c e5 ff ff       	call   8010022e <brelse>
80101cd2:	83 c4 10             	add    $0x10,%esp
    return addr;
80101cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101cd8:	e9 59 01 00 00       	jmp    80101e36 <bmap+0x269>
  }
  bn -= NINDIRECT;
80101cdd:	83 45 0c 80          	addl   $0xffffff80,0xc(%ebp)

  if(bn < NINDIRECT * NINDIRECT){
80101ce1:	81 7d 0c ff 3f 00 00 	cmpl   $0x3fff,0xc(%ebp)
80101ce8:	0f 87 3b 01 00 00    	ja     80101e29 <bmap+0x25c>
    if ((addr = ip->addrs[NDIRECT+1]) == 0)
80101cee:	8b 45 08             	mov    0x8(%ebp),%eax
80101cf1:	8b 40 4c             	mov    0x4c(%eax),%eax
80101cf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101cf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101cfb:	75 1d                	jne    80101d1a <bmap+0x14d>
      ip->addrs[NDIRECT+1] = addr = balloc(ip->dev);
80101cfd:	8b 45 08             	mov    0x8(%ebp),%eax
80101d00:	8b 00                	mov    (%eax),%eax
80101d02:	83 ec 0c             	sub    $0xc,%esp
80101d05:	50                   	push   %eax
80101d06:	e8 d7 f6 ff ff       	call   801013e2 <balloc>
80101d0b:	83 c4 10             	add    $0x10,%esp
80101d0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101d11:	8b 45 08             	mov    0x8(%ebp),%eax
80101d14:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101d17:	89 50 4c             	mov    %edx,0x4c(%eax)
    bp = bread(ip->dev, addr);
80101d1a:	8b 45 08             	mov    0x8(%ebp),%eax
80101d1d:	8b 00                	mov    (%eax),%eax
80101d1f:	83 ec 08             	sub    $0x8,%esp
80101d22:	ff 75 f4             	pushl  -0xc(%ebp)
80101d25:	50                   	push   %eax
80101d26:	e8 8b e4 ff ff       	call   801001b6 <bread>
80101d2b:	83 c4 10             	add    $0x10,%esp
80101d2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    a = (uint*)bp->data;
80101d31:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101d34:	83 c0 18             	add    $0x18,%eax
80101d37:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((addr = a[bn/NINDIRECT]) == 0){
80101d3a:	8b 45 0c             	mov    0xc(%ebp),%eax
80101d3d:	c1 e8 07             	shr    $0x7,%eax
80101d40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101d47:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101d4a:	01 d0                	add    %edx,%eax
80101d4c:	8b 00                	mov    (%eax),%eax
80101d4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101d51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101d55:	75 3a                	jne    80101d91 <bmap+0x1c4>
      a[bn/NINDIRECT] = addr = balloc(ip->dev);
80101d57:	8b 45 0c             	mov    0xc(%ebp),%eax
80101d5a:	c1 e8 07             	shr    $0x7,%eax
80101d5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101d67:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
80101d6a:	8b 45 08             	mov    0x8(%ebp),%eax
80101d6d:	8b 00                	mov    (%eax),%eax
80101d6f:	83 ec 0c             	sub    $0xc,%esp
80101d72:	50                   	push   %eax
80101d73:	e8 6a f6 ff ff       	call   801013e2 <balloc>
80101d78:	83 c4 10             	add    $0x10,%esp
80101d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101d81:	89 03                	mov    %eax,(%ebx)
      log_write(bp);
80101d83:	83 ec 0c             	sub    $0xc,%esp
80101d86:	ff 75 f0             	pushl  -0x10(%ebp)
80101d89:	e8 09 1b 00 00       	call   80103897 <log_write>
80101d8e:	83 c4 10             	add    $0x10,%esp
    }
    brelse(bp);
80101d91:	83 ec 0c             	sub    $0xc,%esp
80101d94:	ff 75 f0             	pushl  -0x10(%ebp)
80101d97:	e8 92 e4 ff ff       	call   8010022e <brelse>
80101d9c:	83 c4 10             	add    $0x10,%esp
    bp = bread(ip->dev, addr);
80101d9f:	8b 45 08             	mov    0x8(%ebp),%eax
80101da2:	8b 00                	mov    (%eax),%eax
80101da4:	83 ec 08             	sub    $0x8,%esp
80101da7:	ff 75 f4             	pushl  -0xc(%ebp)
80101daa:	50                   	push   %eax
80101dab:	e8 06 e4 ff ff       	call   801001b6 <bread>
80101db0:	83 c4 10             	add    $0x10,%esp
80101db3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    a = (uint*)bp->data;
80101db6:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101db9:	83 c0 18             	add    $0x18,%eax
80101dbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((addr = a[bn%NINDIRECT]) == 0){
80101dbf:	8b 45 0c             	mov    0xc(%ebp),%eax
80101dc2:	83 e0 7f             	and    $0x7f,%eax
80101dc5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101dcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101dcf:	01 d0                	add    %edx,%eax
80101dd1:	8b 00                	mov    (%eax),%eax
80101dd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101dd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101dda:	75 3a                	jne    80101e16 <bmap+0x249>
      a[bn%NINDIRECT] = addr = balloc(ip->dev);
80101ddc:	8b 45 0c             	mov    0xc(%ebp),%eax
80101ddf:	83 e0 7f             	and    $0x7f,%eax
80101de2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101de9:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101dec:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
80101def:	8b 45 08             	mov    0x8(%ebp),%eax
80101df2:	8b 00                	mov    (%eax),%eax
80101df4:	83 ec 0c             	sub    $0xc,%esp
80101df7:	50                   	push   %eax
80101df8:	e8 e5 f5 ff ff       	call   801013e2 <balloc>
80101dfd:	83 c4 10             	add    $0x10,%esp
80101e00:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e06:	89 03                	mov    %eax,(%ebx)
      log_write(bp);
80101e08:	83 ec 0c             	sub    $0xc,%esp
80101e0b:	ff 75 f0             	pushl  -0x10(%ebp)
80101e0e:	e8 84 1a 00 00       	call   80103897 <log_write>
80101e13:	83 c4 10             	add    $0x10,%esp
    }
    brelse(bp);
80101e16:	83 ec 0c             	sub    $0xc,%esp
80101e19:	ff 75 f0             	pushl  -0x10(%ebp)
80101e1c:	e8 0d e4 ff ff       	call   8010022e <brelse>
80101e21:	83 c4 10             	add    $0x10,%esp
    return addr;
80101e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e27:	eb 0d                	jmp    80101e36 <bmap+0x269>
  }

  panic("bmap: out of range");
80101e29:	83 ec 0c             	sub    $0xc,%esp
80101e2c:	68 7b c3 10 80       	push   $0x8010c37b
80101e31:	e8 30 e7 ff ff       	call   80100566 <panic>
}
80101e36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101e39:	c9                   	leave  
80101e3a:	c3                   	ret    

80101e3b <itrunc>:
// to it (no directory entries referring to it)
// and has no in-memory reference to it (is
// not an open file or current directory).
static void
itrunc(struct inode *ip)
{
80101e3b:	55                   	push   %ebp
80101e3c:	89 e5                	mov    %esp,%ebp
80101e3e:	83 ec 18             	sub    $0x18,%esp
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
80101e41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80101e48:	eb 45                	jmp    80101e8f <itrunc+0x54>
    if(ip->addrs[i]){
80101e4a:	8b 45 08             	mov    0x8(%ebp),%eax
80101e4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101e50:	83 c2 04             	add    $0x4,%edx
80101e53:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
80101e57:	85 c0                	test   %eax,%eax
80101e59:	74 30                	je     80101e8b <itrunc+0x50>
      bfree(ip->dev, ip->addrs[i]);
80101e5b:	8b 45 08             	mov    0x8(%ebp),%eax
80101e5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101e61:	83 c2 04             	add    $0x4,%edx
80101e64:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
80101e68:	8b 55 08             	mov    0x8(%ebp),%edx
80101e6b:	8b 12                	mov    (%edx),%edx
80101e6d:	83 ec 08             	sub    $0x8,%esp
80101e70:	50                   	push   %eax
80101e71:	52                   	push   %edx
80101e72:	e8 c9 f6 ff ff       	call   80101540 <bfree>
80101e77:	83 c4 10             	add    $0x10,%esp
      ip->addrs[i] = 0;
80101e7a:	8b 45 08             	mov    0x8(%ebp),%eax
80101e7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101e80:	83 c2 04             	add    $0x4,%edx
80101e83:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
80101e8a:	00 
{
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
80101e8b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80101e8f:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
80101e93:	7e b5                	jle    80101e4a <itrunc+0xf>
      bfree(ip->dev, ip->addrs[i]);
      ip->addrs[i] = 0;
    }
  }
  
  if(ip->addrs[NDIRECT]){
80101e95:	8b 45 08             	mov    0x8(%ebp),%eax
80101e98:	8b 40 48             	mov    0x48(%eax),%eax
80101e9b:	85 c0                	test   %eax,%eax
80101e9d:	0f 84 a1 00 00 00    	je     80101f44 <itrunc+0x109>
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
80101ea3:	8b 45 08             	mov    0x8(%ebp),%eax
80101ea6:	8b 50 48             	mov    0x48(%eax),%edx
80101ea9:	8b 45 08             	mov    0x8(%ebp),%eax
80101eac:	8b 00                	mov    (%eax),%eax
80101eae:	83 ec 08             	sub    $0x8,%esp
80101eb1:	52                   	push   %edx
80101eb2:	50                   	push   %eax
80101eb3:	e8 fe e2 ff ff       	call   801001b6 <bread>
80101eb8:	83 c4 10             	add    $0x10,%esp
80101ebb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    a = (uint*)bp->data;
80101ebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101ec1:	83 c0 18             	add    $0x18,%eax
80101ec4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for(j = 0; j < NINDIRECT; j++){
80101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80101ece:	eb 3c                	jmp    80101f0c <itrunc+0xd1>
      if(a[j])
80101ed0:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101ed3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101edd:	01 d0                	add    %edx,%eax
80101edf:	8b 00                	mov    (%eax),%eax
80101ee1:	85 c0                	test   %eax,%eax
80101ee3:	74 23                	je     80101f08 <itrunc+0xcd>
        bfree(ip->dev, a[j]);
80101ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101ee8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101eef:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101ef2:	01 d0                	add    %edx,%eax
80101ef4:	8b 00                	mov    (%eax),%eax
80101ef6:	8b 55 08             	mov    0x8(%ebp),%edx
80101ef9:	8b 12                	mov    (%edx),%edx
80101efb:	83 ec 08             	sub    $0x8,%esp
80101efe:	50                   	push   %eax
80101eff:	52                   	push   %edx
80101f00:	e8 3b f6 ff ff       	call   80101540 <bfree>
80101f05:	83 c4 10             	add    $0x10,%esp
  }
  
  if(ip->addrs[NDIRECT]){
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
    a = (uint*)bp->data;
    for(j = 0; j < NINDIRECT; j++){
80101f08:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80101f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101f0f:	83 f8 7f             	cmp    $0x7f,%eax
80101f12:	76 bc                	jbe    80101ed0 <itrunc+0x95>
      if(a[j])
        bfree(ip->dev, a[j]);
    }
    brelse(bp);
80101f14:	83 ec 0c             	sub    $0xc,%esp
80101f17:	ff 75 ec             	pushl  -0x14(%ebp)
80101f1a:	e8 0f e3 ff ff       	call   8010022e <brelse>
80101f1f:	83 c4 10             	add    $0x10,%esp
    bfree(ip->dev, ip->addrs[NDIRECT]);
80101f22:	8b 45 08             	mov    0x8(%ebp),%eax
80101f25:	8b 40 48             	mov    0x48(%eax),%eax
80101f28:	8b 55 08             	mov    0x8(%ebp),%edx
80101f2b:	8b 12                	mov    (%edx),%edx
80101f2d:	83 ec 08             	sub    $0x8,%esp
80101f30:	50                   	push   %eax
80101f31:	52                   	push   %edx
80101f32:	e8 09 f6 ff ff       	call   80101540 <bfree>
80101f37:	83 c4 10             	add    $0x10,%esp
    ip->addrs[NDIRECT] = 0;
80101f3a:	8b 45 08             	mov    0x8(%ebp),%eax
80101f3d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
  }

  ip->size = 0;
80101f44:	8b 45 08             	mov    0x8(%ebp),%eax
80101f47:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
  iupdate(ip);
80101f4e:	83 ec 0c             	sub    $0xc,%esp
80101f51:	ff 75 08             	pushl  0x8(%ebp)
80101f54:	e8 c1 f7 ff ff       	call   8010171a <iupdate>
80101f59:	83 c4 10             	add    $0x10,%esp
}
80101f5c:	90                   	nop
80101f5d:	c9                   	leave  
80101f5e:	c3                   	ret    

80101f5f <stati>:

// Copy stat information from inode.
void
stati(struct inode *ip, struct stat *st)
{
80101f5f:	55                   	push   %ebp
80101f60:	89 e5                	mov    %esp,%ebp
  st->dev = ip->dev;
80101f62:	8b 45 08             	mov    0x8(%ebp),%eax
80101f65:	8b 00                	mov    (%eax),%eax
80101f67:	89 c2                	mov    %eax,%edx
80101f69:	8b 45 0c             	mov    0xc(%ebp),%eax
80101f6c:	89 50 04             	mov    %edx,0x4(%eax)
  st->ino = ip->inum;
80101f6f:	8b 45 08             	mov    0x8(%ebp),%eax
80101f72:	8b 50 04             	mov    0x4(%eax),%edx
80101f75:	8b 45 0c             	mov    0xc(%ebp),%eax
80101f78:	89 50 08             	mov    %edx,0x8(%eax)
  st->type = ip->type;
80101f7b:	8b 45 08             	mov    0x8(%ebp),%eax
80101f7e:	0f b7 50 10          	movzwl 0x10(%eax),%edx
80101f82:	8b 45 0c             	mov    0xc(%ebp),%eax
80101f85:	66 89 10             	mov    %dx,(%eax)
  st->nlink = ip->nlink;
80101f88:	8b 45 08             	mov    0x8(%ebp),%eax
80101f8b:	0f b7 50 16          	movzwl 0x16(%eax),%edx
80101f8f:	8b 45 0c             	mov    0xc(%ebp),%eax
80101f92:	66 89 50 0c          	mov    %dx,0xc(%eax)
  st->size = ip->size;
80101f96:	8b 45 08             	mov    0x8(%ebp),%eax
80101f99:	8b 50 18             	mov    0x18(%eax),%edx
80101f9c:	8b 45 0c             	mov    0xc(%ebp),%eax
80101f9f:	89 50 10             	mov    %edx,0x10(%eax)
}
80101fa2:	90                   	nop
80101fa3:	5d                   	pop    %ebp
80101fa4:	c3                   	ret    

80101fa5 <readi>:

//PAGEBREAK!
// Read data from inode.
int
readi(struct inode *ip, char *dst, uint off, uint n)
{
80101fa5:	55                   	push   %ebp
80101fa6:	89 e5                	mov    %esp,%ebp
80101fa8:	83 ec 18             	sub    $0x18,%esp
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
80101fab:	8b 45 08             	mov    0x8(%ebp),%eax
80101fae:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80101fb2:	66 83 f8 03          	cmp    $0x3,%ax
80101fb6:	75 5c                	jne    80102014 <readi+0x6f>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
80101fb8:	8b 45 08             	mov    0x8(%ebp),%eax
80101fbb:	0f b7 40 12          	movzwl 0x12(%eax),%eax
80101fbf:	66 85 c0             	test   %ax,%ax
80101fc2:	78 20                	js     80101fe4 <readi+0x3f>
80101fc4:	8b 45 08             	mov    0x8(%ebp),%eax
80101fc7:	0f b7 40 12          	movzwl 0x12(%eax),%eax
80101fcb:	66 83 f8 09          	cmp    $0x9,%ax
80101fcf:	7f 13                	jg     80101fe4 <readi+0x3f>
80101fd1:	8b 45 08             	mov    0x8(%ebp),%eax
80101fd4:	0f b7 40 12          	movzwl 0x12(%eax),%eax
80101fd8:	98                   	cwtl   
80101fd9:	8b 04 c5 e0 92 11 80 	mov    -0x7fee6d20(,%eax,8),%eax
80101fe0:	85 c0                	test   %eax,%eax
80101fe2:	75 0a                	jne    80101fee <readi+0x49>
      return -1;
80101fe4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101fe9:	e9 0c 01 00 00       	jmp    801020fa <readi+0x155>
    return devsw[ip->major].read(ip, dst, n);
80101fee:	8b 45 08             	mov    0x8(%ebp),%eax
80101ff1:	0f b7 40 12          	movzwl 0x12(%eax),%eax
80101ff5:	98                   	cwtl   
80101ff6:	8b 04 c5 e0 92 11 80 	mov    -0x7fee6d20(,%eax,8),%eax
80101ffd:	8b 55 14             	mov    0x14(%ebp),%edx
80102000:	83 ec 04             	sub    $0x4,%esp
80102003:	52                   	push   %edx
80102004:	ff 75 0c             	pushl  0xc(%ebp)
80102007:	ff 75 08             	pushl  0x8(%ebp)
8010200a:	ff d0                	call   *%eax
8010200c:	83 c4 10             	add    $0x10,%esp
8010200f:	e9 e6 00 00 00       	jmp    801020fa <readi+0x155>
  }

  if(off > ip->size || off + n < off)
80102014:	8b 45 08             	mov    0x8(%ebp),%eax
80102017:	8b 40 18             	mov    0x18(%eax),%eax
8010201a:	3b 45 10             	cmp    0x10(%ebp),%eax
8010201d:	72 0d                	jb     8010202c <readi+0x87>
8010201f:	8b 55 10             	mov    0x10(%ebp),%edx
80102022:	8b 45 14             	mov    0x14(%ebp),%eax
80102025:	01 d0                	add    %edx,%eax
80102027:	3b 45 10             	cmp    0x10(%ebp),%eax
8010202a:	73 0a                	jae    80102036 <readi+0x91>
    return -1;
8010202c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102031:	e9 c4 00 00 00       	jmp    801020fa <readi+0x155>
  if(off + n > ip->size)
80102036:	8b 55 10             	mov    0x10(%ebp),%edx
80102039:	8b 45 14             	mov    0x14(%ebp),%eax
8010203c:	01 c2                	add    %eax,%edx
8010203e:	8b 45 08             	mov    0x8(%ebp),%eax
80102041:	8b 40 18             	mov    0x18(%eax),%eax
80102044:	39 c2                	cmp    %eax,%edx
80102046:	76 0c                	jbe    80102054 <readi+0xaf>
    n = ip->size - off;
80102048:	8b 45 08             	mov    0x8(%ebp),%eax
8010204b:	8b 40 18             	mov    0x18(%eax),%eax
8010204e:	2b 45 10             	sub    0x10(%ebp),%eax
80102051:	89 45 14             	mov    %eax,0x14(%ebp)

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
80102054:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010205b:	e9 8b 00 00 00       	jmp    801020eb <readi+0x146>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
80102060:	8b 45 10             	mov    0x10(%ebp),%eax
80102063:	c1 e8 09             	shr    $0x9,%eax
80102066:	83 ec 08             	sub    $0x8,%esp
80102069:	50                   	push   %eax
8010206a:	ff 75 08             	pushl  0x8(%ebp)
8010206d:	e8 5b fb ff ff       	call   80101bcd <bmap>
80102072:	83 c4 10             	add    $0x10,%esp
80102075:	89 c2                	mov    %eax,%edx
80102077:	8b 45 08             	mov    0x8(%ebp),%eax
8010207a:	8b 00                	mov    (%eax),%eax
8010207c:	83 ec 08             	sub    $0x8,%esp
8010207f:	52                   	push   %edx
80102080:	50                   	push   %eax
80102081:	e8 30 e1 ff ff       	call   801001b6 <bread>
80102086:	83 c4 10             	add    $0x10,%esp
80102089:	89 45 f0             	mov    %eax,-0x10(%ebp)
    m = min(n - tot, BSIZE - off%BSIZE);
8010208c:	8b 45 10             	mov    0x10(%ebp),%eax
8010208f:	25 ff 01 00 00       	and    $0x1ff,%eax
80102094:	ba 00 02 00 00       	mov    $0x200,%edx
80102099:	29 c2                	sub    %eax,%edx
8010209b:	8b 45 14             	mov    0x14(%ebp),%eax
8010209e:	2b 45 f4             	sub    -0xc(%ebp),%eax
801020a1:	39 c2                	cmp    %eax,%edx
801020a3:	0f 46 c2             	cmovbe %edx,%eax
801020a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(dst, bp->data + off%BSIZE, m);
801020a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801020ac:	8d 50 18             	lea    0x18(%eax),%edx
801020af:	8b 45 10             	mov    0x10(%ebp),%eax
801020b2:	25 ff 01 00 00       	and    $0x1ff,%eax
801020b7:	01 d0                	add    %edx,%eax
801020b9:	83 ec 04             	sub    $0x4,%esp
801020bc:	ff 75 ec             	pushl  -0x14(%ebp)
801020bf:	50                   	push   %eax
801020c0:	ff 75 0c             	pushl  0xc(%ebp)
801020c3:	e8 4a 33 00 00       	call   80105412 <memmove>
801020c8:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
801020cb:	83 ec 0c             	sub    $0xc,%esp
801020ce:	ff 75 f0             	pushl  -0x10(%ebp)
801020d1:	e8 58 e1 ff ff       	call   8010022e <brelse>
801020d6:	83 c4 10             	add    $0x10,%esp
  if(off > ip->size || off + n < off)
    return -1;
  if(off + n > ip->size)
    n = ip->size - off;

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
801020d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
801020dc:	01 45 f4             	add    %eax,-0xc(%ebp)
801020df:	8b 45 ec             	mov    -0x14(%ebp),%eax
801020e2:	01 45 10             	add    %eax,0x10(%ebp)
801020e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
801020e8:	01 45 0c             	add    %eax,0xc(%ebp)
801020eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801020ee:	3b 45 14             	cmp    0x14(%ebp),%eax
801020f1:	0f 82 69 ff ff ff    	jb     80102060 <readi+0xbb>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
    m = min(n - tot, BSIZE - off%BSIZE);
    memmove(dst, bp->data + off%BSIZE, m);
    brelse(bp);
  }
  return n;
801020f7:	8b 45 14             	mov    0x14(%ebp),%eax
}
801020fa:	c9                   	leave  
801020fb:	c3                   	ret    

801020fc <writei>:

// PAGEBREAK!
// Write data to inode.
int
writei(struct inode *ip, char *src, uint off, uint n)
{
801020fc:	55                   	push   %ebp
801020fd:	89 e5                	mov    %esp,%ebp
801020ff:	83 ec 18             	sub    $0x18,%esp
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
80102102:	8b 45 08             	mov    0x8(%ebp),%eax
80102105:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80102109:	66 83 f8 03          	cmp    $0x3,%ax
8010210d:	75 5c                	jne    8010216b <writei+0x6f>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
8010210f:	8b 45 08             	mov    0x8(%ebp),%eax
80102112:	0f b7 40 12          	movzwl 0x12(%eax),%eax
80102116:	66 85 c0             	test   %ax,%ax
80102119:	78 20                	js     8010213b <writei+0x3f>
8010211b:	8b 45 08             	mov    0x8(%ebp),%eax
8010211e:	0f b7 40 12          	movzwl 0x12(%eax),%eax
80102122:	66 83 f8 09          	cmp    $0x9,%ax
80102126:	7f 13                	jg     8010213b <writei+0x3f>
80102128:	8b 45 08             	mov    0x8(%ebp),%eax
8010212b:	0f b7 40 12          	movzwl 0x12(%eax),%eax
8010212f:	98                   	cwtl   
80102130:	8b 04 c5 e4 92 11 80 	mov    -0x7fee6d1c(,%eax,8),%eax
80102137:	85 c0                	test   %eax,%eax
80102139:	75 0a                	jne    80102145 <writei+0x49>
      return -1;
8010213b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102140:	e9 3d 01 00 00       	jmp    80102282 <writei+0x186>
    return devsw[ip->major].write(ip, src, n);
80102145:	8b 45 08             	mov    0x8(%ebp),%eax
80102148:	0f b7 40 12          	movzwl 0x12(%eax),%eax
8010214c:	98                   	cwtl   
8010214d:	8b 04 c5 e4 92 11 80 	mov    -0x7fee6d1c(,%eax,8),%eax
80102154:	8b 55 14             	mov    0x14(%ebp),%edx
80102157:	83 ec 04             	sub    $0x4,%esp
8010215a:	52                   	push   %edx
8010215b:	ff 75 0c             	pushl  0xc(%ebp)
8010215e:	ff 75 08             	pushl  0x8(%ebp)
80102161:	ff d0                	call   *%eax
80102163:	83 c4 10             	add    $0x10,%esp
80102166:	e9 17 01 00 00       	jmp    80102282 <writei+0x186>
  }

  if(off > ip->size || off + n < off)
8010216b:	8b 45 08             	mov    0x8(%ebp),%eax
8010216e:	8b 40 18             	mov    0x18(%eax),%eax
80102171:	3b 45 10             	cmp    0x10(%ebp),%eax
80102174:	72 0d                	jb     80102183 <writei+0x87>
80102176:	8b 55 10             	mov    0x10(%ebp),%edx
80102179:	8b 45 14             	mov    0x14(%ebp),%eax
8010217c:	01 d0                	add    %edx,%eax
8010217e:	3b 45 10             	cmp    0x10(%ebp),%eax
80102181:	73 0a                	jae    8010218d <writei+0x91>
    return -1;
80102183:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102188:	e9 f5 00 00 00       	jmp    80102282 <writei+0x186>
  if(off + n > MAXFILE*BSIZE)
8010218d:	8b 55 10             	mov    0x10(%ebp),%edx
80102190:	8b 45 14             	mov    0x14(%ebp),%eax
80102193:	01 d0                	add    %edx,%eax
80102195:	3d 00 16 81 00       	cmp    $0x811600,%eax
8010219a:	76 0a                	jbe    801021a6 <writei+0xaa>
    return -1;
8010219c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801021a1:	e9 dc 00 00 00       	jmp    80102282 <writei+0x186>

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
801021a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801021ad:	e9 99 00 00 00       	jmp    8010224b <writei+0x14f>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
801021b2:	8b 45 10             	mov    0x10(%ebp),%eax
801021b5:	c1 e8 09             	shr    $0x9,%eax
801021b8:	83 ec 08             	sub    $0x8,%esp
801021bb:	50                   	push   %eax
801021bc:	ff 75 08             	pushl  0x8(%ebp)
801021bf:	e8 09 fa ff ff       	call   80101bcd <bmap>
801021c4:	83 c4 10             	add    $0x10,%esp
801021c7:	89 c2                	mov    %eax,%edx
801021c9:	8b 45 08             	mov    0x8(%ebp),%eax
801021cc:	8b 00                	mov    (%eax),%eax
801021ce:	83 ec 08             	sub    $0x8,%esp
801021d1:	52                   	push   %edx
801021d2:	50                   	push   %eax
801021d3:	e8 de df ff ff       	call   801001b6 <bread>
801021d8:	83 c4 10             	add    $0x10,%esp
801021db:	89 45 f0             	mov    %eax,-0x10(%ebp)
    m = min(n - tot, BSIZE - off%BSIZE);
801021de:	8b 45 10             	mov    0x10(%ebp),%eax
801021e1:	25 ff 01 00 00       	and    $0x1ff,%eax
801021e6:	ba 00 02 00 00       	mov    $0x200,%edx
801021eb:	29 c2                	sub    %eax,%edx
801021ed:	8b 45 14             	mov    0x14(%ebp),%eax
801021f0:	2b 45 f4             	sub    -0xc(%ebp),%eax
801021f3:	39 c2                	cmp    %eax,%edx
801021f5:	0f 46 c2             	cmovbe %edx,%eax
801021f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(bp->data + off%BSIZE, src, m);
801021fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
801021fe:	8d 50 18             	lea    0x18(%eax),%edx
80102201:	8b 45 10             	mov    0x10(%ebp),%eax
80102204:	25 ff 01 00 00       	and    $0x1ff,%eax
80102209:	01 d0                	add    %edx,%eax
8010220b:	83 ec 04             	sub    $0x4,%esp
8010220e:	ff 75 ec             	pushl  -0x14(%ebp)
80102211:	ff 75 0c             	pushl  0xc(%ebp)
80102214:	50                   	push   %eax
80102215:	e8 f8 31 00 00       	call   80105412 <memmove>
8010221a:	83 c4 10             	add    $0x10,%esp
    log_write(bp);
8010221d:	83 ec 0c             	sub    $0xc,%esp
80102220:	ff 75 f0             	pushl  -0x10(%ebp)
80102223:	e8 6f 16 00 00       	call   80103897 <log_write>
80102228:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
8010222b:	83 ec 0c             	sub    $0xc,%esp
8010222e:	ff 75 f0             	pushl  -0x10(%ebp)
80102231:	e8 f8 df ff ff       	call   8010022e <brelse>
80102236:	83 c4 10             	add    $0x10,%esp
  if(off > ip->size || off + n < off)
    return -1;
  if(off + n > MAXFILE*BSIZE)
    return -1;

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80102239:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010223c:	01 45 f4             	add    %eax,-0xc(%ebp)
8010223f:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102242:	01 45 10             	add    %eax,0x10(%ebp)
80102245:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102248:	01 45 0c             	add    %eax,0xc(%ebp)
8010224b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010224e:	3b 45 14             	cmp    0x14(%ebp),%eax
80102251:	0f 82 5b ff ff ff    	jb     801021b2 <writei+0xb6>
    memmove(bp->data + off%BSIZE, src, m);
    log_write(bp);
    brelse(bp);
  }

  if(n > 0 && off > ip->size){
80102257:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
8010225b:	74 22                	je     8010227f <writei+0x183>
8010225d:	8b 45 08             	mov    0x8(%ebp),%eax
80102260:	8b 40 18             	mov    0x18(%eax),%eax
80102263:	3b 45 10             	cmp    0x10(%ebp),%eax
80102266:	73 17                	jae    8010227f <writei+0x183>
    ip->size = off;
80102268:	8b 45 08             	mov    0x8(%ebp),%eax
8010226b:	8b 55 10             	mov    0x10(%ebp),%edx
8010226e:	89 50 18             	mov    %edx,0x18(%eax)
    iupdate(ip);
80102271:	83 ec 0c             	sub    $0xc,%esp
80102274:	ff 75 08             	pushl  0x8(%ebp)
80102277:	e8 9e f4 ff ff       	call   8010171a <iupdate>
8010227c:	83 c4 10             	add    $0x10,%esp
  }
  return n;
8010227f:	8b 45 14             	mov    0x14(%ebp),%eax
}
80102282:	c9                   	leave  
80102283:	c3                   	ret    

80102284 <namecmp>:
//PAGEBREAK!
// Directories

int
namecmp(const char *s, const char *t)
{
80102284:	55                   	push   %ebp
80102285:	89 e5                	mov    %esp,%ebp
80102287:	83 ec 08             	sub    $0x8,%esp
  return strncmp(s, t, DIRSIZ);
8010228a:	83 ec 04             	sub    $0x4,%esp
8010228d:	6a 1e                	push   $0x1e
8010228f:	ff 75 0c             	pushl  0xc(%ebp)
80102292:	ff 75 08             	pushl  0x8(%ebp)
80102295:	e8 0e 32 00 00       	call   801054a8 <strncmp>
8010229a:	83 c4 10             	add    $0x10,%esp
}
8010229d:	c9                   	leave  
8010229e:	c3                   	ret    

8010229f <dirlookup>:

// Look for a directory entry in a directory.
// If found, set *poff to byte offset of entry.
struct inode*
dirlookup(struct inode *dp, char *name, uint *poff)
{
8010229f:	55                   	push   %ebp
801022a0:	89 e5                	mov    %esp,%ebp
801022a2:	83 ec 38             	sub    $0x38,%esp
  uint off, inum;
  struct dirent de;

  if(dp->type != T_DIR)
801022a5:	8b 45 08             	mov    0x8(%ebp),%eax
801022a8:	0f b7 40 10          	movzwl 0x10(%eax),%eax
801022ac:	66 83 f8 01          	cmp    $0x1,%ax
801022b0:	74 0d                	je     801022bf <dirlookup+0x20>
    panic("dirlookup not DIR");
801022b2:	83 ec 0c             	sub    $0xc,%esp
801022b5:	68 8e c3 10 80       	push   $0x8010c38e
801022ba:	e8 a7 e2 ff ff       	call   80100566 <panic>

  for(off = 0; off < dp->size; off += sizeof(de)){
801022bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801022c6:	eb 7b                	jmp    80102343 <dirlookup+0xa4>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
801022c8:	6a 20                	push   $0x20
801022ca:	ff 75 f4             	pushl  -0xc(%ebp)
801022cd:	8d 45 d0             	lea    -0x30(%ebp),%eax
801022d0:	50                   	push   %eax
801022d1:	ff 75 08             	pushl  0x8(%ebp)
801022d4:	e8 cc fc ff ff       	call   80101fa5 <readi>
801022d9:	83 c4 10             	add    $0x10,%esp
801022dc:	83 f8 20             	cmp    $0x20,%eax
801022df:	74 0d                	je     801022ee <dirlookup+0x4f>
      panic("dirlink read");
801022e1:	83 ec 0c             	sub    $0xc,%esp
801022e4:	68 a0 c3 10 80       	push   $0x8010c3a0
801022e9:	e8 78 e2 ff ff       	call   80100566 <panic>
    if(de.inum == 0)
801022ee:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
801022f2:	66 85 c0             	test   %ax,%ax
801022f5:	74 47                	je     8010233e <dirlookup+0x9f>
      continue;
    if(namecmp(name, de.name) == 0){
801022f7:	83 ec 08             	sub    $0x8,%esp
801022fa:	8d 45 d0             	lea    -0x30(%ebp),%eax
801022fd:	83 c0 02             	add    $0x2,%eax
80102300:	50                   	push   %eax
80102301:	ff 75 0c             	pushl  0xc(%ebp)
80102304:	e8 7b ff ff ff       	call   80102284 <namecmp>
80102309:	83 c4 10             	add    $0x10,%esp
8010230c:	85 c0                	test   %eax,%eax
8010230e:	75 2f                	jne    8010233f <dirlookup+0xa0>
      // entry matches path element
      if(poff)
80102310:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80102314:	74 08                	je     8010231e <dirlookup+0x7f>
        *poff = off;
80102316:	8b 45 10             	mov    0x10(%ebp),%eax
80102319:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010231c:	89 10                	mov    %edx,(%eax)
      inum = de.inum;
8010231e:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
80102322:	0f b7 c0             	movzwl %ax,%eax
80102325:	89 45 f0             	mov    %eax,-0x10(%ebp)
      return iget(dp->dev, inum);
80102328:	8b 45 08             	mov    0x8(%ebp),%eax
8010232b:	8b 00                	mov    (%eax),%eax
8010232d:	83 ec 08             	sub    $0x8,%esp
80102330:	ff 75 f0             	pushl  -0x10(%ebp)
80102333:	50                   	push   %eax
80102334:	e8 9c f4 ff ff       	call   801017d5 <iget>
80102339:	83 c4 10             	add    $0x10,%esp
8010233c:	eb 19                	jmp    80102357 <dirlookup+0xb8>

  for(off = 0; off < dp->size; off += sizeof(de)){
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
      panic("dirlink read");
    if(de.inum == 0)
      continue;
8010233e:	90                   	nop
  struct dirent de;

  if(dp->type != T_DIR)
    panic("dirlookup not DIR");

  for(off = 0; off < dp->size; off += sizeof(de)){
8010233f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
80102343:	8b 45 08             	mov    0x8(%ebp),%eax
80102346:	8b 40 18             	mov    0x18(%eax),%eax
80102349:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010234c:	0f 87 76 ff ff ff    	ja     801022c8 <dirlookup+0x29>
      inum = de.inum;
      return iget(dp->dev, inum);
    }
  }

  return 0;
80102352:	b8 00 00 00 00       	mov    $0x0,%eax
}
80102357:	c9                   	leave  
80102358:	c3                   	ret    

80102359 <dirlink>:

// Write a new directory entry (name, inum) into the directory dp.
int
dirlink(struct inode *dp, char *name, uint inum)
{
80102359:	55                   	push   %ebp
8010235a:	89 e5                	mov    %esp,%ebp
8010235c:	83 ec 38             	sub    $0x38,%esp
  int off;
  struct dirent de;
  struct inode *ip;

  // Check that name is not present.
  if((ip = dirlookup(dp, name, 0)) != 0){
8010235f:	83 ec 04             	sub    $0x4,%esp
80102362:	6a 00                	push   $0x0
80102364:	ff 75 0c             	pushl  0xc(%ebp)
80102367:	ff 75 08             	pushl  0x8(%ebp)
8010236a:	e8 30 ff ff ff       	call   8010229f <dirlookup>
8010236f:	83 c4 10             	add    $0x10,%esp
80102372:	89 45 f0             	mov    %eax,-0x10(%ebp)
80102375:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80102379:	74 18                	je     80102393 <dirlink+0x3a>
    iput(ip);
8010237b:	83 ec 0c             	sub    $0xc,%esp
8010237e:	ff 75 f0             	pushl  -0x10(%ebp)
80102381:	e8 32 f7 ff ff       	call   80101ab8 <iput>
80102386:	83 c4 10             	add    $0x10,%esp
    return -1;
80102389:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010238e:	e9 9c 00 00 00       	jmp    8010242f <dirlink+0xd6>
  }

  // Look for an empty dirent.
  for(off = 0; off < dp->size; off += sizeof(de)){
80102393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010239a:	eb 39                	jmp    801023d5 <dirlink+0x7c>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
8010239c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010239f:	6a 20                	push   $0x20
801023a1:	50                   	push   %eax
801023a2:	8d 45 d0             	lea    -0x30(%ebp),%eax
801023a5:	50                   	push   %eax
801023a6:	ff 75 08             	pushl  0x8(%ebp)
801023a9:	e8 f7 fb ff ff       	call   80101fa5 <readi>
801023ae:	83 c4 10             	add    $0x10,%esp
801023b1:	83 f8 20             	cmp    $0x20,%eax
801023b4:	74 0d                	je     801023c3 <dirlink+0x6a>
      panic("dirlink read");
801023b6:	83 ec 0c             	sub    $0xc,%esp
801023b9:	68 a0 c3 10 80       	push   $0x8010c3a0
801023be:	e8 a3 e1 ff ff       	call   80100566 <panic>
    if(de.inum == 0)
801023c3:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
801023c7:	66 85 c0             	test   %ax,%ax
801023ca:	74 18                	je     801023e4 <dirlink+0x8b>
    iput(ip);
    return -1;
  }

  // Look for an empty dirent.
  for(off = 0; off < dp->size; off += sizeof(de)){
801023cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801023cf:	83 c0 20             	add    $0x20,%eax
801023d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
801023d5:	8b 45 08             	mov    0x8(%ebp),%eax
801023d8:	8b 50 18             	mov    0x18(%eax),%edx
801023db:	8b 45 f4             	mov    -0xc(%ebp),%eax
801023de:	39 c2                	cmp    %eax,%edx
801023e0:	77 ba                	ja     8010239c <dirlink+0x43>
801023e2:	eb 01                	jmp    801023e5 <dirlink+0x8c>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
      panic("dirlink read");
    if(de.inum == 0)
      break;
801023e4:	90                   	nop
  }

  strncpy(de.name, name, DIRSIZ);
801023e5:	83 ec 04             	sub    $0x4,%esp
801023e8:	6a 1e                	push   $0x1e
801023ea:	ff 75 0c             	pushl  0xc(%ebp)
801023ed:	8d 45 d0             	lea    -0x30(%ebp),%eax
801023f0:	83 c0 02             	add    $0x2,%eax
801023f3:	50                   	push   %eax
801023f4:	e8 05 31 00 00       	call   801054fe <strncpy>
801023f9:	83 c4 10             	add    $0x10,%esp
  de.inum = inum;
801023fc:	8b 45 10             	mov    0x10(%ebp),%eax
801023ff:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80102403:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102406:	6a 20                	push   $0x20
80102408:	50                   	push   %eax
80102409:	8d 45 d0             	lea    -0x30(%ebp),%eax
8010240c:	50                   	push   %eax
8010240d:	ff 75 08             	pushl  0x8(%ebp)
80102410:	e8 e7 fc ff ff       	call   801020fc <writei>
80102415:	83 c4 10             	add    $0x10,%esp
80102418:	83 f8 20             	cmp    $0x20,%eax
8010241b:	74 0d                	je     8010242a <dirlink+0xd1>
    panic("dirlink");
8010241d:	83 ec 0c             	sub    $0xc,%esp
80102420:	68 ad c3 10 80       	push   $0x8010c3ad
80102425:	e8 3c e1 ff ff       	call   80100566 <panic>
  
  return 0;
8010242a:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010242f:	c9                   	leave  
80102430:	c3                   	ret    

80102431 <skipelem>:
//   skipelem("a", name) = "", setting name = "a"
//   skipelem("", name) = skipelem("////", name) = 0
//
static char*
skipelem(char *path, char *name)
{
80102431:	55                   	push   %ebp
80102432:	89 e5                	mov    %esp,%ebp
80102434:	83 ec 18             	sub    $0x18,%esp
  char *s;
  int len;

  while(*path == '/')
80102437:	eb 04                	jmp    8010243d <skipelem+0xc>
    path++;
80102439:	83 45 08 01          	addl   $0x1,0x8(%ebp)
skipelem(char *path, char *name)
{
  char *s;
  int len;

  while(*path == '/')
8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
80102440:	0f b6 00             	movzbl (%eax),%eax
80102443:	3c 2f                	cmp    $0x2f,%al
80102445:	74 f2                	je     80102439 <skipelem+0x8>
    path++;
  if(*path == 0)
80102447:	8b 45 08             	mov    0x8(%ebp),%eax
8010244a:	0f b6 00             	movzbl (%eax),%eax
8010244d:	84 c0                	test   %al,%al
8010244f:	75 07                	jne    80102458 <skipelem+0x27>
    return 0;
80102451:	b8 00 00 00 00       	mov    $0x0,%eax
80102456:	eb 7b                	jmp    801024d3 <skipelem+0xa2>
  s = path;
80102458:	8b 45 08             	mov    0x8(%ebp),%eax
8010245b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while(*path != '/' && *path != 0)
8010245e:	eb 04                	jmp    80102464 <skipelem+0x33>
    path++;
80102460:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  while(*path == '/')
    path++;
  if(*path == 0)
    return 0;
  s = path;
  while(*path != '/' && *path != 0)
80102464:	8b 45 08             	mov    0x8(%ebp),%eax
80102467:	0f b6 00             	movzbl (%eax),%eax
8010246a:	3c 2f                	cmp    $0x2f,%al
8010246c:	74 0a                	je     80102478 <skipelem+0x47>
8010246e:	8b 45 08             	mov    0x8(%ebp),%eax
80102471:	0f b6 00             	movzbl (%eax),%eax
80102474:	84 c0                	test   %al,%al
80102476:	75 e8                	jne    80102460 <skipelem+0x2f>
    path++;
  len = path - s;
80102478:	8b 55 08             	mov    0x8(%ebp),%edx
8010247b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010247e:	29 c2                	sub    %eax,%edx
80102480:	89 d0                	mov    %edx,%eax
80102482:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(len >= DIRSIZ)
80102485:	83 7d f0 1d          	cmpl   $0x1d,-0x10(%ebp)
80102489:	7e 15                	jle    801024a0 <skipelem+0x6f>
    memmove(name, s, DIRSIZ);
8010248b:	83 ec 04             	sub    $0x4,%esp
8010248e:	6a 1e                	push   $0x1e
80102490:	ff 75 f4             	pushl  -0xc(%ebp)
80102493:	ff 75 0c             	pushl  0xc(%ebp)
80102496:	e8 77 2f 00 00       	call   80105412 <memmove>
8010249b:	83 c4 10             	add    $0x10,%esp
8010249e:	eb 26                	jmp    801024c6 <skipelem+0x95>
  else {
    memmove(name, s, len);
801024a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024a3:	83 ec 04             	sub    $0x4,%esp
801024a6:	50                   	push   %eax
801024a7:	ff 75 f4             	pushl  -0xc(%ebp)
801024aa:	ff 75 0c             	pushl  0xc(%ebp)
801024ad:	e8 60 2f 00 00       	call   80105412 <memmove>
801024b2:	83 c4 10             	add    $0x10,%esp
    name[len] = 0;
801024b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
801024b8:	8b 45 0c             	mov    0xc(%ebp),%eax
801024bb:	01 d0                	add    %edx,%eax
801024bd:	c6 00 00             	movb   $0x0,(%eax)
  }
  while(*path == '/')
801024c0:	eb 04                	jmp    801024c6 <skipelem+0x95>
    path++;
801024c2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    memmove(name, s, DIRSIZ);
  else {
    memmove(name, s, len);
    name[len] = 0;
  }
  while(*path == '/')
801024c6:	8b 45 08             	mov    0x8(%ebp),%eax
801024c9:	0f b6 00             	movzbl (%eax),%eax
801024cc:	3c 2f                	cmp    $0x2f,%al
801024ce:	74 f2                	je     801024c2 <skipelem+0x91>
    path++;
  return path;
801024d0:	8b 45 08             	mov    0x8(%ebp),%eax
}
801024d3:	c9                   	leave  
801024d4:	c3                   	ret    

801024d5 <namex>:
// If parent != 0, return the inode for the parent and copy the final
// path element into name, which must have room for DIRSIZ bytes.
// Must be called inside a transaction since it calls iput().
static struct inode*
namex(char *path, int nameiparent, char *name)
{
801024d5:	55                   	push   %ebp
801024d6:	89 e5                	mov    %esp,%ebp
801024d8:	83 ec 18             	sub    $0x18,%esp
  struct inode *ip, *next;

  if(*path == '/')
801024db:	8b 45 08             	mov    0x8(%ebp),%eax
801024de:	0f b6 00             	movzbl (%eax),%eax
801024e1:	3c 2f                	cmp    $0x2f,%al
801024e3:	75 17                	jne    801024fc <namex+0x27>
    ip = iget(ROOTDEV, ROOTINO);
801024e5:	83 ec 08             	sub    $0x8,%esp
801024e8:	6a 01                	push   $0x1
801024ea:	6a 01                	push   $0x1
801024ec:	e8 e4 f2 ff ff       	call   801017d5 <iget>
801024f1:	83 c4 10             	add    $0x10,%esp
801024f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
801024f7:	e9 bb 00 00 00       	jmp    801025b7 <namex+0xe2>
  else
    ip = idup(proc->cwd);
801024fc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80102502:	8b 40 68             	mov    0x68(%eax),%eax
80102505:	83 ec 0c             	sub    $0xc,%esp
80102508:	50                   	push   %eax
80102509:	e8 a6 f3 ff ff       	call   801018b4 <idup>
8010250e:	83 c4 10             	add    $0x10,%esp
80102511:	89 45 f4             	mov    %eax,-0xc(%ebp)

  while((path = skipelem(path, name)) != 0){
80102514:	e9 9e 00 00 00       	jmp    801025b7 <namex+0xe2>
    ilock(ip);
80102519:	83 ec 0c             	sub    $0xc,%esp
8010251c:	ff 75 f4             	pushl  -0xc(%ebp)
8010251f:	e8 ca f3 ff ff       	call   801018ee <ilock>
80102524:	83 c4 10             	add    $0x10,%esp
    if(ip->type != T_DIR){
80102527:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010252a:	0f b7 40 10          	movzwl 0x10(%eax),%eax
8010252e:	66 83 f8 01          	cmp    $0x1,%ax
80102532:	74 18                	je     8010254c <namex+0x77>
      iunlockput(ip);
80102534:	83 ec 0c             	sub    $0xc,%esp
80102537:	ff 75 f4             	pushl  -0xc(%ebp)
8010253a:	e8 69 f6 ff ff       	call   80101ba8 <iunlockput>
8010253f:	83 c4 10             	add    $0x10,%esp
      return 0;
80102542:	b8 00 00 00 00       	mov    $0x0,%eax
80102547:	e9 a7 00 00 00       	jmp    801025f3 <namex+0x11e>
    }
    if(nameiparent && *path == '\0'){
8010254c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80102550:	74 20                	je     80102572 <namex+0x9d>
80102552:	8b 45 08             	mov    0x8(%ebp),%eax
80102555:	0f b6 00             	movzbl (%eax),%eax
80102558:	84 c0                	test   %al,%al
8010255a:	75 16                	jne    80102572 <namex+0x9d>
      // Stop one level early.
      iunlock(ip);
8010255c:	83 ec 0c             	sub    $0xc,%esp
8010255f:	ff 75 f4             	pushl  -0xc(%ebp)
80102562:	e8 df f4 ff ff       	call   80101a46 <iunlock>
80102567:	83 c4 10             	add    $0x10,%esp
      return ip;
8010256a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010256d:	e9 81 00 00 00       	jmp    801025f3 <namex+0x11e>
    }
    if((next = dirlookup(ip, name, 0)) == 0){
80102572:	83 ec 04             	sub    $0x4,%esp
80102575:	6a 00                	push   $0x0
80102577:	ff 75 10             	pushl  0x10(%ebp)
8010257a:	ff 75 f4             	pushl  -0xc(%ebp)
8010257d:	e8 1d fd ff ff       	call   8010229f <dirlookup>
80102582:	83 c4 10             	add    $0x10,%esp
80102585:	89 45 f0             	mov    %eax,-0x10(%ebp)
80102588:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010258c:	75 15                	jne    801025a3 <namex+0xce>
      iunlockput(ip);
8010258e:	83 ec 0c             	sub    $0xc,%esp
80102591:	ff 75 f4             	pushl  -0xc(%ebp)
80102594:	e8 0f f6 ff ff       	call   80101ba8 <iunlockput>
80102599:	83 c4 10             	add    $0x10,%esp
      return 0;
8010259c:	b8 00 00 00 00       	mov    $0x0,%eax
801025a1:	eb 50                	jmp    801025f3 <namex+0x11e>
    }
    iunlockput(ip);
801025a3:	83 ec 0c             	sub    $0xc,%esp
801025a6:	ff 75 f4             	pushl  -0xc(%ebp)
801025a9:	e8 fa f5 ff ff       	call   80101ba8 <iunlockput>
801025ae:	83 c4 10             	add    $0x10,%esp
    ip = next;
801025b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801025b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(*path == '/')
    ip = iget(ROOTDEV, ROOTINO);
  else
    ip = idup(proc->cwd);

  while((path = skipelem(path, name)) != 0){
801025b7:	83 ec 08             	sub    $0x8,%esp
801025ba:	ff 75 10             	pushl  0x10(%ebp)
801025bd:	ff 75 08             	pushl  0x8(%ebp)
801025c0:	e8 6c fe ff ff       	call   80102431 <skipelem>
801025c5:	83 c4 10             	add    $0x10,%esp
801025c8:	89 45 08             	mov    %eax,0x8(%ebp)
801025cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801025cf:	0f 85 44 ff ff ff    	jne    80102519 <namex+0x44>
      return 0;
    }
    iunlockput(ip);
    ip = next;
  }
  if(nameiparent){
801025d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
801025d9:	74 15                	je     801025f0 <namex+0x11b>
    iput(ip);
801025db:	83 ec 0c             	sub    $0xc,%esp
801025de:	ff 75 f4             	pushl  -0xc(%ebp)
801025e1:	e8 d2 f4 ff ff       	call   80101ab8 <iput>
801025e6:	83 c4 10             	add    $0x10,%esp
    return 0;
801025e9:	b8 00 00 00 00       	mov    $0x0,%eax
801025ee:	eb 03                	jmp    801025f3 <namex+0x11e>
  }
  return ip;
801025f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801025f3:	c9                   	leave  
801025f4:	c3                   	ret    

801025f5 <namei>:

struct inode*
namei(char *path)
{
801025f5:	55                   	push   %ebp
801025f6:	89 e5                	mov    %esp,%ebp
801025f8:	83 ec 28             	sub    $0x28,%esp
  char name[DIRSIZ];
  return namex(path, 0, name);
801025fb:	83 ec 04             	sub    $0x4,%esp
801025fe:	8d 45 da             	lea    -0x26(%ebp),%eax
80102601:	50                   	push   %eax
80102602:	6a 00                	push   $0x0
80102604:	ff 75 08             	pushl  0x8(%ebp)
80102607:	e8 c9 fe ff ff       	call   801024d5 <namex>
8010260c:	83 c4 10             	add    $0x10,%esp
}
8010260f:	c9                   	leave  
80102610:	c3                   	ret    

80102611 <nameiparent>:

struct inode*
nameiparent(char *path, char *name)
{
80102611:	55                   	push   %ebp
80102612:	89 e5                	mov    %esp,%ebp
80102614:	83 ec 08             	sub    $0x8,%esp
  return namex(path, 1, name);
80102617:	83 ec 04             	sub    $0x4,%esp
8010261a:	ff 75 0c             	pushl  0xc(%ebp)
8010261d:	6a 01                	push   $0x1
8010261f:	ff 75 08             	pushl  0x8(%ebp)
80102622:	e8 ae fe ff ff       	call   801024d5 <namex>
80102627:	83 c4 10             	add    $0x10,%esp
}
8010262a:	c9                   	leave  
8010262b:	c3                   	ret    

8010262c <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
8010262c:	55                   	push   %ebp
8010262d:	89 e5                	mov    %esp,%ebp
8010262f:	83 ec 14             	sub    $0x14,%esp
80102632:	8b 45 08             	mov    0x8(%ebp),%eax
80102635:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102639:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
8010263d:	89 c2                	mov    %eax,%edx
8010263f:	ec                   	in     (%dx),%al
80102640:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80102643:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80102647:	c9                   	leave  
80102648:	c3                   	ret    

80102649 <insl>:

static inline void
insl(int port, void *addr, int cnt)
{
80102649:	55                   	push   %ebp
8010264a:	89 e5                	mov    %esp,%ebp
8010264c:	57                   	push   %edi
8010264d:	53                   	push   %ebx
  asm volatile("cld; rep insl" :
8010264e:	8b 55 08             	mov    0x8(%ebp),%edx
80102651:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80102654:	8b 45 10             	mov    0x10(%ebp),%eax
80102657:	89 cb                	mov    %ecx,%ebx
80102659:	89 df                	mov    %ebx,%edi
8010265b:	89 c1                	mov    %eax,%ecx
8010265d:	fc                   	cld    
8010265e:	f3 6d                	rep insl (%dx),%es:(%edi)
80102660:	89 c8                	mov    %ecx,%eax
80102662:	89 fb                	mov    %edi,%ebx
80102664:	89 5d 0c             	mov    %ebx,0xc(%ebp)
80102667:	89 45 10             	mov    %eax,0x10(%ebp)
               "=D" (addr), "=c" (cnt) :
               "d" (port), "0" (addr), "1" (cnt) :
               "memory", "cc");
}
8010266a:	90                   	nop
8010266b:	5b                   	pop    %ebx
8010266c:	5f                   	pop    %edi
8010266d:	5d                   	pop    %ebp
8010266e:	c3                   	ret    

8010266f <outb>:

static inline void
outb(ushort port, uchar data)
{
8010266f:	55                   	push   %ebp
80102670:	89 e5                	mov    %esp,%ebp
80102672:	83 ec 08             	sub    $0x8,%esp
80102675:	8b 55 08             	mov    0x8(%ebp),%edx
80102678:	8b 45 0c             	mov    0xc(%ebp),%eax
8010267b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
8010267f:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102682:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80102686:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
8010268a:	ee                   	out    %al,(%dx)
}
8010268b:	90                   	nop
8010268c:	c9                   	leave  
8010268d:	c3                   	ret    

8010268e <outsl>:
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
}

static inline void
outsl(int port, const void *addr, int cnt)
{
8010268e:	55                   	push   %ebp
8010268f:	89 e5                	mov    %esp,%ebp
80102691:	56                   	push   %esi
80102692:	53                   	push   %ebx
  asm volatile("cld; rep outsl" :
80102693:	8b 55 08             	mov    0x8(%ebp),%edx
80102696:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80102699:	8b 45 10             	mov    0x10(%ebp),%eax
8010269c:	89 cb                	mov    %ecx,%ebx
8010269e:	89 de                	mov    %ebx,%esi
801026a0:	89 c1                	mov    %eax,%ecx
801026a2:	fc                   	cld    
801026a3:	f3 6f                	rep outsl %ds:(%esi),(%dx)
801026a5:	89 c8                	mov    %ecx,%eax
801026a7:	89 f3                	mov    %esi,%ebx
801026a9:	89 5d 0c             	mov    %ebx,0xc(%ebp)
801026ac:	89 45 10             	mov    %eax,0x10(%ebp)
               "=S" (addr), "=c" (cnt) :
               "d" (port), "0" (addr), "1" (cnt) :
               "cc");
}
801026af:	90                   	nop
801026b0:	5b                   	pop    %ebx
801026b1:	5e                   	pop    %esi
801026b2:	5d                   	pop    %ebp
801026b3:	c3                   	ret    

801026b4 <idewait>:
static void idestart(struct buf*);

// Wait for IDE disk to become ready.
static int
idewait(int checkerr)
{
801026b4:	55                   	push   %ebp
801026b5:	89 e5                	mov    %esp,%ebp
801026b7:	83 ec 10             	sub    $0x10,%esp
  int r;

  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY) 
801026ba:	90                   	nop
801026bb:	68 f7 01 00 00       	push   $0x1f7
801026c0:	e8 67 ff ff ff       	call   8010262c <inb>
801026c5:	83 c4 04             	add    $0x4,%esp
801026c8:	0f b6 c0             	movzbl %al,%eax
801026cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
801026ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
801026d1:	25 c0 00 00 00       	and    $0xc0,%eax
801026d6:	83 f8 40             	cmp    $0x40,%eax
801026d9:	75 e0                	jne    801026bb <idewait+0x7>
    ;
  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
801026db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801026df:	74 11                	je     801026f2 <idewait+0x3e>
801026e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
801026e4:	83 e0 21             	and    $0x21,%eax
801026e7:	85 c0                	test   %eax,%eax
801026e9:	74 07                	je     801026f2 <idewait+0x3e>
    return -1;
801026eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801026f0:	eb 05                	jmp    801026f7 <idewait+0x43>
  return 0;
801026f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
801026f7:	c9                   	leave  
801026f8:	c3                   	ret    

801026f9 <ideinit>:

void
ideinit(void)
{
801026f9:	55                   	push   %ebp
801026fa:	89 e5                	mov    %esp,%ebp
801026fc:	83 ec 18             	sub    $0x18,%esp
  int i;

  initlock(&idelock, "ide");
801026ff:	83 ec 08             	sub    $0x8,%esp
80102702:	68 b5 c3 10 80       	push   $0x8010c3b5
80102707:	68 20 36 11 80       	push   $0x80113620
8010270c:	e8 bd 29 00 00       	call   801050ce <initlock>
80102711:	83 c4 10             	add    $0x10,%esp
  picenable(IRQ_IDE);
80102714:	83 ec 0c             	sub    $0xc,%esp
80102717:	6a 0e                	push   $0xe
80102719:	e8 13 19 00 00       	call   80104031 <picenable>
8010271e:	83 c4 10             	add    $0x10,%esp
  ioapicenable(IRQ_IDE, ncpu - 1);
80102721:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80102726:	83 e8 01             	sub    $0x1,%eax
80102729:	83 ec 08             	sub    $0x8,%esp
8010272c:	50                   	push   %eax
8010272d:	6a 0e                	push   $0xe
8010272f:	e8 37 04 00 00       	call   80102b6b <ioapicenable>
80102734:	83 c4 10             	add    $0x10,%esp
  idewait(0);
80102737:	83 ec 0c             	sub    $0xc,%esp
8010273a:	6a 00                	push   $0x0
8010273c:	e8 73 ff ff ff       	call   801026b4 <idewait>
80102741:	83 c4 10             	add    $0x10,%esp
  
  // Check if disk 1 is present
  outb(0x1f6, 0xe0 | (1<<4));
80102744:	83 ec 08             	sub    $0x8,%esp
80102747:	68 f0 00 00 00       	push   $0xf0
8010274c:	68 f6 01 00 00       	push   $0x1f6
80102751:	e8 19 ff ff ff       	call   8010266f <outb>
80102756:	83 c4 10             	add    $0x10,%esp
  for(i=0; i<1000; i++){
80102759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102760:	eb 24                	jmp    80102786 <ideinit+0x8d>
    if(inb(0x1f7) != 0){
80102762:	83 ec 0c             	sub    $0xc,%esp
80102765:	68 f7 01 00 00       	push   $0x1f7
8010276a:	e8 bd fe ff ff       	call   8010262c <inb>
8010276f:	83 c4 10             	add    $0x10,%esp
80102772:	84 c0                	test   %al,%al
80102774:	74 0c                	je     80102782 <ideinit+0x89>
      havedisk1 = 1;
80102776:	c7 05 58 36 11 80 01 	movl   $0x1,0x80113658
8010277d:	00 00 00 
      break;
80102780:	eb 0d                	jmp    8010278f <ideinit+0x96>
  ioapicenable(IRQ_IDE, ncpu - 1);
  idewait(0);
  
  // Check if disk 1 is present
  outb(0x1f6, 0xe0 | (1<<4));
  for(i=0; i<1000; i++){
80102782:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80102786:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
8010278d:	7e d3                	jle    80102762 <ideinit+0x69>
      break;
    }
  }
  
  // Switch back to disk 0.
  outb(0x1f6, 0xe0 | (0<<4));
8010278f:	83 ec 08             	sub    $0x8,%esp
80102792:	68 e0 00 00 00       	push   $0xe0
80102797:	68 f6 01 00 00       	push   $0x1f6
8010279c:	e8 ce fe ff ff       	call   8010266f <outb>
801027a1:	83 c4 10             	add    $0x10,%esp
}
801027a4:	90                   	nop
801027a5:	c9                   	leave  
801027a6:	c3                   	ret    

801027a7 <idestart>:

// Start the request for b.  Caller must hold idelock.
static void
idestart(struct buf *b)
{
801027a7:	55                   	push   %ebp
801027a8:	89 e5                	mov    %esp,%ebp
801027aa:	83 ec 08             	sub    $0x8,%esp
  if(b == 0)
801027ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801027b1:	75 0d                	jne    801027c0 <idestart+0x19>
    panic("idestart");
801027b3:	83 ec 0c             	sub    $0xc,%esp
801027b6:	68 b9 c3 10 80       	push   $0x8010c3b9
801027bb:	e8 a6 dd ff ff       	call   80100566 <panic>

  idewait(0);
801027c0:	83 ec 0c             	sub    $0xc,%esp
801027c3:	6a 00                	push   $0x0
801027c5:	e8 ea fe ff ff       	call   801026b4 <idewait>
801027ca:	83 c4 10             	add    $0x10,%esp
  outb(0x3f6, 0);  // generate interrupt
801027cd:	83 ec 08             	sub    $0x8,%esp
801027d0:	6a 00                	push   $0x0
801027d2:	68 f6 03 00 00       	push   $0x3f6
801027d7:	e8 93 fe ff ff       	call   8010266f <outb>
801027dc:	83 c4 10             	add    $0x10,%esp
  outb(0x1f2, 1);  // number of sectors
801027df:	83 ec 08             	sub    $0x8,%esp
801027e2:	6a 01                	push   $0x1
801027e4:	68 f2 01 00 00       	push   $0x1f2
801027e9:	e8 81 fe ff ff       	call   8010266f <outb>
801027ee:	83 c4 10             	add    $0x10,%esp
  outb(0x1f3, b->sector & 0xff);
801027f1:	8b 45 08             	mov    0x8(%ebp),%eax
801027f4:	8b 40 08             	mov    0x8(%eax),%eax
801027f7:	0f b6 c0             	movzbl %al,%eax
801027fa:	83 ec 08             	sub    $0x8,%esp
801027fd:	50                   	push   %eax
801027fe:	68 f3 01 00 00       	push   $0x1f3
80102803:	e8 67 fe ff ff       	call   8010266f <outb>
80102808:	83 c4 10             	add    $0x10,%esp
  outb(0x1f4, (b->sector >> 8) & 0xff);
8010280b:	8b 45 08             	mov    0x8(%ebp),%eax
8010280e:	8b 40 08             	mov    0x8(%eax),%eax
80102811:	c1 e8 08             	shr    $0x8,%eax
80102814:	0f b6 c0             	movzbl %al,%eax
80102817:	83 ec 08             	sub    $0x8,%esp
8010281a:	50                   	push   %eax
8010281b:	68 f4 01 00 00       	push   $0x1f4
80102820:	e8 4a fe ff ff       	call   8010266f <outb>
80102825:	83 c4 10             	add    $0x10,%esp
  outb(0x1f5, (b->sector >> 16) & 0xff);
80102828:	8b 45 08             	mov    0x8(%ebp),%eax
8010282b:	8b 40 08             	mov    0x8(%eax),%eax
8010282e:	c1 e8 10             	shr    $0x10,%eax
80102831:	0f b6 c0             	movzbl %al,%eax
80102834:	83 ec 08             	sub    $0x8,%esp
80102837:	50                   	push   %eax
80102838:	68 f5 01 00 00       	push   $0x1f5
8010283d:	e8 2d fe ff ff       	call   8010266f <outb>
80102842:	83 c4 10             	add    $0x10,%esp
  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
80102845:	8b 45 08             	mov    0x8(%ebp),%eax
80102848:	8b 40 04             	mov    0x4(%eax),%eax
8010284b:	83 e0 01             	and    $0x1,%eax
8010284e:	c1 e0 04             	shl    $0x4,%eax
80102851:	89 c2                	mov    %eax,%edx
80102853:	8b 45 08             	mov    0x8(%ebp),%eax
80102856:	8b 40 08             	mov    0x8(%eax),%eax
80102859:	c1 e8 18             	shr    $0x18,%eax
8010285c:	83 e0 0f             	and    $0xf,%eax
8010285f:	09 d0                	or     %edx,%eax
80102861:	83 c8 e0             	or     $0xffffffe0,%eax
80102864:	0f b6 c0             	movzbl %al,%eax
80102867:	83 ec 08             	sub    $0x8,%esp
8010286a:	50                   	push   %eax
8010286b:	68 f6 01 00 00       	push   $0x1f6
80102870:	e8 fa fd ff ff       	call   8010266f <outb>
80102875:	83 c4 10             	add    $0x10,%esp
  if(b->flags & B_DIRTY){
80102878:	8b 45 08             	mov    0x8(%ebp),%eax
8010287b:	8b 00                	mov    (%eax),%eax
8010287d:	83 e0 04             	and    $0x4,%eax
80102880:	85 c0                	test   %eax,%eax
80102882:	74 30                	je     801028b4 <idestart+0x10d>
    outb(0x1f7, IDE_CMD_WRITE);
80102884:	83 ec 08             	sub    $0x8,%esp
80102887:	6a 30                	push   $0x30
80102889:	68 f7 01 00 00       	push   $0x1f7
8010288e:	e8 dc fd ff ff       	call   8010266f <outb>
80102893:	83 c4 10             	add    $0x10,%esp
    outsl(0x1f0, b->data, 512/4);
80102896:	8b 45 08             	mov    0x8(%ebp),%eax
80102899:	83 c0 18             	add    $0x18,%eax
8010289c:	83 ec 04             	sub    $0x4,%esp
8010289f:	68 80 00 00 00       	push   $0x80
801028a4:	50                   	push   %eax
801028a5:	68 f0 01 00 00       	push   $0x1f0
801028aa:	e8 df fd ff ff       	call   8010268e <outsl>
801028af:	83 c4 10             	add    $0x10,%esp
  } else {
    outb(0x1f7, IDE_CMD_READ);
  }
}
801028b2:	eb 12                	jmp    801028c6 <idestart+0x11f>
  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
  if(b->flags & B_DIRTY){
    outb(0x1f7, IDE_CMD_WRITE);
    outsl(0x1f0, b->data, 512/4);
  } else {
    outb(0x1f7, IDE_CMD_READ);
801028b4:	83 ec 08             	sub    $0x8,%esp
801028b7:	6a 20                	push   $0x20
801028b9:	68 f7 01 00 00       	push   $0x1f7
801028be:	e8 ac fd ff ff       	call   8010266f <outb>
801028c3:	83 c4 10             	add    $0x10,%esp
  }
}
801028c6:	90                   	nop
801028c7:	c9                   	leave  
801028c8:	c3                   	ret    

801028c9 <ideintr>:

// Interrupt handler.
void
ideintr(void)
{
801028c9:	55                   	push   %ebp
801028ca:	89 e5                	mov    %esp,%ebp
801028cc:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  // First queued buffer is the active request.
  acquire(&idelock);
801028cf:	83 ec 0c             	sub    $0xc,%esp
801028d2:	68 20 36 11 80       	push   $0x80113620
801028d7:	e8 14 28 00 00       	call   801050f0 <acquire>
801028dc:	83 c4 10             	add    $0x10,%esp
  if((b = idequeue) == 0){
801028df:	a1 54 36 11 80       	mov    0x80113654,%eax
801028e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
801028e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801028eb:	75 15                	jne    80102902 <ideintr+0x39>
    release(&idelock);
801028ed:	83 ec 0c             	sub    $0xc,%esp
801028f0:	68 20 36 11 80       	push   $0x80113620
801028f5:	e8 5d 28 00 00       	call   80105157 <release>
801028fa:	83 c4 10             	add    $0x10,%esp
    // cprintf("spurious IDE interrupt\n");
    return;
801028fd:	e9 9a 00 00 00       	jmp    8010299c <ideintr+0xd3>
  }
  idequeue = b->qnext;
80102902:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102905:	8b 40 14             	mov    0x14(%eax),%eax
80102908:	a3 54 36 11 80       	mov    %eax,0x80113654

  // Read data if needed.
  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
8010290d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102910:	8b 00                	mov    (%eax),%eax
80102912:	83 e0 04             	and    $0x4,%eax
80102915:	85 c0                	test   %eax,%eax
80102917:	75 2d                	jne    80102946 <ideintr+0x7d>
80102919:	83 ec 0c             	sub    $0xc,%esp
8010291c:	6a 01                	push   $0x1
8010291e:	e8 91 fd ff ff       	call   801026b4 <idewait>
80102923:	83 c4 10             	add    $0x10,%esp
80102926:	85 c0                	test   %eax,%eax
80102928:	78 1c                	js     80102946 <ideintr+0x7d>
    insl(0x1f0, b->data, 512/4);
8010292a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010292d:	83 c0 18             	add    $0x18,%eax
80102930:	83 ec 04             	sub    $0x4,%esp
80102933:	68 80 00 00 00       	push   $0x80
80102938:	50                   	push   %eax
80102939:	68 f0 01 00 00       	push   $0x1f0
8010293e:	e8 06 fd ff ff       	call   80102649 <insl>
80102943:	83 c4 10             	add    $0x10,%esp
  
  // Wake process waiting for this buf.
  b->flags |= B_VALID;
80102946:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102949:	8b 00                	mov    (%eax),%eax
8010294b:	83 c8 02             	or     $0x2,%eax
8010294e:	89 c2                	mov    %eax,%edx
80102950:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102953:	89 10                	mov    %edx,(%eax)
  b->flags &= ~B_DIRTY;
80102955:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102958:	8b 00                	mov    (%eax),%eax
8010295a:	83 e0 fb             	and    $0xfffffffb,%eax
8010295d:	89 c2                	mov    %eax,%edx
8010295f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102962:	89 10                	mov    %edx,(%eax)
  wakeup(b);
80102964:	83 ec 0c             	sub    $0xc,%esp
80102967:	ff 75 f4             	pushl  -0xc(%ebp)
8010296a:	e8 73 25 00 00       	call   80104ee2 <wakeup>
8010296f:	83 c4 10             	add    $0x10,%esp
  
  // Start disk on next buf in queue.
  if(idequeue != 0)
80102972:	a1 54 36 11 80       	mov    0x80113654,%eax
80102977:	85 c0                	test   %eax,%eax
80102979:	74 11                	je     8010298c <ideintr+0xc3>
    idestart(idequeue);
8010297b:	a1 54 36 11 80       	mov    0x80113654,%eax
80102980:	83 ec 0c             	sub    $0xc,%esp
80102983:	50                   	push   %eax
80102984:	e8 1e fe ff ff       	call   801027a7 <idestart>
80102989:	83 c4 10             	add    $0x10,%esp

  release(&idelock);
8010298c:	83 ec 0c             	sub    $0xc,%esp
8010298f:	68 20 36 11 80       	push   $0x80113620
80102994:	e8 be 27 00 00       	call   80105157 <release>
80102999:	83 c4 10             	add    $0x10,%esp
}
8010299c:	c9                   	leave  
8010299d:	c3                   	ret    

8010299e <iderw>:
// Sync buf with disk. 
// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
// Else if B_VALID is not set, read buf from disk, set B_VALID.
void
iderw(struct buf *b)
{
8010299e:	55                   	push   %ebp
8010299f:	89 e5                	mov    %esp,%ebp
801029a1:	83 ec 18             	sub    $0x18,%esp
  struct buf **pp;

  if(!(b->flags & B_BUSY))
801029a4:	8b 45 08             	mov    0x8(%ebp),%eax
801029a7:	8b 00                	mov    (%eax),%eax
801029a9:	83 e0 01             	and    $0x1,%eax
801029ac:	85 c0                	test   %eax,%eax
801029ae:	75 0d                	jne    801029bd <iderw+0x1f>
    panic("iderw: buf not busy");
801029b0:	83 ec 0c             	sub    $0xc,%esp
801029b3:	68 c2 c3 10 80       	push   $0x8010c3c2
801029b8:	e8 a9 db ff ff       	call   80100566 <panic>
  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
801029bd:	8b 45 08             	mov    0x8(%ebp),%eax
801029c0:	8b 00                	mov    (%eax),%eax
801029c2:	83 e0 06             	and    $0x6,%eax
801029c5:	83 f8 02             	cmp    $0x2,%eax
801029c8:	75 0d                	jne    801029d7 <iderw+0x39>
    panic("iderw: nothing to do");
801029ca:	83 ec 0c             	sub    $0xc,%esp
801029cd:	68 d6 c3 10 80       	push   $0x8010c3d6
801029d2:	e8 8f db ff ff       	call   80100566 <panic>
  if(b->dev != 0 && !havedisk1)
801029d7:	8b 45 08             	mov    0x8(%ebp),%eax
801029da:	8b 40 04             	mov    0x4(%eax),%eax
801029dd:	85 c0                	test   %eax,%eax
801029df:	74 16                	je     801029f7 <iderw+0x59>
801029e1:	a1 58 36 11 80       	mov    0x80113658,%eax
801029e6:	85 c0                	test   %eax,%eax
801029e8:	75 0d                	jne    801029f7 <iderw+0x59>
    panic("iderw: ide disk 1 not present");
801029ea:	83 ec 0c             	sub    $0xc,%esp
801029ed:	68 eb c3 10 80       	push   $0x8010c3eb
801029f2:	e8 6f db ff ff       	call   80100566 <panic>

  acquire(&idelock);  //DOC:acquire-lock
801029f7:	83 ec 0c             	sub    $0xc,%esp
801029fa:	68 20 36 11 80       	push   $0x80113620
801029ff:	e8 ec 26 00 00       	call   801050f0 <acquire>
80102a04:	83 c4 10             	add    $0x10,%esp

  // Append b to idequeue.
  b->qnext = 0;
80102a07:	8b 45 08             	mov    0x8(%ebp),%eax
80102a0a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
80102a11:	c7 45 f4 54 36 11 80 	movl   $0x80113654,-0xc(%ebp)
80102a18:	eb 0b                	jmp    80102a25 <iderw+0x87>
80102a1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102a1d:	8b 00                	mov    (%eax),%eax
80102a1f:	83 c0 14             	add    $0x14,%eax
80102a22:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102a25:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102a28:	8b 00                	mov    (%eax),%eax
80102a2a:	85 c0                	test   %eax,%eax
80102a2c:	75 ec                	jne    80102a1a <iderw+0x7c>
    ;
  *pp = b;
80102a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102a31:	8b 55 08             	mov    0x8(%ebp),%edx
80102a34:	89 10                	mov    %edx,(%eax)
  
  // Start disk if necessary.
  if(idequeue == b)
80102a36:	a1 54 36 11 80       	mov    0x80113654,%eax
80102a3b:	3b 45 08             	cmp    0x8(%ebp),%eax
80102a3e:	75 23                	jne    80102a63 <iderw+0xc5>
    idestart(b);
80102a40:	83 ec 0c             	sub    $0xc,%esp
80102a43:	ff 75 08             	pushl  0x8(%ebp)
80102a46:	e8 5c fd ff ff       	call   801027a7 <idestart>
80102a4b:	83 c4 10             	add    $0x10,%esp
  
  // Wait for request to finish.
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
80102a4e:	eb 13                	jmp    80102a63 <iderw+0xc5>
    sleep(b, &idelock);
80102a50:	83 ec 08             	sub    $0x8,%esp
80102a53:	68 20 36 11 80       	push   $0x80113620
80102a58:	ff 75 08             	pushl  0x8(%ebp)
80102a5b:	e8 97 23 00 00       	call   80104df7 <sleep>
80102a60:	83 c4 10             	add    $0x10,%esp
  // Start disk if necessary.
  if(idequeue == b)
    idestart(b);
  
  // Wait for request to finish.
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
80102a63:	8b 45 08             	mov    0x8(%ebp),%eax
80102a66:	8b 00                	mov    (%eax),%eax
80102a68:	83 e0 06             	and    $0x6,%eax
80102a6b:	83 f8 02             	cmp    $0x2,%eax
80102a6e:	75 e0                	jne    80102a50 <iderw+0xb2>
    sleep(b, &idelock);
  }

  release(&idelock);
80102a70:	83 ec 0c             	sub    $0xc,%esp
80102a73:	68 20 36 11 80       	push   $0x80113620
80102a78:	e8 da 26 00 00       	call   80105157 <release>
80102a7d:	83 c4 10             	add    $0x10,%esp
}
80102a80:	90                   	nop
80102a81:	c9                   	leave  
80102a82:	c3                   	ret    

80102a83 <ioapicread>:
  uint data;
};

static uint
ioapicread(int reg)
{
80102a83:	55                   	push   %ebp
80102a84:	89 e5                	mov    %esp,%ebp
  ioapic->reg = reg;
80102a86:	a1 14 a3 11 80       	mov    0x8011a314,%eax
80102a8b:	8b 55 08             	mov    0x8(%ebp),%edx
80102a8e:	89 10                	mov    %edx,(%eax)
  return ioapic->data;
80102a90:	a1 14 a3 11 80       	mov    0x8011a314,%eax
80102a95:	8b 40 10             	mov    0x10(%eax),%eax
}
80102a98:	5d                   	pop    %ebp
80102a99:	c3                   	ret    

80102a9a <ioapicwrite>:

static void
ioapicwrite(int reg, uint data)
{
80102a9a:	55                   	push   %ebp
80102a9b:	89 e5                	mov    %esp,%ebp
  ioapic->reg = reg;
80102a9d:	a1 14 a3 11 80       	mov    0x8011a314,%eax
80102aa2:	8b 55 08             	mov    0x8(%ebp),%edx
80102aa5:	89 10                	mov    %edx,(%eax)
  ioapic->data = data;
80102aa7:	a1 14 a3 11 80       	mov    0x8011a314,%eax
80102aac:	8b 55 0c             	mov    0xc(%ebp),%edx
80102aaf:	89 50 10             	mov    %edx,0x10(%eax)
}
80102ab2:	90                   	nop
80102ab3:	5d                   	pop    %ebp
80102ab4:	c3                   	ret    

80102ab5 <ioapicinit>:

void
ioapicinit(void)
{
80102ab5:	55                   	push   %ebp
80102ab6:	89 e5                	mov    %esp,%ebp
80102ab8:	83 ec 18             	sub    $0x18,%esp
  int i, id, maxintr;

  if(!ismp)
80102abb:	a1 44 a4 11 80       	mov    0x8011a444,%eax
80102ac0:	85 c0                	test   %eax,%eax
80102ac2:	0f 84 a0 00 00 00    	je     80102b68 <ioapicinit+0xb3>
    return;

  ioapic = (volatile struct ioapic*)IOAPIC;
80102ac8:	c7 05 14 a3 11 80 00 	movl   $0xfec00000,0x8011a314
80102acf:	00 c0 fe 
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
80102ad2:	6a 01                	push   $0x1
80102ad4:	e8 aa ff ff ff       	call   80102a83 <ioapicread>
80102ad9:	83 c4 04             	add    $0x4,%esp
80102adc:	c1 e8 10             	shr    $0x10,%eax
80102adf:	25 ff 00 00 00       	and    $0xff,%eax
80102ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  id = ioapicread(REG_ID) >> 24;
80102ae7:	6a 00                	push   $0x0
80102ae9:	e8 95 ff ff ff       	call   80102a83 <ioapicread>
80102aee:	83 c4 04             	add    $0x4,%esp
80102af1:	c1 e8 18             	shr    $0x18,%eax
80102af4:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if(id != ioapicid)
80102af7:	0f b6 05 40 a4 11 80 	movzbl 0x8011a440,%eax
80102afe:	0f b6 c0             	movzbl %al,%eax
80102b01:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80102b04:	74 10                	je     80102b16 <ioapicinit+0x61>
    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
80102b06:	83 ec 0c             	sub    $0xc,%esp
80102b09:	68 0c c4 10 80       	push   $0x8010c40c
80102b0e:	e8 b3 d8 ff ff       	call   801003c6 <cprintf>
80102b13:	83 c4 10             	add    $0x10,%esp

  // Mark all interrupts edge-triggered, active high, disabled,
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
80102b16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102b1d:	eb 3f                	jmp    80102b5e <ioapicinit+0xa9>
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
80102b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102b22:	83 c0 20             	add    $0x20,%eax
80102b25:	0d 00 00 01 00       	or     $0x10000,%eax
80102b2a:	89 c2                	mov    %eax,%edx
80102b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102b2f:	83 c0 08             	add    $0x8,%eax
80102b32:	01 c0                	add    %eax,%eax
80102b34:	83 ec 08             	sub    $0x8,%esp
80102b37:	52                   	push   %edx
80102b38:	50                   	push   %eax
80102b39:	e8 5c ff ff ff       	call   80102a9a <ioapicwrite>
80102b3e:	83 c4 10             	add    $0x10,%esp
    ioapicwrite(REG_TABLE+2*i+1, 0);
80102b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102b44:	83 c0 08             	add    $0x8,%eax
80102b47:	01 c0                	add    %eax,%eax
80102b49:	83 c0 01             	add    $0x1,%eax
80102b4c:	83 ec 08             	sub    $0x8,%esp
80102b4f:	6a 00                	push   $0x0
80102b51:	50                   	push   %eax
80102b52:	e8 43 ff ff ff       	call   80102a9a <ioapicwrite>
80102b57:	83 c4 10             	add    $0x10,%esp
  if(id != ioapicid)
    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");

  // Mark all interrupts edge-triggered, active high, disabled,
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
80102b5a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80102b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102b61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80102b64:	7e b9                	jle    80102b1f <ioapicinit+0x6a>
80102b66:	eb 01                	jmp    80102b69 <ioapicinit+0xb4>
ioapicinit(void)
{
  int i, id, maxintr;

  if(!ismp)
    return;
80102b68:	90                   	nop
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
    ioapicwrite(REG_TABLE+2*i+1, 0);
  }
}
80102b69:	c9                   	leave  
80102b6a:	c3                   	ret    

80102b6b <ioapicenable>:

void
ioapicenable(int irq, int cpunum)
{
80102b6b:	55                   	push   %ebp
80102b6c:	89 e5                	mov    %esp,%ebp
  if(!ismp)
80102b6e:	a1 44 a4 11 80       	mov    0x8011a444,%eax
80102b73:	85 c0                	test   %eax,%eax
80102b75:	74 39                	je     80102bb0 <ioapicenable+0x45>
    return;

  // Mark interrupt edge-triggered, active high,
  // enabled, and routed to the given cpunum,
  // which happens to be that cpu's APIC ID.
  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
80102b77:	8b 45 08             	mov    0x8(%ebp),%eax
80102b7a:	83 c0 20             	add    $0x20,%eax
80102b7d:	89 c2                	mov    %eax,%edx
80102b7f:	8b 45 08             	mov    0x8(%ebp),%eax
80102b82:	83 c0 08             	add    $0x8,%eax
80102b85:	01 c0                	add    %eax,%eax
80102b87:	52                   	push   %edx
80102b88:	50                   	push   %eax
80102b89:	e8 0c ff ff ff       	call   80102a9a <ioapicwrite>
80102b8e:	83 c4 08             	add    $0x8,%esp
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
80102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
80102b94:	c1 e0 18             	shl    $0x18,%eax
80102b97:	89 c2                	mov    %eax,%edx
80102b99:	8b 45 08             	mov    0x8(%ebp),%eax
80102b9c:	83 c0 08             	add    $0x8,%eax
80102b9f:	01 c0                	add    %eax,%eax
80102ba1:	83 c0 01             	add    $0x1,%eax
80102ba4:	52                   	push   %edx
80102ba5:	50                   	push   %eax
80102ba6:	e8 ef fe ff ff       	call   80102a9a <ioapicwrite>
80102bab:	83 c4 08             	add    $0x8,%esp
80102bae:	eb 01                	jmp    80102bb1 <ioapicenable+0x46>

void
ioapicenable(int irq, int cpunum)
{
  if(!ismp)
    return;
80102bb0:	90                   	nop
  // Mark interrupt edge-triggered, active high,
  // enabled, and routed to the given cpunum,
  // which happens to be that cpu's APIC ID.
  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
}
80102bb1:	c9                   	leave  
80102bb2:	c3                   	ret    

80102bb3 <v2p>:
#define KERNBASE 0x80000000         // First kernel virtual address
#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked

#ifndef __ASSEMBLER__

static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
80102bb3:	55                   	push   %ebp
80102bb4:	89 e5                	mov    %esp,%ebp
80102bb6:	8b 45 08             	mov    0x8(%ebp),%eax
80102bb9:	05 00 00 00 80       	add    $0x80000000,%eax
80102bbe:	5d                   	pop    %ebp
80102bbf:	c3                   	ret    

80102bc0 <kinit1>:
// the pages mapped by entrypgdir on free list.
// 2. main() calls kinit2() with the rest of the physical pages
// after installing a full page table that maps them on all cores.
void
kinit1(void *vstart, void *vend)
{
80102bc0:	55                   	push   %ebp
80102bc1:	89 e5                	mov    %esp,%ebp
80102bc3:	83 ec 08             	sub    $0x8,%esp
  initlock(&kmem.lock, "kmem");
80102bc6:	83 ec 08             	sub    $0x8,%esp
80102bc9:	68 3e c4 10 80       	push   $0x8010c43e
80102bce:	68 20 a3 11 80       	push   $0x8011a320
80102bd3:	e8 f6 24 00 00       	call   801050ce <initlock>
80102bd8:	83 c4 10             	add    $0x10,%esp
  kmem.use_lock = 0;
80102bdb:	c7 05 54 a3 11 80 00 	movl   $0x0,0x8011a354
80102be2:	00 00 00 
  freerange(vstart, vend);
80102be5:	83 ec 08             	sub    $0x8,%esp
80102be8:	ff 75 0c             	pushl  0xc(%ebp)
80102beb:	ff 75 08             	pushl  0x8(%ebp)
80102bee:	e8 2a 00 00 00       	call   80102c1d <freerange>
80102bf3:	83 c4 10             	add    $0x10,%esp
}
80102bf6:	90                   	nop
80102bf7:	c9                   	leave  
80102bf8:	c3                   	ret    

80102bf9 <kinit2>:

void
kinit2(void *vstart, void *vend)
{
80102bf9:	55                   	push   %ebp
80102bfa:	89 e5                	mov    %esp,%ebp
80102bfc:	83 ec 08             	sub    $0x8,%esp
  freerange(vstart, vend);
80102bff:	83 ec 08             	sub    $0x8,%esp
80102c02:	ff 75 0c             	pushl  0xc(%ebp)
80102c05:	ff 75 08             	pushl  0x8(%ebp)
80102c08:	e8 10 00 00 00       	call   80102c1d <freerange>
80102c0d:	83 c4 10             	add    $0x10,%esp
  kmem.use_lock = 1;
80102c10:	c7 05 54 a3 11 80 01 	movl   $0x1,0x8011a354
80102c17:	00 00 00 
}
80102c1a:	90                   	nop
80102c1b:	c9                   	leave  
80102c1c:	c3                   	ret    

80102c1d <freerange>:

void
freerange(void *vstart, void *vend)
{
80102c1d:	55                   	push   %ebp
80102c1e:	89 e5                	mov    %esp,%ebp
80102c20:	83 ec 18             	sub    $0x18,%esp
  char *p;
  p = (char*)PGROUNDUP((uint)vstart);
80102c23:	8b 45 08             	mov    0x8(%ebp),%eax
80102c26:	05 ff 0f 00 00       	add    $0xfff,%eax
80102c2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80102c30:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102c33:	eb 15                	jmp    80102c4a <freerange+0x2d>
    kfree(p);
80102c35:	83 ec 0c             	sub    $0xc,%esp
80102c38:	ff 75 f4             	pushl  -0xc(%ebp)
80102c3b:	e8 1a 00 00 00       	call   80102c5a <kfree>
80102c40:	83 c4 10             	add    $0x10,%esp
void
freerange(void *vstart, void *vend)
{
  char *p;
  p = (char*)PGROUNDUP((uint)vstart);
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102c43:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80102c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102c4d:	05 00 10 00 00       	add    $0x1000,%eax
80102c52:	3b 45 0c             	cmp    0xc(%ebp),%eax
80102c55:	76 de                	jbe    80102c35 <freerange+0x18>
    kfree(p);
}
80102c57:	90                   	nop
80102c58:	c9                   	leave  
80102c59:	c3                   	ret    

80102c5a <kfree>:
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(char *v)
{
80102c5a:	55                   	push   %ebp
80102c5b:	89 e5                	mov    %esp,%ebp
80102c5d:	83 ec 18             	sub    $0x18,%esp
  struct run *r;

  if((uint)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
80102c60:	8b 45 08             	mov    0x8(%ebp),%eax
80102c63:	25 ff 0f 00 00       	and    $0xfff,%eax
80102c68:	85 c0                	test   %eax,%eax
80102c6a:	75 1b                	jne    80102c87 <kfree+0x2d>
80102c6c:	81 7d 08 74 2c 12 80 	cmpl   $0x80122c74,0x8(%ebp)
80102c73:	72 12                	jb     80102c87 <kfree+0x2d>
80102c75:	ff 75 08             	pushl  0x8(%ebp)
80102c78:	e8 36 ff ff ff       	call   80102bb3 <v2p>
80102c7d:	83 c4 04             	add    $0x4,%esp
80102c80:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
80102c85:	76 0d                	jbe    80102c94 <kfree+0x3a>
    panic("kfree");
80102c87:	83 ec 0c             	sub    $0xc,%esp
80102c8a:	68 43 c4 10 80       	push   $0x8010c443
80102c8f:	e8 d2 d8 ff ff       	call   80100566 <panic>

  // Fill with junk to catch dangling refs.
  memset(v, 1, PGSIZE);
80102c94:	83 ec 04             	sub    $0x4,%esp
80102c97:	68 00 10 00 00       	push   $0x1000
80102c9c:	6a 01                	push   $0x1
80102c9e:	ff 75 08             	pushl  0x8(%ebp)
80102ca1:	e8 ad 26 00 00       	call   80105353 <memset>
80102ca6:	83 c4 10             	add    $0x10,%esp

  if(kmem.use_lock)
80102ca9:	a1 54 a3 11 80       	mov    0x8011a354,%eax
80102cae:	85 c0                	test   %eax,%eax
80102cb0:	74 10                	je     80102cc2 <kfree+0x68>
    acquire(&kmem.lock);
80102cb2:	83 ec 0c             	sub    $0xc,%esp
80102cb5:	68 20 a3 11 80       	push   $0x8011a320
80102cba:	e8 31 24 00 00       	call   801050f0 <acquire>
80102cbf:	83 c4 10             	add    $0x10,%esp
  r = (struct run*)v;
80102cc2:	8b 45 08             	mov    0x8(%ebp),%eax
80102cc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  r->next = kmem.freelist;
80102cc8:	8b 15 58 a3 11 80    	mov    0x8011a358,%edx
80102cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102cd1:	89 10                	mov    %edx,(%eax)
  kmem.freelist = r;
80102cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102cd6:	a3 58 a3 11 80       	mov    %eax,0x8011a358
  if(kmem.use_lock)
80102cdb:	a1 54 a3 11 80       	mov    0x8011a354,%eax
80102ce0:	85 c0                	test   %eax,%eax
80102ce2:	74 10                	je     80102cf4 <kfree+0x9a>
    release(&kmem.lock);
80102ce4:	83 ec 0c             	sub    $0xc,%esp
80102ce7:	68 20 a3 11 80       	push   $0x8011a320
80102cec:	e8 66 24 00 00       	call   80105157 <release>
80102cf1:	83 c4 10             	add    $0x10,%esp
}
80102cf4:	90                   	nop
80102cf5:	c9                   	leave  
80102cf6:	c3                   	ret    

80102cf7 <kalloc>:
// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char*
kalloc(void)
{
80102cf7:	55                   	push   %ebp
80102cf8:	89 e5                	mov    %esp,%ebp
80102cfa:	83 ec 18             	sub    $0x18,%esp
  struct run *r;

  if(kmem.use_lock)
80102cfd:	a1 54 a3 11 80       	mov    0x8011a354,%eax
80102d02:	85 c0                	test   %eax,%eax
80102d04:	74 10                	je     80102d16 <kalloc+0x1f>
    acquire(&kmem.lock);
80102d06:	83 ec 0c             	sub    $0xc,%esp
80102d09:	68 20 a3 11 80       	push   $0x8011a320
80102d0e:	e8 dd 23 00 00       	call   801050f0 <acquire>
80102d13:	83 c4 10             	add    $0x10,%esp
  r = kmem.freelist;
80102d16:	a1 58 a3 11 80       	mov    0x8011a358,%eax
80102d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(r)
80102d1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102d22:	74 0a                	je     80102d2e <kalloc+0x37>
    kmem.freelist = r->next;
80102d24:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102d27:	8b 00                	mov    (%eax),%eax
80102d29:	a3 58 a3 11 80       	mov    %eax,0x8011a358
  if(kmem.use_lock)
80102d2e:	a1 54 a3 11 80       	mov    0x8011a354,%eax
80102d33:	85 c0                	test   %eax,%eax
80102d35:	74 10                	je     80102d47 <kalloc+0x50>
    release(&kmem.lock);
80102d37:	83 ec 0c             	sub    $0xc,%esp
80102d3a:	68 20 a3 11 80       	push   $0x8011a320
80102d3f:	e8 13 24 00 00       	call   80105157 <release>
80102d44:	83 c4 10             	add    $0x10,%esp
  return (char*)r;
80102d47:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80102d4a:	c9                   	leave  
80102d4b:	c3                   	ret    

80102d4c <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80102d4c:	55                   	push   %ebp
80102d4d:	89 e5                	mov    %esp,%ebp
80102d4f:	83 ec 14             	sub    $0x14,%esp
80102d52:	8b 45 08             	mov    0x8(%ebp),%eax
80102d55:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102d59:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80102d5d:	89 c2                	mov    %eax,%edx
80102d5f:	ec                   	in     (%dx),%al
80102d60:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80102d63:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80102d67:	c9                   	leave  
80102d68:	c3                   	ret    

80102d69 <kbdgetc>:

static struct spinlock kbdlock;

int
kbdgetc(void)
{
80102d69:	55                   	push   %ebp
80102d6a:	89 e5                	mov    %esp,%ebp
80102d6c:	83 ec 48             	sub    $0x48,%esp
  static uchar *charcode[4] = {
    normalmap, shiftmap, ctlmap, ctlmap
  };
  uint st, data, c;

  st = inb(KBSTATP);
80102d6f:	6a 64                	push   $0x64
80102d71:	e8 d6 ff ff ff       	call   80102d4c <inb>
80102d76:	83 c4 04             	add    $0x4,%esp
80102d79:	0f b6 c0             	movzbl %al,%eax
80102d7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((st & KBS_DIB) == 0)
80102d7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102d82:	83 e0 01             	and    $0x1,%eax
80102d85:	85 c0                	test   %eax,%eax
80102d87:	75 0a                	jne    80102d93 <kbdgetc+0x2a>
    return -1;
80102d89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102d8e:	e9 87 01 00 00       	jmp    80102f1a <kbdgetc+0x1b1>
  data = inb(KBDATAP);
80102d93:	6a 60                	push   $0x60
80102d95:	e8 b2 ff ff ff       	call   80102d4c <inb>
80102d9a:	83 c4 04             	add    $0x4,%esp
80102d9d:	0f b6 c0             	movzbl %al,%eax
80102da0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  message msg;

  if(data == 0xE0){
80102da3:	81 7d f4 e0 00 00 00 	cmpl   $0xe0,-0xc(%ebp)
80102daa:	75 17                	jne    80102dc3 <kbdgetc+0x5a>
    shift |= E0ESC;
80102dac:	a1 94 36 11 80       	mov    0x80113694,%eax
80102db1:	83 c8 40             	or     $0x40,%eax
80102db4:	a3 94 36 11 80       	mov    %eax,0x80113694
    return 0;
80102db9:	b8 00 00 00 00       	mov    $0x0,%eax
80102dbe:	e9 57 01 00 00       	jmp    80102f1a <kbdgetc+0x1b1>
  } else if(data & 0x80){
80102dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102dc6:	25 80 00 00 00       	and    $0x80,%eax
80102dcb:	85 c0                	test   %eax,%eax
80102dcd:	74 7a                	je     80102e49 <kbdgetc+0xe0>
    // Key released
    data = (shift & E0ESC ? data : data & 0x7F);
80102dcf:	a1 94 36 11 80       	mov    0x80113694,%eax
80102dd4:	83 e0 40             	and    $0x40,%eax
80102dd7:	85 c0                	test   %eax,%eax
80102dd9:	75 08                	jne    80102de3 <kbdgetc+0x7a>
80102ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102dde:	83 e0 7f             	and    $0x7f,%eax
80102de1:	eb 03                	jmp    80102de6 <kbdgetc+0x7d>
80102de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102de6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    shift &= ~(shiftcode[data] | E0ESC);
80102de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102dec:	05 20 10 11 80       	add    $0x80111020,%eax
80102df1:	0f b6 00             	movzbl (%eax),%eax
80102df4:	83 c8 40             	or     $0x40,%eax
80102df7:	0f b6 c0             	movzbl %al,%eax
80102dfa:	f7 d0                	not    %eax
80102dfc:	89 c2                	mov    %eax,%edx
80102dfe:	a1 94 36 11 80       	mov    0x80113694,%eax
80102e03:	21 d0                	and    %edx,%eax
80102e05:	a3 94 36 11 80       	mov    %eax,0x80113694
    c = normalmap[data];
80102e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102e0d:	05 20 12 11 80       	add    $0x80111220,%eax
80102e12:	0f b6 00             	movzbl (%eax),%eax
80102e15:	0f b6 c0             	movzbl %al,%eax
80102e18:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //cprintf("(%x) ", data);
    msg.msg_type = M_KEY_UP;
80102e1b:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
    msg.params[0] = c;
80102e22:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102e25:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    msg.params[1] = shift;
80102e28:	a1 94 36 11 80       	mov    0x80113694,%eax
80102e2d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    handleMessage(&msg);
80102e30:	83 ec 0c             	sub    $0xc,%esp
80102e33:	8d 45 c0             	lea    -0x40(%ebp),%eax
80102e36:	50                   	push   %eax
80102e37:	e8 2d 58 00 00       	call   80108669 <handleMessage>
80102e3c:	83 c4 10             	add    $0x10,%esp
    return 0;
80102e3f:	b8 00 00 00 00       	mov    $0x0,%eax
80102e44:	e9 d1 00 00 00       	jmp    80102f1a <kbdgetc+0x1b1>
  } else if(shift & E0ESC){
80102e49:	a1 94 36 11 80       	mov    0x80113694,%eax
80102e4e:	83 e0 40             	and    $0x40,%eax
80102e51:	85 c0                	test   %eax,%eax
80102e53:	74 14                	je     80102e69 <kbdgetc+0x100>
    // Last character was an E0 escape; or with 0x80
    data |= 0x80;
80102e55:	81 4d f4 80 00 00 00 	orl    $0x80,-0xc(%ebp)
    shift &= ~E0ESC;
80102e5c:	a1 94 36 11 80       	mov    0x80113694,%eax
80102e61:	83 e0 bf             	and    $0xffffffbf,%eax
80102e64:	a3 94 36 11 80       	mov    %eax,0x80113694
  }

  shift |= shiftcode[data];
80102e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102e6c:	05 20 10 11 80       	add    $0x80111020,%eax
80102e71:	0f b6 00             	movzbl (%eax),%eax
80102e74:	0f b6 d0             	movzbl %al,%edx
80102e77:	a1 94 36 11 80       	mov    0x80113694,%eax
80102e7c:	09 d0                	or     %edx,%eax
80102e7e:	a3 94 36 11 80       	mov    %eax,0x80113694
  shift ^= togglecode[data];
80102e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102e86:	05 20 11 11 80       	add    $0x80111120,%eax
80102e8b:	0f b6 00             	movzbl (%eax),%eax
80102e8e:	0f b6 d0             	movzbl %al,%edx
80102e91:	a1 94 36 11 80       	mov    0x80113694,%eax
80102e96:	31 d0                	xor    %edx,%eax
80102e98:	a3 94 36 11 80       	mov    %eax,0x80113694
  msg.msg_type = M_KEY_DOWN;
80102e9d:	c7 45 c0 02 00 00 00 	movl   $0x2,-0x40(%ebp)
  msg.params[0] = normalmap[data];
80102ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102ea7:	05 20 12 11 80       	add    $0x80111220,%eax
80102eac:	0f b6 00             	movzbl (%eax),%eax
80102eaf:	0f b6 c0             	movzbl %al,%eax
80102eb2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  msg.params[1] = shift;
80102eb5:	a1 94 36 11 80       	mov    0x80113694,%eax
80102eba:	89 45 c8             	mov    %eax,-0x38(%ebp)
  handleMessage(&msg);
80102ebd:	83 ec 0c             	sub    $0xc,%esp
80102ec0:	8d 45 c0             	lea    -0x40(%ebp),%eax
80102ec3:	50                   	push   %eax
80102ec4:	e8 a0 57 00 00       	call   80108669 <handleMessage>
80102ec9:	83 c4 10             	add    $0x10,%esp
  c = charcode[shift & (CTL | SHIFT)][data];
80102ecc:	a1 94 36 11 80       	mov    0x80113694,%eax
80102ed1:	83 e0 03             	and    $0x3,%eax
80102ed4:	8b 14 85 20 15 11 80 	mov    -0x7feeeae0(,%eax,4),%edx
80102edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102ede:	01 d0                	add    %edx,%eax
80102ee0:	0f b6 00             	movzbl (%eax),%eax
80102ee3:	0f b6 c0             	movzbl %al,%eax
80102ee6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(shift & CAPSLOCK){
80102ee9:	a1 94 36 11 80       	mov    0x80113694,%eax
80102eee:	83 e0 08             	and    $0x8,%eax
80102ef1:	85 c0                	test   %eax,%eax
80102ef3:	74 22                	je     80102f17 <kbdgetc+0x1ae>
    if('a' <= c && c <= 'z')
80102ef5:	83 7d f0 60          	cmpl   $0x60,-0x10(%ebp)
80102ef9:	76 0c                	jbe    80102f07 <kbdgetc+0x19e>
80102efb:	83 7d f0 7a          	cmpl   $0x7a,-0x10(%ebp)
80102eff:	77 06                	ja     80102f07 <kbdgetc+0x19e>
      c += 'A' - 'a';
80102f01:	83 6d f0 20          	subl   $0x20,-0x10(%ebp)
80102f05:	eb 10                	jmp    80102f17 <kbdgetc+0x1ae>
    else if('A' <= c && c <= 'Z')
80102f07:	83 7d f0 40          	cmpl   $0x40,-0x10(%ebp)
80102f0b:	76 0a                	jbe    80102f17 <kbdgetc+0x1ae>
80102f0d:	83 7d f0 5a          	cmpl   $0x5a,-0x10(%ebp)
80102f11:	77 04                	ja     80102f17 <kbdgetc+0x1ae>
      c += 'a' - 'A';
80102f13:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
  }
  return c;
80102f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80102f1a:	c9                   	leave  
80102f1b:	c3                   	ret    

80102f1c <kbdintr>:

void
kbdintr(void)
{
80102f1c:	55                   	push   %ebp
80102f1d:	89 e5                	mov    %esp,%ebp
80102f1f:	83 ec 08             	sub    $0x8,%esp
//  consoleintr(kbdgetc);
  acquire(&kbdlock);
80102f22:	83 ec 0c             	sub    $0xc,%esp
80102f25:	68 60 36 11 80       	push   $0x80113660
80102f2a:	e8 c1 21 00 00       	call   801050f0 <acquire>
80102f2f:	83 c4 10             	add    $0x10,%esp
  kbdgetc();
80102f32:	e8 32 fe ff ff       	call   80102d69 <kbdgetc>
  release(&kbdlock);
80102f37:	83 ec 0c             	sub    $0xc,%esp
80102f3a:	68 60 36 11 80       	push   $0x80113660
80102f3f:	e8 13 22 00 00       	call   80105157 <release>
80102f44:	83 c4 10             	add    $0x10,%esp
}
80102f47:	90                   	nop
80102f48:	c9                   	leave  
80102f49:	c3                   	ret    

80102f4a <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80102f4a:	55                   	push   %ebp
80102f4b:	89 e5                	mov    %esp,%ebp
80102f4d:	83 ec 14             	sub    $0x14,%esp
80102f50:	8b 45 08             	mov    0x8(%ebp),%eax
80102f53:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102f57:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80102f5b:	89 c2                	mov    %eax,%edx
80102f5d:	ec                   	in     (%dx),%al
80102f5e:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80102f61:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80102f65:	c9                   	leave  
80102f66:	c3                   	ret    

80102f67 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80102f67:	55                   	push   %ebp
80102f68:	89 e5                	mov    %esp,%ebp
80102f6a:	83 ec 08             	sub    $0x8,%esp
80102f6d:	8b 55 08             	mov    0x8(%ebp),%edx
80102f70:	8b 45 0c             	mov    0xc(%ebp),%eax
80102f73:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
80102f77:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102f7a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80102f7e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80102f82:	ee                   	out    %al,(%dx)
}
80102f83:	90                   	nop
80102f84:	c9                   	leave  
80102f85:	c3                   	ret    

80102f86 <readeflags>:
  asm volatile("ltr %0" : : "r" (sel));
}

static inline uint
readeflags(void)
{
80102f86:	55                   	push   %ebp
80102f87:	89 e5                	mov    %esp,%ebp
80102f89:	83 ec 10             	sub    $0x10,%esp
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80102f8c:	9c                   	pushf  
80102f8d:	58                   	pop    %eax
80102f8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
80102f91:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80102f94:	c9                   	leave  
80102f95:	c3                   	ret    

80102f96 <lapicw>:

volatile uint *lapic;  // Initialized in mp.c

static void
lapicw(int index, int value)
{
80102f96:	55                   	push   %ebp
80102f97:	89 e5                	mov    %esp,%ebp
  lapic[index] = value;
80102f99:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
80102f9e:	8b 55 08             	mov    0x8(%ebp),%edx
80102fa1:	c1 e2 02             	shl    $0x2,%edx
80102fa4:	01 c2                	add    %eax,%edx
80102fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
80102fa9:	89 02                	mov    %eax,(%edx)
  lapic[ID];  // wait for write to finish, by reading
80102fab:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
80102fb0:	83 c0 20             	add    $0x20,%eax
80102fb3:	8b 00                	mov    (%eax),%eax
}
80102fb5:	90                   	nop
80102fb6:	5d                   	pop    %ebp
80102fb7:	c3                   	ret    

80102fb8 <lapicinit>:
//PAGEBREAK!

void
lapicinit(void)
{
80102fb8:	55                   	push   %ebp
80102fb9:	89 e5                	mov    %esp,%ebp
  if(!lapic) 
80102fbb:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
80102fc0:	85 c0                	test   %eax,%eax
80102fc2:	0f 84 0b 01 00 00    	je     801030d3 <lapicinit+0x11b>
    return;

  // Enable local APIC; set spurious interrupt vector.
  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
80102fc8:	68 3f 01 00 00       	push   $0x13f
80102fcd:	6a 3c                	push   $0x3c
80102fcf:	e8 c2 ff ff ff       	call   80102f96 <lapicw>
80102fd4:	83 c4 08             	add    $0x8,%esp

  // The timer repeatedly counts down at bus frequency
  // from lapic[TICR] and then issues an interrupt.  
  // If xv6 cared more about precise timekeeping,
  // TICR would be calibrated using an external time source.
  lapicw(TDCR, X1);
80102fd7:	6a 0b                	push   $0xb
80102fd9:	68 f8 00 00 00       	push   $0xf8
80102fde:	e8 b3 ff ff ff       	call   80102f96 <lapicw>
80102fe3:	83 c4 08             	add    $0x8,%esp
  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
80102fe6:	68 20 00 02 00       	push   $0x20020
80102feb:	68 c8 00 00 00       	push   $0xc8
80102ff0:	e8 a1 ff ff ff       	call   80102f96 <lapicw>
80102ff5:	83 c4 08             	add    $0x8,%esp
  lapicw(TICR, 10000000); 
80102ff8:	68 80 96 98 00       	push   $0x989680
80102ffd:	68 e0 00 00 00       	push   $0xe0
80103002:	e8 8f ff ff ff       	call   80102f96 <lapicw>
80103007:	83 c4 08             	add    $0x8,%esp

  // Disable logical interrupt lines.
  lapicw(LINT0, MASKED);
8010300a:	68 00 00 01 00       	push   $0x10000
8010300f:	68 d4 00 00 00       	push   $0xd4
80103014:	e8 7d ff ff ff       	call   80102f96 <lapicw>
80103019:	83 c4 08             	add    $0x8,%esp
  lapicw(LINT1, MASKED);
8010301c:	68 00 00 01 00       	push   $0x10000
80103021:	68 d8 00 00 00       	push   $0xd8
80103026:	e8 6b ff ff ff       	call   80102f96 <lapicw>
8010302b:	83 c4 08             	add    $0x8,%esp

  // Disable performance counter overflow interrupts
  // on machines that provide that interrupt entry.
  if(((lapic[VER]>>16) & 0xFF) >= 4)
8010302e:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
80103033:	83 c0 30             	add    $0x30,%eax
80103036:	8b 00                	mov    (%eax),%eax
80103038:	c1 e8 10             	shr    $0x10,%eax
8010303b:	0f b6 c0             	movzbl %al,%eax
8010303e:	83 f8 03             	cmp    $0x3,%eax
80103041:	76 12                	jbe    80103055 <lapicinit+0x9d>
    lapicw(PCINT, MASKED);
80103043:	68 00 00 01 00       	push   $0x10000
80103048:	68 d0 00 00 00       	push   $0xd0
8010304d:	e8 44 ff ff ff       	call   80102f96 <lapicw>
80103052:	83 c4 08             	add    $0x8,%esp

  // Map error interrupt to IRQ_ERROR.
  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
80103055:	6a 33                	push   $0x33
80103057:	68 dc 00 00 00       	push   $0xdc
8010305c:	e8 35 ff ff ff       	call   80102f96 <lapicw>
80103061:	83 c4 08             	add    $0x8,%esp

  // Clear error status register (requires back-to-back writes).
  lapicw(ESR, 0);
80103064:	6a 00                	push   $0x0
80103066:	68 a0 00 00 00       	push   $0xa0
8010306b:	e8 26 ff ff ff       	call   80102f96 <lapicw>
80103070:	83 c4 08             	add    $0x8,%esp
  lapicw(ESR, 0);
80103073:	6a 00                	push   $0x0
80103075:	68 a0 00 00 00       	push   $0xa0
8010307a:	e8 17 ff ff ff       	call   80102f96 <lapicw>
8010307f:	83 c4 08             	add    $0x8,%esp

  // Ack any outstanding interrupts.
  lapicw(EOI, 0);
80103082:	6a 00                	push   $0x0
80103084:	6a 2c                	push   $0x2c
80103086:	e8 0b ff ff ff       	call   80102f96 <lapicw>
8010308b:	83 c4 08             	add    $0x8,%esp

  // Send an Init Level De-Assert to synchronise arbitration ID's.
  lapicw(ICRHI, 0);
8010308e:	6a 00                	push   $0x0
80103090:	68 c4 00 00 00       	push   $0xc4
80103095:	e8 fc fe ff ff       	call   80102f96 <lapicw>
8010309a:	83 c4 08             	add    $0x8,%esp
  lapicw(ICRLO, BCAST | INIT | LEVEL);
8010309d:	68 00 85 08 00       	push   $0x88500
801030a2:	68 c0 00 00 00       	push   $0xc0
801030a7:	e8 ea fe ff ff       	call   80102f96 <lapicw>
801030ac:	83 c4 08             	add    $0x8,%esp
  while(lapic[ICRLO] & DELIVS)
801030af:	90                   	nop
801030b0:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
801030b5:	05 00 03 00 00       	add    $0x300,%eax
801030ba:	8b 00                	mov    (%eax),%eax
801030bc:	25 00 10 00 00       	and    $0x1000,%eax
801030c1:	85 c0                	test   %eax,%eax
801030c3:	75 eb                	jne    801030b0 <lapicinit+0xf8>
    ;

  // Enable interrupts on the APIC (but not on the processor).
  lapicw(TPR, 0);
801030c5:	6a 00                	push   $0x0
801030c7:	6a 20                	push   $0x20
801030c9:	e8 c8 fe ff ff       	call   80102f96 <lapicw>
801030ce:	83 c4 08             	add    $0x8,%esp
801030d1:	eb 01                	jmp    801030d4 <lapicinit+0x11c>

void
lapicinit(void)
{
  if(!lapic) 
    return;
801030d3:	90                   	nop
  while(lapic[ICRLO] & DELIVS)
    ;

  // Enable interrupts on the APIC (but not on the processor).
  lapicw(TPR, 0);
}
801030d4:	c9                   	leave  
801030d5:	c3                   	ret    

801030d6 <cpunum>:

int
cpunum(void)
{
801030d6:	55                   	push   %ebp
801030d7:	89 e5                	mov    %esp,%ebp
801030d9:	83 ec 08             	sub    $0x8,%esp
  // Cannot call cpu when interrupts are enabled:
  // result not guaranteed to last long enough to be used!
  // Would prefer to panic but even printing is chancy here:
  // almost everything, including cprintf and panic, calls cpu,
  // often indirectly through acquire and release.
  if(readeflags()&FL_IF){
801030dc:	e8 a5 fe ff ff       	call   80102f86 <readeflags>
801030e1:	25 00 02 00 00       	and    $0x200,%eax
801030e6:	85 c0                	test   %eax,%eax
801030e8:	74 26                	je     80103110 <cpunum+0x3a>
    static int n;
    if(n++ == 0)
801030ea:	a1 98 36 11 80       	mov    0x80113698,%eax
801030ef:	8d 50 01             	lea    0x1(%eax),%edx
801030f2:	89 15 98 36 11 80    	mov    %edx,0x80113698
801030f8:	85 c0                	test   %eax,%eax
801030fa:	75 14                	jne    80103110 <cpunum+0x3a>
      cprintf("cpu called from %x with interrupts enabled\n",
801030fc:	8b 45 04             	mov    0x4(%ebp),%eax
801030ff:	83 ec 08             	sub    $0x8,%esp
80103102:	50                   	push   %eax
80103103:	68 4c c4 10 80       	push   $0x8010c44c
80103108:	e8 b9 d2 ff ff       	call   801003c6 <cprintf>
8010310d:	83 c4 10             	add    $0x10,%esp
        __builtin_return_address(0));
  }

  if(lapic)
80103110:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
80103115:	85 c0                	test   %eax,%eax
80103117:	74 0f                	je     80103128 <cpunum+0x52>
    return lapic[ID]>>24;
80103119:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
8010311e:	83 c0 20             	add    $0x20,%eax
80103121:	8b 00                	mov    (%eax),%eax
80103123:	c1 e8 18             	shr    $0x18,%eax
80103126:	eb 05                	jmp    8010312d <cpunum+0x57>
  return 0;
80103128:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010312d:	c9                   	leave  
8010312e:	c3                   	ret    

8010312f <lapiceoi>:

// Acknowledge interrupt.
void
lapiceoi(void)
{
8010312f:	55                   	push   %ebp
80103130:	89 e5                	mov    %esp,%ebp
  if(lapic)
80103132:	a1 5c a3 11 80       	mov    0x8011a35c,%eax
80103137:	85 c0                	test   %eax,%eax
80103139:	74 0c                	je     80103147 <lapiceoi+0x18>
    lapicw(EOI, 0);
8010313b:	6a 00                	push   $0x0
8010313d:	6a 2c                	push   $0x2c
8010313f:	e8 52 fe ff ff       	call   80102f96 <lapicw>
80103144:	83 c4 08             	add    $0x8,%esp
}
80103147:	90                   	nop
80103148:	c9                   	leave  
80103149:	c3                   	ret    

8010314a <microdelay>:

// Spin for a given number of microseconds.
// On real hardware would want to tune this dynamically.
void
microdelay(int us)
{
8010314a:	55                   	push   %ebp
8010314b:	89 e5                	mov    %esp,%ebp
}
8010314d:	90                   	nop
8010314e:	5d                   	pop    %ebp
8010314f:	c3                   	ret    

80103150 <lapicstartap>:

// Start additional processor running entry code at addr.
// See Appendix B of MultiProcessor Specification.
void
lapicstartap(uchar apicid, uint addr)
{
80103150:	55                   	push   %ebp
80103151:	89 e5                	mov    %esp,%ebp
80103153:	83 ec 14             	sub    $0x14,%esp
80103156:	8b 45 08             	mov    0x8(%ebp),%eax
80103159:	88 45 ec             	mov    %al,-0x14(%ebp)
  ushort *wrv;
  
  // "The BSP must initialize CMOS shutdown code to 0AH
  // and the warm reset vector (DWORD based at 40:67) to point at
  // the AP startup code prior to the [universal startup algorithm]."
  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
8010315c:	6a 0f                	push   $0xf
8010315e:	6a 70                	push   $0x70
80103160:	e8 02 fe ff ff       	call   80102f67 <outb>
80103165:	83 c4 08             	add    $0x8,%esp
  outb(CMOS_PORT+1, 0x0A);
80103168:	6a 0a                	push   $0xa
8010316a:	6a 71                	push   $0x71
8010316c:	e8 f6 fd ff ff       	call   80102f67 <outb>
80103171:	83 c4 08             	add    $0x8,%esp
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
80103174:	c7 45 f8 67 04 00 80 	movl   $0x80000467,-0x8(%ebp)
  wrv[0] = 0;
8010317b:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010317e:	66 c7 00 00 00       	movw   $0x0,(%eax)
  wrv[1] = addr >> 4;
80103183:	8b 45 f8             	mov    -0x8(%ebp),%eax
80103186:	83 c0 02             	add    $0x2,%eax
80103189:	8b 55 0c             	mov    0xc(%ebp),%edx
8010318c:	c1 ea 04             	shr    $0x4,%edx
8010318f:	66 89 10             	mov    %dx,(%eax)

  // "Universal startup algorithm."
  // Send INIT (level-triggered) interrupt to reset other CPU.
  lapicw(ICRHI, apicid<<24);
80103192:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
80103196:	c1 e0 18             	shl    $0x18,%eax
80103199:	50                   	push   %eax
8010319a:	68 c4 00 00 00       	push   $0xc4
8010319f:	e8 f2 fd ff ff       	call   80102f96 <lapicw>
801031a4:	83 c4 08             	add    $0x8,%esp
  lapicw(ICRLO, INIT | LEVEL | ASSERT);
801031a7:	68 00 c5 00 00       	push   $0xc500
801031ac:	68 c0 00 00 00       	push   $0xc0
801031b1:	e8 e0 fd ff ff       	call   80102f96 <lapicw>
801031b6:	83 c4 08             	add    $0x8,%esp
  microdelay(200);
801031b9:	68 c8 00 00 00       	push   $0xc8
801031be:	e8 87 ff ff ff       	call   8010314a <microdelay>
801031c3:	83 c4 04             	add    $0x4,%esp
  lapicw(ICRLO, INIT | LEVEL);
801031c6:	68 00 85 00 00       	push   $0x8500
801031cb:	68 c0 00 00 00       	push   $0xc0
801031d0:	e8 c1 fd ff ff       	call   80102f96 <lapicw>
801031d5:	83 c4 08             	add    $0x8,%esp
  microdelay(100);    // should be 10ms, but too slow in Bochs!
801031d8:	6a 64                	push   $0x64
801031da:	e8 6b ff ff ff       	call   8010314a <microdelay>
801031df:	83 c4 04             	add    $0x4,%esp
  // Send startup IPI (twice!) to enter code.
  // Regular hardware is supposed to only accept a STARTUP
  // when it is in the halted state due to an INIT.  So the second
  // should be ignored, but it is part of the official Intel algorithm.
  // Bochs complains about the second one.  Too bad for Bochs.
  for(i = 0; i < 2; i++){
801031e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
801031e9:	eb 3d                	jmp    80103228 <lapicstartap+0xd8>
    lapicw(ICRHI, apicid<<24);
801031eb:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
801031ef:	c1 e0 18             	shl    $0x18,%eax
801031f2:	50                   	push   %eax
801031f3:	68 c4 00 00 00       	push   $0xc4
801031f8:	e8 99 fd ff ff       	call   80102f96 <lapicw>
801031fd:	83 c4 08             	add    $0x8,%esp
    lapicw(ICRLO, STARTUP | (addr>>12));
80103200:	8b 45 0c             	mov    0xc(%ebp),%eax
80103203:	c1 e8 0c             	shr    $0xc,%eax
80103206:	80 cc 06             	or     $0x6,%ah
80103209:	50                   	push   %eax
8010320a:	68 c0 00 00 00       	push   $0xc0
8010320f:	e8 82 fd ff ff       	call   80102f96 <lapicw>
80103214:	83 c4 08             	add    $0x8,%esp
    microdelay(200);
80103217:	68 c8 00 00 00       	push   $0xc8
8010321c:	e8 29 ff ff ff       	call   8010314a <microdelay>
80103221:	83 c4 04             	add    $0x4,%esp
  // Send startup IPI (twice!) to enter code.
  // Regular hardware is supposed to only accept a STARTUP
  // when it is in the halted state due to an INIT.  So the second
  // should be ignored, but it is part of the official Intel algorithm.
  // Bochs complains about the second one.  Too bad for Bochs.
  for(i = 0; i < 2; i++){
80103224:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80103228:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
8010322c:	7e bd                	jle    801031eb <lapicstartap+0x9b>
    lapicw(ICRHI, apicid<<24);
    lapicw(ICRLO, STARTUP | (addr>>12));
    microdelay(200);
  }
}
8010322e:	90                   	nop
8010322f:	c9                   	leave  
80103230:	c3                   	ret    

80103231 <cmos_read>:
#define DAY     0x07
#define MONTH   0x08
#define YEAR    0x09

static uint cmos_read(uint reg)
{
80103231:	55                   	push   %ebp
80103232:	89 e5                	mov    %esp,%ebp
  outb(CMOS_PORT,  reg);
80103234:	8b 45 08             	mov    0x8(%ebp),%eax
80103237:	0f b6 c0             	movzbl %al,%eax
8010323a:	50                   	push   %eax
8010323b:	6a 70                	push   $0x70
8010323d:	e8 25 fd ff ff       	call   80102f67 <outb>
80103242:	83 c4 08             	add    $0x8,%esp
  microdelay(200);
80103245:	68 c8 00 00 00       	push   $0xc8
8010324a:	e8 fb fe ff ff       	call   8010314a <microdelay>
8010324f:	83 c4 04             	add    $0x4,%esp

  return inb(CMOS_RETURN);
80103252:	6a 71                	push   $0x71
80103254:	e8 f1 fc ff ff       	call   80102f4a <inb>
80103259:	83 c4 04             	add    $0x4,%esp
8010325c:	0f b6 c0             	movzbl %al,%eax
}
8010325f:	c9                   	leave  
80103260:	c3                   	ret    

80103261 <fill_rtcdate>:

static void fill_rtcdate(struct rtcdate *r)
{
80103261:	55                   	push   %ebp
80103262:	89 e5                	mov    %esp,%ebp
  r->second = cmos_read(SECS);
80103264:	6a 00                	push   $0x0
80103266:	e8 c6 ff ff ff       	call   80103231 <cmos_read>
8010326b:	83 c4 04             	add    $0x4,%esp
8010326e:	89 c2                	mov    %eax,%edx
80103270:	8b 45 08             	mov    0x8(%ebp),%eax
80103273:	89 10                	mov    %edx,(%eax)
  r->minute = cmos_read(MINS);
80103275:	6a 02                	push   $0x2
80103277:	e8 b5 ff ff ff       	call   80103231 <cmos_read>
8010327c:	83 c4 04             	add    $0x4,%esp
8010327f:	89 c2                	mov    %eax,%edx
80103281:	8b 45 08             	mov    0x8(%ebp),%eax
80103284:	89 50 04             	mov    %edx,0x4(%eax)
  r->hour   = cmos_read(HOURS);
80103287:	6a 04                	push   $0x4
80103289:	e8 a3 ff ff ff       	call   80103231 <cmos_read>
8010328e:	83 c4 04             	add    $0x4,%esp
80103291:	89 c2                	mov    %eax,%edx
80103293:	8b 45 08             	mov    0x8(%ebp),%eax
80103296:	89 50 08             	mov    %edx,0x8(%eax)
  r->day    = cmos_read(DAY);
80103299:	6a 07                	push   $0x7
8010329b:	e8 91 ff ff ff       	call   80103231 <cmos_read>
801032a0:	83 c4 04             	add    $0x4,%esp
801032a3:	89 c2                	mov    %eax,%edx
801032a5:	8b 45 08             	mov    0x8(%ebp),%eax
801032a8:	89 50 0c             	mov    %edx,0xc(%eax)
  r->month  = cmos_read(MONTH);
801032ab:	6a 08                	push   $0x8
801032ad:	e8 7f ff ff ff       	call   80103231 <cmos_read>
801032b2:	83 c4 04             	add    $0x4,%esp
801032b5:	89 c2                	mov    %eax,%edx
801032b7:	8b 45 08             	mov    0x8(%ebp),%eax
801032ba:	89 50 10             	mov    %edx,0x10(%eax)
  r->year   = cmos_read(YEAR);
801032bd:	6a 09                	push   $0x9
801032bf:	e8 6d ff ff ff       	call   80103231 <cmos_read>
801032c4:	83 c4 04             	add    $0x4,%esp
801032c7:	89 c2                	mov    %eax,%edx
801032c9:	8b 45 08             	mov    0x8(%ebp),%eax
801032cc:	89 50 14             	mov    %edx,0x14(%eax)
}
801032cf:	90                   	nop
801032d0:	c9                   	leave  
801032d1:	c3                   	ret    

801032d2 <cmostime>:

// qemu seems to use 24-hour GWT and the values are BCD encoded
void cmostime(struct rtcdate *r)
{
801032d2:	55                   	push   %ebp
801032d3:	89 e5                	mov    %esp,%ebp
801032d5:	83 ec 48             	sub    $0x48,%esp
  struct rtcdate t1, t2;
  int sb, bcd;

  sb = cmos_read(CMOS_STATB);
801032d8:	6a 0b                	push   $0xb
801032da:	e8 52 ff ff ff       	call   80103231 <cmos_read>
801032df:	83 c4 04             	add    $0x4,%esp
801032e2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bcd = (sb & (1 << 2)) == 0;
801032e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801032e8:	83 e0 04             	and    $0x4,%eax
801032eb:	85 c0                	test   %eax,%eax
801032ed:	0f 94 c0             	sete   %al
801032f0:	0f b6 c0             	movzbl %al,%eax
801032f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // make sure CMOS doesn't modify time while we read it
  for (;;) {
    fill_rtcdate(&t1);
801032f6:	8d 45 d8             	lea    -0x28(%ebp),%eax
801032f9:	50                   	push   %eax
801032fa:	e8 62 ff ff ff       	call   80103261 <fill_rtcdate>
801032ff:	83 c4 04             	add    $0x4,%esp
    if (cmos_read(CMOS_STATA) & CMOS_UIP)
80103302:	6a 0a                	push   $0xa
80103304:	e8 28 ff ff ff       	call   80103231 <cmos_read>
80103309:	83 c4 04             	add    $0x4,%esp
8010330c:	25 80 00 00 00       	and    $0x80,%eax
80103311:	85 c0                	test   %eax,%eax
80103313:	75 27                	jne    8010333c <cmostime+0x6a>
        continue;
    fill_rtcdate(&t2);
80103315:	8d 45 c0             	lea    -0x40(%ebp),%eax
80103318:	50                   	push   %eax
80103319:	e8 43 ff ff ff       	call   80103261 <fill_rtcdate>
8010331e:	83 c4 04             	add    $0x4,%esp
    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
80103321:	83 ec 04             	sub    $0x4,%esp
80103324:	6a 18                	push   $0x18
80103326:	8d 45 c0             	lea    -0x40(%ebp),%eax
80103329:	50                   	push   %eax
8010332a:	8d 45 d8             	lea    -0x28(%ebp),%eax
8010332d:	50                   	push   %eax
8010332e:	e8 87 20 00 00       	call   801053ba <memcmp>
80103333:	83 c4 10             	add    $0x10,%esp
80103336:	85 c0                	test   %eax,%eax
80103338:	74 05                	je     8010333f <cmostime+0x6d>
8010333a:	eb ba                	jmp    801032f6 <cmostime+0x24>

  // make sure CMOS doesn't modify time while we read it
  for (;;) {
    fill_rtcdate(&t1);
    if (cmos_read(CMOS_STATA) & CMOS_UIP)
        continue;
8010333c:	90                   	nop
    fill_rtcdate(&t2);
    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
      break;
  }
8010333d:	eb b7                	jmp    801032f6 <cmostime+0x24>
    fill_rtcdate(&t1);
    if (cmos_read(CMOS_STATA) & CMOS_UIP)
        continue;
    fill_rtcdate(&t2);
    if (memcmp(&t1, &t2, sizeof(t1)) == 0)
      break;
8010333f:	90                   	nop
  }

  // convert
  if (bcd) {
80103340:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80103344:	0f 84 b4 00 00 00    	je     801033fe <cmostime+0x12c>
#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
    CONV(second);
8010334a:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010334d:	c1 e8 04             	shr    $0x4,%eax
80103350:	89 c2                	mov    %eax,%edx
80103352:	89 d0                	mov    %edx,%eax
80103354:	c1 e0 02             	shl    $0x2,%eax
80103357:	01 d0                	add    %edx,%eax
80103359:	01 c0                	add    %eax,%eax
8010335b:	89 c2                	mov    %eax,%edx
8010335d:	8b 45 d8             	mov    -0x28(%ebp),%eax
80103360:	83 e0 0f             	and    $0xf,%eax
80103363:	01 d0                	add    %edx,%eax
80103365:	89 45 d8             	mov    %eax,-0x28(%ebp)
    CONV(minute);
80103368:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010336b:	c1 e8 04             	shr    $0x4,%eax
8010336e:	89 c2                	mov    %eax,%edx
80103370:	89 d0                	mov    %edx,%eax
80103372:	c1 e0 02             	shl    $0x2,%eax
80103375:	01 d0                	add    %edx,%eax
80103377:	01 c0                	add    %eax,%eax
80103379:	89 c2                	mov    %eax,%edx
8010337b:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010337e:	83 e0 0f             	and    $0xf,%eax
80103381:	01 d0                	add    %edx,%eax
80103383:	89 45 dc             	mov    %eax,-0x24(%ebp)
    CONV(hour  );
80103386:	8b 45 e0             	mov    -0x20(%ebp),%eax
80103389:	c1 e8 04             	shr    $0x4,%eax
8010338c:	89 c2                	mov    %eax,%edx
8010338e:	89 d0                	mov    %edx,%eax
80103390:	c1 e0 02             	shl    $0x2,%eax
80103393:	01 d0                	add    %edx,%eax
80103395:	01 c0                	add    %eax,%eax
80103397:	89 c2                	mov    %eax,%edx
80103399:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010339c:	83 e0 0f             	and    $0xf,%eax
8010339f:	01 d0                	add    %edx,%eax
801033a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    CONV(day   );
801033a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801033a7:	c1 e8 04             	shr    $0x4,%eax
801033aa:	89 c2                	mov    %eax,%edx
801033ac:	89 d0                	mov    %edx,%eax
801033ae:	c1 e0 02             	shl    $0x2,%eax
801033b1:	01 d0                	add    %edx,%eax
801033b3:	01 c0                	add    %eax,%eax
801033b5:	89 c2                	mov    %eax,%edx
801033b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801033ba:	83 e0 0f             	and    $0xf,%eax
801033bd:	01 d0                	add    %edx,%eax
801033bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    CONV(month );
801033c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
801033c5:	c1 e8 04             	shr    $0x4,%eax
801033c8:	89 c2                	mov    %eax,%edx
801033ca:	89 d0                	mov    %edx,%eax
801033cc:	c1 e0 02             	shl    $0x2,%eax
801033cf:	01 d0                	add    %edx,%eax
801033d1:	01 c0                	add    %eax,%eax
801033d3:	89 c2                	mov    %eax,%edx
801033d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
801033d8:	83 e0 0f             	and    $0xf,%eax
801033db:	01 d0                	add    %edx,%eax
801033dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    CONV(year  );
801033e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
801033e3:	c1 e8 04             	shr    $0x4,%eax
801033e6:	89 c2                	mov    %eax,%edx
801033e8:	89 d0                	mov    %edx,%eax
801033ea:	c1 e0 02             	shl    $0x2,%eax
801033ed:	01 d0                	add    %edx,%eax
801033ef:	01 c0                	add    %eax,%eax
801033f1:	89 c2                	mov    %eax,%edx
801033f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
801033f6:	83 e0 0f             	and    $0xf,%eax
801033f9:	01 d0                	add    %edx,%eax
801033fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
#undef     CONV
  }

  *r = t1;
801033fe:	8b 45 08             	mov    0x8(%ebp),%eax
80103401:	8b 55 d8             	mov    -0x28(%ebp),%edx
80103404:	89 10                	mov    %edx,(%eax)
80103406:	8b 55 dc             	mov    -0x24(%ebp),%edx
80103409:	89 50 04             	mov    %edx,0x4(%eax)
8010340c:	8b 55 e0             	mov    -0x20(%ebp),%edx
8010340f:	89 50 08             	mov    %edx,0x8(%eax)
80103412:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80103415:	89 50 0c             	mov    %edx,0xc(%eax)
80103418:	8b 55 e8             	mov    -0x18(%ebp),%edx
8010341b:	89 50 10             	mov    %edx,0x10(%eax)
8010341e:	8b 55 ec             	mov    -0x14(%ebp),%edx
80103421:	89 50 14             	mov    %edx,0x14(%eax)
  r->year += 2000;
80103424:	8b 45 08             	mov    0x8(%ebp),%eax
80103427:	8b 40 14             	mov    0x14(%eax),%eax
8010342a:	8d 90 d0 07 00 00    	lea    0x7d0(%eax),%edx
80103430:	8b 45 08             	mov    0x8(%ebp),%eax
80103433:	89 50 14             	mov    %edx,0x14(%eax)
}
80103436:	90                   	nop
80103437:	c9                   	leave  
80103438:	c3                   	ret    

80103439 <initlog>:
static void recover_from_log(void);
static void commit();

void
initlog(void)
{
80103439:	55                   	push   %ebp
8010343a:	89 e5                	mov    %esp,%ebp
8010343c:	83 ec 18             	sub    $0x18,%esp
  if (sizeof(struct logheader) >= BSIZE)
    panic("initlog: too big logheader");

  struct superblock sb;
  initlock(&log.lock, "log");
8010343f:	83 ec 08             	sub    $0x8,%esp
80103442:	68 78 c4 10 80       	push   $0x8010c478
80103447:	68 60 a3 11 80       	push   $0x8011a360
8010344c:	e8 7d 1c 00 00       	call   801050ce <initlock>
80103451:	83 c4 10             	add    $0x10,%esp
  readsb(ROOTDEV, &sb);
80103454:	83 ec 08             	sub    $0x8,%esp
80103457:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010345a:	50                   	push   %eax
8010345b:	6a 01                	push   $0x1
8010345d:	e8 ea de ff ff       	call   8010134c <readsb>
80103462:	83 c4 10             	add    $0x10,%esp
  log.start = sb.size - sb.nlog;
80103465:	8b 55 e8             	mov    -0x18(%ebp),%edx
80103468:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010346b:	29 c2                	sub    %eax,%edx
8010346d:	89 d0                	mov    %edx,%eax
8010346f:	a3 94 a3 11 80       	mov    %eax,0x8011a394
  log.size = sb.nlog;
80103474:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103477:	a3 98 a3 11 80       	mov    %eax,0x8011a398
  log.dev = ROOTDEV;
8010347c:	c7 05 a4 a3 11 80 01 	movl   $0x1,0x8011a3a4
80103483:	00 00 00 
  recover_from_log();
80103486:	e8 b2 01 00 00       	call   8010363d <recover_from_log>
}
8010348b:	90                   	nop
8010348c:	c9                   	leave  
8010348d:	c3                   	ret    

8010348e <install_trans>:

// Copy committed blocks from log to their home location
static void 
install_trans(void)
{
8010348e:	55                   	push   %ebp
8010348f:	89 e5                	mov    %esp,%ebp
80103491:	83 ec 18             	sub    $0x18,%esp
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80103494:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010349b:	e9 95 00 00 00       	jmp    80103535 <install_trans+0xa7>
    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
801034a0:	8b 15 94 a3 11 80    	mov    0x8011a394,%edx
801034a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801034a9:	01 d0                	add    %edx,%eax
801034ab:	83 c0 01             	add    $0x1,%eax
801034ae:	89 c2                	mov    %eax,%edx
801034b0:	a1 a4 a3 11 80       	mov    0x8011a3a4,%eax
801034b5:	83 ec 08             	sub    $0x8,%esp
801034b8:	52                   	push   %edx
801034b9:	50                   	push   %eax
801034ba:	e8 f7 cc ff ff       	call   801001b6 <bread>
801034bf:	83 c4 10             	add    $0x10,%esp
801034c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
801034c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801034c8:	83 c0 10             	add    $0x10,%eax
801034cb:	8b 04 85 6c a3 11 80 	mov    -0x7fee5c94(,%eax,4),%eax
801034d2:	89 c2                	mov    %eax,%edx
801034d4:	a1 a4 a3 11 80       	mov    0x8011a3a4,%eax
801034d9:	83 ec 08             	sub    $0x8,%esp
801034dc:	52                   	push   %edx
801034dd:	50                   	push   %eax
801034de:	e8 d3 cc ff ff       	call   801001b6 <bread>
801034e3:	83 c4 10             	add    $0x10,%esp
801034e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
801034e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801034ec:	8d 50 18             	lea    0x18(%eax),%edx
801034ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
801034f2:	83 c0 18             	add    $0x18,%eax
801034f5:	83 ec 04             	sub    $0x4,%esp
801034f8:	68 00 02 00 00       	push   $0x200
801034fd:	52                   	push   %edx
801034fe:	50                   	push   %eax
801034ff:	e8 0e 1f 00 00       	call   80105412 <memmove>
80103504:	83 c4 10             	add    $0x10,%esp
    bwrite(dbuf);  // write dst to disk
80103507:	83 ec 0c             	sub    $0xc,%esp
8010350a:	ff 75 ec             	pushl  -0x14(%ebp)
8010350d:	e8 dd cc ff ff       	call   801001ef <bwrite>
80103512:	83 c4 10             	add    $0x10,%esp
    brelse(lbuf); 
80103515:	83 ec 0c             	sub    $0xc,%esp
80103518:	ff 75 f0             	pushl  -0x10(%ebp)
8010351b:	e8 0e cd ff ff       	call   8010022e <brelse>
80103520:	83 c4 10             	add    $0x10,%esp
    brelse(dbuf);
80103523:	83 ec 0c             	sub    $0xc,%esp
80103526:	ff 75 ec             	pushl  -0x14(%ebp)
80103529:	e8 00 cd ff ff       	call   8010022e <brelse>
8010352e:	83 c4 10             	add    $0x10,%esp
static void 
install_trans(void)
{
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80103531:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80103535:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
8010353a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010353d:	0f 8f 5d ff ff ff    	jg     801034a0 <install_trans+0x12>
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
    bwrite(dbuf);  // write dst to disk
    brelse(lbuf); 
    brelse(dbuf);
  }
}
80103543:	90                   	nop
80103544:	c9                   	leave  
80103545:	c3                   	ret    

80103546 <read_head>:

// Read the log header from disk into the in-memory log header
static void
read_head(void)
{
80103546:	55                   	push   %ebp
80103547:	89 e5                	mov    %esp,%ebp
80103549:	83 ec 18             	sub    $0x18,%esp
  struct buf *buf = bread(log.dev, log.start);
8010354c:	a1 94 a3 11 80       	mov    0x8011a394,%eax
80103551:	89 c2                	mov    %eax,%edx
80103553:	a1 a4 a3 11 80       	mov    0x8011a3a4,%eax
80103558:	83 ec 08             	sub    $0x8,%esp
8010355b:	52                   	push   %edx
8010355c:	50                   	push   %eax
8010355d:	e8 54 cc ff ff       	call   801001b6 <bread>
80103562:	83 c4 10             	add    $0x10,%esp
80103565:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct logheader *lh = (struct logheader *) (buf->data);
80103568:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010356b:	83 c0 18             	add    $0x18,%eax
8010356e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int i;
  log.lh.n = lh->n;
80103571:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103574:	8b 00                	mov    (%eax),%eax
80103576:	a3 a8 a3 11 80       	mov    %eax,0x8011a3a8
  for (i = 0; i < log.lh.n; i++) {
8010357b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103582:	eb 1b                	jmp    8010359f <read_head+0x59>
    log.lh.sector[i] = lh->sector[i];
80103584:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103587:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010358a:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
8010358e:	8b 55 f4             	mov    -0xc(%ebp),%edx
80103591:	83 c2 10             	add    $0x10,%edx
80103594:	89 04 95 6c a3 11 80 	mov    %eax,-0x7fee5c94(,%edx,4)
{
  struct buf *buf = bread(log.dev, log.start);
  struct logheader *lh = (struct logheader *) (buf->data);
  int i;
  log.lh.n = lh->n;
  for (i = 0; i < log.lh.n; i++) {
8010359b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010359f:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
801035a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801035a7:	7f db                	jg     80103584 <read_head+0x3e>
    log.lh.sector[i] = lh->sector[i];
  }
  brelse(buf);
801035a9:	83 ec 0c             	sub    $0xc,%esp
801035ac:	ff 75 f0             	pushl  -0x10(%ebp)
801035af:	e8 7a cc ff ff       	call   8010022e <brelse>
801035b4:	83 c4 10             	add    $0x10,%esp
}
801035b7:	90                   	nop
801035b8:	c9                   	leave  
801035b9:	c3                   	ret    

801035ba <write_head>:
// Write in-memory log header to disk.
// This is the true point at which the
// current transaction commits.
static void
write_head(void)
{
801035ba:	55                   	push   %ebp
801035bb:	89 e5                	mov    %esp,%ebp
801035bd:	83 ec 18             	sub    $0x18,%esp
  struct buf *buf = bread(log.dev, log.start);
801035c0:	a1 94 a3 11 80       	mov    0x8011a394,%eax
801035c5:	89 c2                	mov    %eax,%edx
801035c7:	a1 a4 a3 11 80       	mov    0x8011a3a4,%eax
801035cc:	83 ec 08             	sub    $0x8,%esp
801035cf:	52                   	push   %edx
801035d0:	50                   	push   %eax
801035d1:	e8 e0 cb ff ff       	call   801001b6 <bread>
801035d6:	83 c4 10             	add    $0x10,%esp
801035d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct logheader *hb = (struct logheader *) (buf->data);
801035dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801035df:	83 c0 18             	add    $0x18,%eax
801035e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int i;
  hb->n = log.lh.n;
801035e5:	8b 15 a8 a3 11 80    	mov    0x8011a3a8,%edx
801035eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
801035ee:	89 10                	mov    %edx,(%eax)
  for (i = 0; i < log.lh.n; i++) {
801035f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801035f7:	eb 1b                	jmp    80103614 <write_head+0x5a>
    hb->sector[i] = log.lh.sector[i];
801035f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801035fc:	83 c0 10             	add    $0x10,%eax
801035ff:	8b 0c 85 6c a3 11 80 	mov    -0x7fee5c94(,%eax,4),%ecx
80103606:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103609:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010360c:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
{
  struct buf *buf = bread(log.dev, log.start);
  struct logheader *hb = (struct logheader *) (buf->data);
  int i;
  hb->n = log.lh.n;
  for (i = 0; i < log.lh.n; i++) {
80103610:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80103614:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
80103619:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010361c:	7f db                	jg     801035f9 <write_head+0x3f>
    hb->sector[i] = log.lh.sector[i];
  }
  bwrite(buf);
8010361e:	83 ec 0c             	sub    $0xc,%esp
80103621:	ff 75 f0             	pushl  -0x10(%ebp)
80103624:	e8 c6 cb ff ff       	call   801001ef <bwrite>
80103629:	83 c4 10             	add    $0x10,%esp
  brelse(buf);
8010362c:	83 ec 0c             	sub    $0xc,%esp
8010362f:	ff 75 f0             	pushl  -0x10(%ebp)
80103632:	e8 f7 cb ff ff       	call   8010022e <brelse>
80103637:	83 c4 10             	add    $0x10,%esp
}
8010363a:	90                   	nop
8010363b:	c9                   	leave  
8010363c:	c3                   	ret    

8010363d <recover_from_log>:

static void
recover_from_log(void)
{
8010363d:	55                   	push   %ebp
8010363e:	89 e5                	mov    %esp,%ebp
80103640:	83 ec 08             	sub    $0x8,%esp
  read_head();      
80103643:	e8 fe fe ff ff       	call   80103546 <read_head>
  install_trans(); // if committed, copy from log to disk
80103648:	e8 41 fe ff ff       	call   8010348e <install_trans>
  log.lh.n = 0;
8010364d:	c7 05 a8 a3 11 80 00 	movl   $0x0,0x8011a3a8
80103654:	00 00 00 
  write_head(); // clear the log
80103657:	e8 5e ff ff ff       	call   801035ba <write_head>
}
8010365c:	90                   	nop
8010365d:	c9                   	leave  
8010365e:	c3                   	ret    

8010365f <begin_op>:

// called at the start of each FS system call.
void
begin_op(void)
{
8010365f:	55                   	push   %ebp
80103660:	89 e5                	mov    %esp,%ebp
80103662:	83 ec 08             	sub    $0x8,%esp
  acquire(&log.lock);
80103665:	83 ec 0c             	sub    $0xc,%esp
80103668:	68 60 a3 11 80       	push   $0x8011a360
8010366d:	e8 7e 1a 00 00       	call   801050f0 <acquire>
80103672:	83 c4 10             	add    $0x10,%esp
  while(1){
    if(log.committing){
80103675:	a1 a0 a3 11 80       	mov    0x8011a3a0,%eax
8010367a:	85 c0                	test   %eax,%eax
8010367c:	74 17                	je     80103695 <begin_op+0x36>
      sleep(&log, &log.lock);
8010367e:	83 ec 08             	sub    $0x8,%esp
80103681:	68 60 a3 11 80       	push   $0x8011a360
80103686:	68 60 a3 11 80       	push   $0x8011a360
8010368b:	e8 67 17 00 00       	call   80104df7 <sleep>
80103690:	83 c4 10             	add    $0x10,%esp
80103693:	eb e0                	jmp    80103675 <begin_op+0x16>
    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
80103695:	8b 0d a8 a3 11 80    	mov    0x8011a3a8,%ecx
8010369b:	a1 9c a3 11 80       	mov    0x8011a39c,%eax
801036a0:	8d 50 01             	lea    0x1(%eax),%edx
801036a3:	89 d0                	mov    %edx,%eax
801036a5:	c1 e0 02             	shl    $0x2,%eax
801036a8:	01 d0                	add    %edx,%eax
801036aa:	01 c0                	add    %eax,%eax
801036ac:	01 c8                	add    %ecx,%eax
801036ae:	83 f8 1e             	cmp    $0x1e,%eax
801036b1:	7e 17                	jle    801036ca <begin_op+0x6b>
      // this op might exhaust log space; wait for commit.
      sleep(&log, &log.lock);
801036b3:	83 ec 08             	sub    $0x8,%esp
801036b6:	68 60 a3 11 80       	push   $0x8011a360
801036bb:	68 60 a3 11 80       	push   $0x8011a360
801036c0:	e8 32 17 00 00       	call   80104df7 <sleep>
801036c5:	83 c4 10             	add    $0x10,%esp
801036c8:	eb ab                	jmp    80103675 <begin_op+0x16>
    } else {
      log.outstanding += 1;
801036ca:	a1 9c a3 11 80       	mov    0x8011a39c,%eax
801036cf:	83 c0 01             	add    $0x1,%eax
801036d2:	a3 9c a3 11 80       	mov    %eax,0x8011a39c
      release(&log.lock);
801036d7:	83 ec 0c             	sub    $0xc,%esp
801036da:	68 60 a3 11 80       	push   $0x8011a360
801036df:	e8 73 1a 00 00       	call   80105157 <release>
801036e4:	83 c4 10             	add    $0x10,%esp
      break;
801036e7:	90                   	nop
    }
  }
}
801036e8:	90                   	nop
801036e9:	c9                   	leave  
801036ea:	c3                   	ret    

801036eb <end_op>:

// called at the end of each FS system call.
// commits if this was the last outstanding operation.
void
end_op(void)
{
801036eb:	55                   	push   %ebp
801036ec:	89 e5                	mov    %esp,%ebp
801036ee:	83 ec 18             	sub    $0x18,%esp
  int do_commit = 0;
801036f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  acquire(&log.lock);
801036f8:	83 ec 0c             	sub    $0xc,%esp
801036fb:	68 60 a3 11 80       	push   $0x8011a360
80103700:	e8 eb 19 00 00       	call   801050f0 <acquire>
80103705:	83 c4 10             	add    $0x10,%esp
  log.outstanding -= 1;
80103708:	a1 9c a3 11 80       	mov    0x8011a39c,%eax
8010370d:	83 e8 01             	sub    $0x1,%eax
80103710:	a3 9c a3 11 80       	mov    %eax,0x8011a39c
  if(log.committing)
80103715:	a1 a0 a3 11 80       	mov    0x8011a3a0,%eax
8010371a:	85 c0                	test   %eax,%eax
8010371c:	74 0d                	je     8010372b <end_op+0x40>
    panic("log.committing");
8010371e:	83 ec 0c             	sub    $0xc,%esp
80103721:	68 7c c4 10 80       	push   $0x8010c47c
80103726:	e8 3b ce ff ff       	call   80100566 <panic>
  if(log.outstanding == 0){
8010372b:	a1 9c a3 11 80       	mov    0x8011a39c,%eax
80103730:	85 c0                	test   %eax,%eax
80103732:	75 13                	jne    80103747 <end_op+0x5c>
    do_commit = 1;
80103734:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    log.committing = 1;
8010373b:	c7 05 a0 a3 11 80 01 	movl   $0x1,0x8011a3a0
80103742:	00 00 00 
80103745:	eb 10                	jmp    80103757 <end_op+0x6c>
  } else {
    // begin_op() may be waiting for log space.
    wakeup(&log);
80103747:	83 ec 0c             	sub    $0xc,%esp
8010374a:	68 60 a3 11 80       	push   $0x8011a360
8010374f:	e8 8e 17 00 00       	call   80104ee2 <wakeup>
80103754:	83 c4 10             	add    $0x10,%esp
  }
  release(&log.lock);
80103757:	83 ec 0c             	sub    $0xc,%esp
8010375a:	68 60 a3 11 80       	push   $0x8011a360
8010375f:	e8 f3 19 00 00       	call   80105157 <release>
80103764:	83 c4 10             	add    $0x10,%esp

  if(do_commit){
80103767:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010376b:	74 3f                	je     801037ac <end_op+0xc1>
    // call commit w/o holding locks, since not allowed
    // to sleep with locks.
    commit();
8010376d:	e8 f5 00 00 00       	call   80103867 <commit>
    acquire(&log.lock);
80103772:	83 ec 0c             	sub    $0xc,%esp
80103775:	68 60 a3 11 80       	push   $0x8011a360
8010377a:	e8 71 19 00 00       	call   801050f0 <acquire>
8010377f:	83 c4 10             	add    $0x10,%esp
    log.committing = 0;
80103782:	c7 05 a0 a3 11 80 00 	movl   $0x0,0x8011a3a0
80103789:	00 00 00 
    wakeup(&log);
8010378c:	83 ec 0c             	sub    $0xc,%esp
8010378f:	68 60 a3 11 80       	push   $0x8011a360
80103794:	e8 49 17 00 00       	call   80104ee2 <wakeup>
80103799:	83 c4 10             	add    $0x10,%esp
    release(&log.lock);
8010379c:	83 ec 0c             	sub    $0xc,%esp
8010379f:	68 60 a3 11 80       	push   $0x8011a360
801037a4:	e8 ae 19 00 00       	call   80105157 <release>
801037a9:	83 c4 10             	add    $0x10,%esp
  }
}
801037ac:	90                   	nop
801037ad:	c9                   	leave  
801037ae:	c3                   	ret    

801037af <write_log>:

// Copy modified blocks from cache to log.
static void 
write_log(void)
{
801037af:	55                   	push   %ebp
801037b0:	89 e5                	mov    %esp,%ebp
801037b2:	83 ec 18             	sub    $0x18,%esp
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
801037b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801037bc:	e9 95 00 00 00       	jmp    80103856 <write_log+0xa7>
    struct buf *to = bread(log.dev, log.start+tail+1); // log block
801037c1:	8b 15 94 a3 11 80    	mov    0x8011a394,%edx
801037c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801037ca:	01 d0                	add    %edx,%eax
801037cc:	83 c0 01             	add    $0x1,%eax
801037cf:	89 c2                	mov    %eax,%edx
801037d1:	a1 a4 a3 11 80       	mov    0x8011a3a4,%eax
801037d6:	83 ec 08             	sub    $0x8,%esp
801037d9:	52                   	push   %edx
801037da:	50                   	push   %eax
801037db:	e8 d6 c9 ff ff       	call   801001b6 <bread>
801037e0:	83 c4 10             	add    $0x10,%esp
801037e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct buf *from = bread(log.dev, log.lh.sector[tail]); // cache block
801037e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801037e9:	83 c0 10             	add    $0x10,%eax
801037ec:	8b 04 85 6c a3 11 80 	mov    -0x7fee5c94(,%eax,4),%eax
801037f3:	89 c2                	mov    %eax,%edx
801037f5:	a1 a4 a3 11 80       	mov    0x8011a3a4,%eax
801037fa:	83 ec 08             	sub    $0x8,%esp
801037fd:	52                   	push   %edx
801037fe:	50                   	push   %eax
801037ff:	e8 b2 c9 ff ff       	call   801001b6 <bread>
80103804:	83 c4 10             	add    $0x10,%esp
80103807:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(to->data, from->data, BSIZE);
8010380a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010380d:	8d 50 18             	lea    0x18(%eax),%edx
80103810:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103813:	83 c0 18             	add    $0x18,%eax
80103816:	83 ec 04             	sub    $0x4,%esp
80103819:	68 00 02 00 00       	push   $0x200
8010381e:	52                   	push   %edx
8010381f:	50                   	push   %eax
80103820:	e8 ed 1b 00 00       	call   80105412 <memmove>
80103825:	83 c4 10             	add    $0x10,%esp
    bwrite(to);  // write the log
80103828:	83 ec 0c             	sub    $0xc,%esp
8010382b:	ff 75 f0             	pushl  -0x10(%ebp)
8010382e:	e8 bc c9 ff ff       	call   801001ef <bwrite>
80103833:	83 c4 10             	add    $0x10,%esp
    brelse(from); 
80103836:	83 ec 0c             	sub    $0xc,%esp
80103839:	ff 75 ec             	pushl  -0x14(%ebp)
8010383c:	e8 ed c9 ff ff       	call   8010022e <brelse>
80103841:	83 c4 10             	add    $0x10,%esp
    brelse(to);
80103844:	83 ec 0c             	sub    $0xc,%esp
80103847:	ff 75 f0             	pushl  -0x10(%ebp)
8010384a:	e8 df c9 ff ff       	call   8010022e <brelse>
8010384f:	83 c4 10             	add    $0x10,%esp
static void 
write_log(void)
{
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80103852:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80103856:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
8010385b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010385e:	0f 8f 5d ff ff ff    	jg     801037c1 <write_log+0x12>
    memmove(to->data, from->data, BSIZE);
    bwrite(to);  // write the log
    brelse(from); 
    brelse(to);
  }
}
80103864:	90                   	nop
80103865:	c9                   	leave  
80103866:	c3                   	ret    

80103867 <commit>:

static void
commit()
{
80103867:	55                   	push   %ebp
80103868:	89 e5                	mov    %esp,%ebp
8010386a:	83 ec 08             	sub    $0x8,%esp
  if (log.lh.n > 0) {
8010386d:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
80103872:	85 c0                	test   %eax,%eax
80103874:	7e 1e                	jle    80103894 <commit+0x2d>
    write_log();     // Write modified blocks from cache to log
80103876:	e8 34 ff ff ff       	call   801037af <write_log>
    write_head();    // Write header to disk -- the real commit
8010387b:	e8 3a fd ff ff       	call   801035ba <write_head>
    install_trans(); // Now install writes to home locations
80103880:	e8 09 fc ff ff       	call   8010348e <install_trans>
    log.lh.n = 0; 
80103885:	c7 05 a8 a3 11 80 00 	movl   $0x0,0x8011a3a8
8010388c:	00 00 00 
    write_head();    // Erase the transaction from the log
8010388f:	e8 26 fd ff ff       	call   801035ba <write_head>
  }
}
80103894:	90                   	nop
80103895:	c9                   	leave  
80103896:	c3                   	ret    

80103897 <log_write>:
//   modify bp->data[]
//   log_write(bp)
//   brelse(bp)
void
log_write(struct buf *b)
{
80103897:	55                   	push   %ebp
80103898:	89 e5                	mov    %esp,%ebp
8010389a:	83 ec 18             	sub    $0x18,%esp
  int i;

  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
8010389d:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
801038a2:	83 f8 1d             	cmp    $0x1d,%eax
801038a5:	7f 12                	jg     801038b9 <log_write+0x22>
801038a7:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
801038ac:	8b 15 98 a3 11 80    	mov    0x8011a398,%edx
801038b2:	83 ea 01             	sub    $0x1,%edx
801038b5:	39 d0                	cmp    %edx,%eax
801038b7:	7c 0d                	jl     801038c6 <log_write+0x2f>
    panic("too big a transaction");
801038b9:	83 ec 0c             	sub    $0xc,%esp
801038bc:	68 8b c4 10 80       	push   $0x8010c48b
801038c1:	e8 a0 cc ff ff       	call   80100566 <panic>
  if (log.outstanding < 1)
801038c6:	a1 9c a3 11 80       	mov    0x8011a39c,%eax
801038cb:	85 c0                	test   %eax,%eax
801038cd:	7f 0d                	jg     801038dc <log_write+0x45>
    panic("log_write outside of trans");
801038cf:	83 ec 0c             	sub    $0xc,%esp
801038d2:	68 a1 c4 10 80       	push   $0x8010c4a1
801038d7:	e8 8a cc ff ff       	call   80100566 <panic>

  for (i = 0; i < log.lh.n; i++) {
801038dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801038e3:	eb 1d                	jmp    80103902 <log_write+0x6b>
    if (log.lh.sector[i] == b->sector)   // log absorbtion
801038e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801038e8:	83 c0 10             	add    $0x10,%eax
801038eb:	8b 04 85 6c a3 11 80 	mov    -0x7fee5c94(,%eax,4),%eax
801038f2:	89 c2                	mov    %eax,%edx
801038f4:	8b 45 08             	mov    0x8(%ebp),%eax
801038f7:	8b 40 08             	mov    0x8(%eax),%eax
801038fa:	39 c2                	cmp    %eax,%edx
801038fc:	74 10                	je     8010390e <log_write+0x77>
  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
    panic("too big a transaction");
  if (log.outstanding < 1)
    panic("log_write outside of trans");

  for (i = 0; i < log.lh.n; i++) {
801038fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80103902:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
80103907:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010390a:	7f d9                	jg     801038e5 <log_write+0x4e>
8010390c:	eb 01                	jmp    8010390f <log_write+0x78>
    if (log.lh.sector[i] == b->sector)   // log absorbtion
      break;
8010390e:	90                   	nop
  }
  log.lh.sector[i] = b->sector;
8010390f:	8b 45 08             	mov    0x8(%ebp),%eax
80103912:	8b 40 08             	mov    0x8(%eax),%eax
80103915:	89 c2                	mov    %eax,%edx
80103917:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010391a:	83 c0 10             	add    $0x10,%eax
8010391d:	89 14 85 6c a3 11 80 	mov    %edx,-0x7fee5c94(,%eax,4)
  if (i == log.lh.n)
80103924:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
80103929:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010392c:	75 0d                	jne    8010393b <log_write+0xa4>
    log.lh.n++;
8010392e:	a1 a8 a3 11 80       	mov    0x8011a3a8,%eax
80103933:	83 c0 01             	add    $0x1,%eax
80103936:	a3 a8 a3 11 80       	mov    %eax,0x8011a3a8
  b->flags |= B_DIRTY; // prevent eviction
8010393b:	8b 45 08             	mov    0x8(%ebp),%eax
8010393e:	8b 00                	mov    (%eax),%eax
80103940:	83 c8 04             	or     $0x4,%eax
80103943:	89 c2                	mov    %eax,%edx
80103945:	8b 45 08             	mov    0x8(%ebp),%eax
80103948:	89 10                	mov    %edx,(%eax)
}
8010394a:	90                   	nop
8010394b:	c9                   	leave  
8010394c:	c3                   	ret    

8010394d <v2p>:
8010394d:	55                   	push   %ebp
8010394e:	89 e5                	mov    %esp,%ebp
80103950:	8b 45 08             	mov    0x8(%ebp),%eax
80103953:	05 00 00 00 80       	add    $0x80000000,%eax
80103958:	5d                   	pop    %ebp
80103959:	c3                   	ret    

8010395a <p2v>:
static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
8010395a:	55                   	push   %ebp
8010395b:	89 e5                	mov    %esp,%ebp
8010395d:	8b 45 08             	mov    0x8(%ebp),%eax
80103960:	05 00 00 00 80       	add    $0x80000000,%eax
80103965:	5d                   	pop    %ebp
80103966:	c3                   	ret    

80103967 <xchg>:
  asm volatile("sti");
}

static inline uint
xchg(volatile uint *addr, uint newval)
{
80103967:	55                   	push   %ebp
80103968:	89 e5                	mov    %esp,%ebp
8010396a:	83 ec 10             	sub    $0x10,%esp
  uint result;
  
  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
8010396d:	8b 55 08             	mov    0x8(%ebp),%edx
80103970:	8b 45 0c             	mov    0xc(%ebp),%eax
80103973:	8b 4d 08             	mov    0x8(%ebp),%ecx
80103976:	f0 87 02             	lock xchg %eax,(%edx)
80103979:	89 45 fc             	mov    %eax,-0x4(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
8010397c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
8010397f:	c9                   	leave  
80103980:	c3                   	ret    

80103981 <main>:
// Bootstrap processor starts running C code here.
// Allocate a real stack and switch to it, first
// doing some setup required for memory allocator to work.
int
main(void)
{
80103981:	8d 4c 24 04          	lea    0x4(%esp),%ecx
80103985:	83 e4 f0             	and    $0xfffffff0,%esp
80103988:	ff 71 fc             	pushl  -0x4(%ecx)
8010398b:	55                   	push   %ebp
8010398c:	89 e5                	mov    %esp,%ebp
8010398e:	51                   	push   %ecx
8010398f:	83 ec 04             	sub    $0x4,%esp
  kinit1(end, P2V(4*1024*1024)); // phys page allocator
80103992:	83 ec 08             	sub    $0x8,%esp
80103995:	68 00 00 40 80       	push   $0x80400000
8010399a:	68 74 2c 12 80       	push   $0x80122c74
8010399f:	e8 1c f2 ff ff       	call   80102bc0 <kinit1>
801039a4:	83 c4 10             	add    $0x10,%esp
  kvmalloc();      // kernel page table
801039a7:	e8 4d 45 00 00       	call   80107ef9 <kvmalloc>
  mpinit();        // collect info about this machine
801039ac:	e8 57 04 00 00       	call   80103e08 <mpinit>
  lapicinit();
801039b1:	e8 02 f6 ff ff       	call   80102fb8 <lapicinit>
  seginit();       // set up segments
801039b6:	e8 e7 3e 00 00       	call   801078a2 <seginit>
  cprintf("\ncpu%d: starting xv6\n\n", cpu->id);
801039bb:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801039c1:	0f b6 00             	movzbl (%eax),%eax
801039c4:	0f b6 c0             	movzbl %al,%eax
801039c7:	83 ec 08             	sub    $0x8,%esp
801039ca:	50                   	push   %eax
801039cb:	68 bc c4 10 80       	push   $0x8010c4bc
801039d0:	e8 f1 c9 ff ff       	call   801003c6 <cprintf>
801039d5:	83 c4 10             	add    $0x10,%esp
  picinit();       // interrupt controller
801039d8:	e8 81 06 00 00       	call   8010405e <picinit>
  ioapicinit();    // another interrupt controller
801039dd:	e8 d3 f0 ff ff       	call   80102ab5 <ioapicinit>
  consoleinit();   // I/O devices & their interrupts
801039e2:	e8 fa d0 ff ff       	call   80100ae1 <consoleinit>
  uartinit();      // serial port
801039e7:	e8 12 32 00 00       	call   80106bfe <uartinit>
  pinit();         // process table
801039ec:	e8 6a 0b 00 00       	call   8010455b <pinit>
  tvinit();        // trap vectors
801039f1:	e8 a6 2d 00 00       	call   8010679c <tvinit>
  binit();         // buffer cache
801039f6:	e8 39 c6 ff ff       	call   80100034 <binit>
  fileinit();      // file table
801039fb:	e8 3d d5 ff ff       	call   80100f3d <fileinit>
  iinit();
80103a00:	e8 16 dc ff ff       	call   8010161b <iinit>
  ideinit();       // disk
80103a05:	e8 ef ec ff ff       	call   801026f9 <ideinit>
  initGUI();
80103a0a:	e8 b5 5b 00 00       	call   801095c4 <initGUI>
  initGUIKernel();
80103a0f:	e8 82 66 00 00       	call   8010a096 <initGUIKernel>
  mouseinit();
80103a14:	e8 65 4d 00 00       	call   8010877e <mouseinit>
  if(!ismp)
80103a19:	a1 44 a4 11 80       	mov    0x8011a444,%eax
80103a1e:	85 c0                	test   %eax,%eax
80103a20:	75 05                	jne    80103a27 <main+0xa6>
    timerinit();   // uniprocessor timer
80103a22:	e8 a9 2c 00 00       	call   801066d0 <timerinit>
  startothers();   // start other processors
80103a27:	e8 7f 00 00 00       	call   80103aab <startothers>
  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
80103a2c:	83 ec 08             	sub    $0x8,%esp
80103a2f:	68 00 00 00 8e       	push   $0x8e000000
80103a34:	68 00 00 40 80       	push   $0x80400000
80103a39:	e8 bb f1 ff ff       	call   80102bf9 <kinit2>
80103a3e:	83 c4 10             	add    $0x10,%esp
  userinit();      // first user process
80103a41:	e8 39 0c 00 00       	call   8010467f <userinit>
  // Finish setting up this processor in mpmain.
  mpmain();
80103a46:	e8 1a 00 00 00       	call   80103a65 <mpmain>

80103a4b <mpenter>:
}

// Other CPUs jump here from entryother.S.
static void
mpenter(void)
{
80103a4b:	55                   	push   %ebp
80103a4c:	89 e5                	mov    %esp,%ebp
80103a4e:	83 ec 08             	sub    $0x8,%esp
  switchkvm();
80103a51:	e8 bb 44 00 00       	call   80107f11 <switchkvm>
  seginit();
80103a56:	e8 47 3e 00 00       	call   801078a2 <seginit>
  lapicinit();
80103a5b:	e8 58 f5 ff ff       	call   80102fb8 <lapicinit>
  mpmain();
80103a60:	e8 00 00 00 00       	call   80103a65 <mpmain>

80103a65 <mpmain>:
}

// Common CPU setup code.
static void
mpmain(void)
{
80103a65:	55                   	push   %ebp
80103a66:	89 e5                	mov    %esp,%ebp
80103a68:	83 ec 08             	sub    $0x8,%esp
  cprintf("cpu%d: starting\n", cpu->id);
80103a6b:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80103a71:	0f b6 00             	movzbl (%eax),%eax
80103a74:	0f b6 c0             	movzbl %al,%eax
80103a77:	83 ec 08             	sub    $0x8,%esp
80103a7a:	50                   	push   %eax
80103a7b:	68 d3 c4 10 80       	push   $0x8010c4d3
80103a80:	e8 41 c9 ff ff       	call   801003c6 <cprintf>
80103a85:	83 c4 10             	add    $0x10,%esp
  idtinit();       // load idt register
80103a88:	e8 85 2e 00 00       	call   80106912 <idtinit>
  xchg(&cpu->started, 1); // tell startothers() we're up
80103a8d:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80103a93:	05 a8 00 00 00       	add    $0xa8,%eax
80103a98:	83 ec 08             	sub    $0x8,%esp
80103a9b:	6a 01                	push   $0x1
80103a9d:	50                   	push   %eax
80103a9e:	e8 c4 fe ff ff       	call   80103967 <xchg>
80103aa3:	83 c4 10             	add    $0x10,%esp
  scheduler();     // start running processes
80103aa6:	e8 7f 11 00 00       	call   80104c2a <scheduler>

80103aab <startothers>:
pde_t entrypgdir[];  // For entry.S

// Start the non-boot (AP) processors.
static void
startothers(void)
{
80103aab:	55                   	push   %ebp
80103aac:	89 e5                	mov    %esp,%ebp
80103aae:	53                   	push   %ebx
80103aaf:	83 ec 14             	sub    $0x14,%esp
  char *stack;

  // Write entry code to unused memory at 0x7000.
  // The linker has placed the image of entryother.S in
  // _binary_entryother_start.
  code = p2v(0x7000);
80103ab2:	68 00 70 00 00       	push   $0x7000
80103ab7:	e8 9e fe ff ff       	call   8010395a <p2v>
80103abc:	83 c4 04             	add    $0x4,%esp
80103abf:	89 45 f0             	mov    %eax,-0x10(%ebp)
  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
80103ac2:	b8 8a 00 00 00       	mov    $0x8a,%eax
80103ac7:	83 ec 04             	sub    $0x4,%esp
80103aca:	50                   	push   %eax
80103acb:	68 33 35 11 80       	push   $0x80113533
80103ad0:	ff 75 f0             	pushl  -0x10(%ebp)
80103ad3:	e8 3a 19 00 00       	call   80105412 <memmove>
80103ad8:	83 c4 10             	add    $0x10,%esp

  for(c = cpus; c < cpus+ncpu; c++){
80103adb:	c7 45 f4 60 a4 11 80 	movl   $0x8011a460,-0xc(%ebp)
80103ae2:	e9 90 00 00 00       	jmp    80103b77 <startothers+0xcc>
    if(c == cpus+cpunum())  // We've started already.
80103ae7:	e8 ea f5 ff ff       	call   801030d6 <cpunum>
80103aec:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
80103af2:	05 60 a4 11 80       	add    $0x8011a460,%eax
80103af7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103afa:	74 73                	je     80103b6f <startothers+0xc4>
      continue;

    // Tell entryother.S what stack to use, where to enter, and what
    // pgdir to use. We cannot use kpgdir yet, because the AP processor
    // is running in low  memory, so we use entrypgdir for the APs too.
    stack = kalloc();
80103afc:	e8 f6 f1 ff ff       	call   80102cf7 <kalloc>
80103b01:	89 45 ec             	mov    %eax,-0x14(%ebp)
    *(void**)(code-4) = stack + KSTACKSIZE;
80103b04:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103b07:	83 e8 04             	sub    $0x4,%eax
80103b0a:	8b 55 ec             	mov    -0x14(%ebp),%edx
80103b0d:	81 c2 00 10 00 00    	add    $0x1000,%edx
80103b13:	89 10                	mov    %edx,(%eax)
    *(void**)(code-8) = mpenter;
80103b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103b18:	83 e8 08             	sub    $0x8,%eax
80103b1b:	c7 00 4b 3a 10 80    	movl   $0x80103a4b,(%eax)
    *(int**)(code-12) = (void *) v2p(entrypgdir);
80103b21:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103b24:	8d 58 f4             	lea    -0xc(%eax),%ebx
80103b27:	83 ec 0c             	sub    $0xc,%esp
80103b2a:	68 00 20 11 80       	push   $0x80112000
80103b2f:	e8 19 fe ff ff       	call   8010394d <v2p>
80103b34:	83 c4 10             	add    $0x10,%esp
80103b37:	89 03                	mov    %eax,(%ebx)

    lapicstartap(c->id, v2p(code));
80103b39:	83 ec 0c             	sub    $0xc,%esp
80103b3c:	ff 75 f0             	pushl  -0x10(%ebp)
80103b3f:	e8 09 fe ff ff       	call   8010394d <v2p>
80103b44:	83 c4 10             	add    $0x10,%esp
80103b47:	89 c2                	mov    %eax,%edx
80103b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b4c:	0f b6 00             	movzbl (%eax),%eax
80103b4f:	0f b6 c0             	movzbl %al,%eax
80103b52:	83 ec 08             	sub    $0x8,%esp
80103b55:	52                   	push   %edx
80103b56:	50                   	push   %eax
80103b57:	e8 f4 f5 ff ff       	call   80103150 <lapicstartap>
80103b5c:	83 c4 10             	add    $0x10,%esp

    // wait for cpu to finish mpmain()
    while(c->started == 0)
80103b5f:	90                   	nop
80103b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b63:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
80103b69:	85 c0                	test   %eax,%eax
80103b6b:	74 f3                	je     80103b60 <startothers+0xb5>
80103b6d:	eb 01                	jmp    80103b70 <startothers+0xc5>
  code = p2v(0x7000);
  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);

  for(c = cpus; c < cpus+ncpu; c++){
    if(c == cpus+cpunum())  // We've started already.
      continue;
80103b6f:	90                   	nop
  // The linker has placed the image of entryother.S in
  // _binary_entryother_start.
  code = p2v(0x7000);
  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);

  for(c = cpus; c < cpus+ncpu; c++){
80103b70:	81 45 f4 bc 00 00 00 	addl   $0xbc,-0xc(%ebp)
80103b77:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80103b7c:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
80103b82:	05 60 a4 11 80       	add    $0x8011a460,%eax
80103b87:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103b8a:	0f 87 57 ff ff ff    	ja     80103ae7 <startothers+0x3c>

    // wait for cpu to finish mpmain()
    while(c->started == 0)
      ;
  }
}
80103b90:	90                   	nop
80103b91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103b94:	c9                   	leave  
80103b95:	c3                   	ret    

80103b96 <p2v>:
80103b96:	55                   	push   %ebp
80103b97:	89 e5                	mov    %esp,%ebp
80103b99:	8b 45 08             	mov    0x8(%ebp),%eax
80103b9c:	05 00 00 00 80       	add    $0x80000000,%eax
80103ba1:	5d                   	pop    %ebp
80103ba2:	c3                   	ret    

80103ba3 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80103ba3:	55                   	push   %ebp
80103ba4:	89 e5                	mov    %esp,%ebp
80103ba6:	83 ec 14             	sub    $0x14,%esp
80103ba9:	8b 45 08             	mov    0x8(%ebp),%eax
80103bac:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103bb0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80103bb4:	89 c2                	mov    %eax,%edx
80103bb6:	ec                   	in     (%dx),%al
80103bb7:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80103bba:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80103bbe:	c9                   	leave  
80103bbf:	c3                   	ret    

80103bc0 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80103bc0:	55                   	push   %ebp
80103bc1:	89 e5                	mov    %esp,%ebp
80103bc3:	83 ec 08             	sub    $0x8,%esp
80103bc6:	8b 55 08             	mov    0x8(%ebp),%edx
80103bc9:	8b 45 0c             	mov    0xc(%ebp),%eax
80103bcc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
80103bd0:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103bd3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80103bd7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80103bdb:	ee                   	out    %al,(%dx)
}
80103bdc:	90                   	nop
80103bdd:	c9                   	leave  
80103bde:	c3                   	ret    

80103bdf <mpbcpu>:
int ncpu;
uchar ioapicid;

int
mpbcpu(void)
{
80103bdf:	55                   	push   %ebp
80103be0:	89 e5                	mov    %esp,%ebp
  return bcpu-cpus;
80103be2:	a1 9c 36 11 80       	mov    0x8011369c,%eax
80103be7:	89 c2                	mov    %eax,%edx
80103be9:	b8 60 a4 11 80       	mov    $0x8011a460,%eax
80103bee:	29 c2                	sub    %eax,%edx
80103bf0:	89 d0                	mov    %edx,%eax
80103bf2:	c1 f8 02             	sar    $0x2,%eax
80103bf5:	69 c0 cf 46 7d 67    	imul   $0x677d46cf,%eax,%eax
}
80103bfb:	5d                   	pop    %ebp
80103bfc:	c3                   	ret    

80103bfd <sum>:

static uchar
sum(uchar *addr, int len)
{
80103bfd:	55                   	push   %ebp
80103bfe:	89 e5                	mov    %esp,%ebp
80103c00:	83 ec 10             	sub    $0x10,%esp
  int i, sum;
  
  sum = 0;
80103c03:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  for(i=0; i<len; i++)
80103c0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80103c11:	eb 15                	jmp    80103c28 <sum+0x2b>
    sum += addr[i];
80103c13:	8b 55 fc             	mov    -0x4(%ebp),%edx
80103c16:	8b 45 08             	mov    0x8(%ebp),%eax
80103c19:	01 d0                	add    %edx,%eax
80103c1b:	0f b6 00             	movzbl (%eax),%eax
80103c1e:	0f b6 c0             	movzbl %al,%eax
80103c21:	01 45 f8             	add    %eax,-0x8(%ebp)
sum(uchar *addr, int len)
{
  int i, sum;
  
  sum = 0;
  for(i=0; i<len; i++)
80103c24:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80103c28:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103c2b:	3b 45 0c             	cmp    0xc(%ebp),%eax
80103c2e:	7c e3                	jl     80103c13 <sum+0x16>
    sum += addr[i];
  return sum;
80103c30:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
80103c33:	c9                   	leave  
80103c34:	c3                   	ret    

80103c35 <mpsearch1>:

// Look for an MP structure in the len bytes at addr.
static struct mp*
mpsearch1(uint a, int len)
{
80103c35:	55                   	push   %ebp
80103c36:	89 e5                	mov    %esp,%ebp
80103c38:	83 ec 18             	sub    $0x18,%esp
  uchar *e, *p, *addr;

  addr = p2v(a);
80103c3b:	ff 75 08             	pushl  0x8(%ebp)
80103c3e:	e8 53 ff ff ff       	call   80103b96 <p2v>
80103c43:	83 c4 04             	add    $0x4,%esp
80103c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
  e = addr+len;
80103c49:	8b 55 0c             	mov    0xc(%ebp),%edx
80103c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103c4f:	01 d0                	add    %edx,%eax
80103c51:	89 45 ec             	mov    %eax,-0x14(%ebp)
  for(p = addr; p < e; p += sizeof(struct mp))
80103c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103c57:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103c5a:	eb 36                	jmp    80103c92 <mpsearch1+0x5d>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80103c5c:	83 ec 04             	sub    $0x4,%esp
80103c5f:	6a 04                	push   $0x4
80103c61:	68 e4 c4 10 80       	push   $0x8010c4e4
80103c66:	ff 75 f4             	pushl  -0xc(%ebp)
80103c69:	e8 4c 17 00 00       	call   801053ba <memcmp>
80103c6e:	83 c4 10             	add    $0x10,%esp
80103c71:	85 c0                	test   %eax,%eax
80103c73:	75 19                	jne    80103c8e <mpsearch1+0x59>
80103c75:	83 ec 08             	sub    $0x8,%esp
80103c78:	6a 10                	push   $0x10
80103c7a:	ff 75 f4             	pushl  -0xc(%ebp)
80103c7d:	e8 7b ff ff ff       	call   80103bfd <sum>
80103c82:	83 c4 10             	add    $0x10,%esp
80103c85:	84 c0                	test   %al,%al
80103c87:	75 05                	jne    80103c8e <mpsearch1+0x59>
      return (struct mp*)p;
80103c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103c8c:	eb 11                	jmp    80103c9f <mpsearch1+0x6a>
{
  uchar *e, *p, *addr;

  addr = p2v(a);
  e = addr+len;
  for(p = addr; p < e; p += sizeof(struct mp))
80103c8e:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
80103c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103c95:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80103c98:	72 c2                	jb     80103c5c <mpsearch1+0x27>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
      return (struct mp*)p;
  return 0;
80103c9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
80103c9f:	c9                   	leave  
80103ca0:	c3                   	ret    

80103ca1 <mpsearch>:
// 1) in the first KB of the EBDA;
// 2) in the last KB of system base memory;
// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
static struct mp*
mpsearch(void)
{
80103ca1:	55                   	push   %ebp
80103ca2:	89 e5                	mov    %esp,%ebp
80103ca4:	83 ec 18             	sub    $0x18,%esp
  uchar *bda;
  uint p;
  struct mp *mp;

  bda = (uchar *) P2V(0x400);
80103ca7:	c7 45 f4 00 04 00 80 	movl   $0x80000400,-0xc(%ebp)
  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
80103cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103cb1:	83 c0 0f             	add    $0xf,%eax
80103cb4:	0f b6 00             	movzbl (%eax),%eax
80103cb7:	0f b6 c0             	movzbl %al,%eax
80103cba:	c1 e0 08             	shl    $0x8,%eax
80103cbd:	89 c2                	mov    %eax,%edx
80103cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103cc2:	83 c0 0e             	add    $0xe,%eax
80103cc5:	0f b6 00             	movzbl (%eax),%eax
80103cc8:	0f b6 c0             	movzbl %al,%eax
80103ccb:	09 d0                	or     %edx,%eax
80103ccd:	c1 e0 04             	shl    $0x4,%eax
80103cd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
80103cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80103cd7:	74 21                	je     80103cfa <mpsearch+0x59>
    if((mp = mpsearch1(p, 1024)))
80103cd9:	83 ec 08             	sub    $0x8,%esp
80103cdc:	68 00 04 00 00       	push   $0x400
80103ce1:	ff 75 f0             	pushl  -0x10(%ebp)
80103ce4:	e8 4c ff ff ff       	call   80103c35 <mpsearch1>
80103ce9:	83 c4 10             	add    $0x10,%esp
80103cec:	89 45 ec             	mov    %eax,-0x14(%ebp)
80103cef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80103cf3:	74 51                	je     80103d46 <mpsearch+0xa5>
      return mp;
80103cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103cf8:	eb 61                	jmp    80103d5b <mpsearch+0xba>
  } else {
    p = ((bda[0x14]<<8)|bda[0x13])*1024;
80103cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103cfd:	83 c0 14             	add    $0x14,%eax
80103d00:	0f b6 00             	movzbl (%eax),%eax
80103d03:	0f b6 c0             	movzbl %al,%eax
80103d06:	c1 e0 08             	shl    $0x8,%eax
80103d09:	89 c2                	mov    %eax,%edx
80103d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103d0e:	83 c0 13             	add    $0x13,%eax
80103d11:	0f b6 00             	movzbl (%eax),%eax
80103d14:	0f b6 c0             	movzbl %al,%eax
80103d17:	09 d0                	or     %edx,%eax
80103d19:	c1 e0 0a             	shl    $0xa,%eax
80103d1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if((mp = mpsearch1(p-1024, 1024)))
80103d1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103d22:	2d 00 04 00 00       	sub    $0x400,%eax
80103d27:	83 ec 08             	sub    $0x8,%esp
80103d2a:	68 00 04 00 00       	push   $0x400
80103d2f:	50                   	push   %eax
80103d30:	e8 00 ff ff ff       	call   80103c35 <mpsearch1>
80103d35:	83 c4 10             	add    $0x10,%esp
80103d38:	89 45 ec             	mov    %eax,-0x14(%ebp)
80103d3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80103d3f:	74 05                	je     80103d46 <mpsearch+0xa5>
      return mp;
80103d41:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103d44:	eb 15                	jmp    80103d5b <mpsearch+0xba>
  }
  return mpsearch1(0xF0000, 0x10000);
80103d46:	83 ec 08             	sub    $0x8,%esp
80103d49:	68 00 00 01 00       	push   $0x10000
80103d4e:	68 00 00 0f 00       	push   $0xf0000
80103d53:	e8 dd fe ff ff       	call   80103c35 <mpsearch1>
80103d58:	83 c4 10             	add    $0x10,%esp
}
80103d5b:	c9                   	leave  
80103d5c:	c3                   	ret    

80103d5d <mpconfig>:
// Check for correct signature, calculate the checksum and,
// if correct, check the version.
// To do: check extended table checksum.
static struct mpconf*
mpconfig(struct mp **pmp)
{
80103d5d:	55                   	push   %ebp
80103d5e:	89 e5                	mov    %esp,%ebp
80103d60:	83 ec 18             	sub    $0x18,%esp
  struct mpconf *conf;
  struct mp *mp;

  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
80103d63:	e8 39 ff ff ff       	call   80103ca1 <mpsearch>
80103d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103d6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80103d6f:	74 0a                	je     80103d7b <mpconfig+0x1e>
80103d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103d74:	8b 40 04             	mov    0x4(%eax),%eax
80103d77:	85 c0                	test   %eax,%eax
80103d79:	75 0a                	jne    80103d85 <mpconfig+0x28>
    return 0;
80103d7b:	b8 00 00 00 00       	mov    $0x0,%eax
80103d80:	e9 81 00 00 00       	jmp    80103e06 <mpconfig+0xa9>
  conf = (struct mpconf*) p2v((uint) mp->physaddr);
80103d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103d88:	8b 40 04             	mov    0x4(%eax),%eax
80103d8b:	83 ec 0c             	sub    $0xc,%esp
80103d8e:	50                   	push   %eax
80103d8f:	e8 02 fe ff ff       	call   80103b96 <p2v>
80103d94:	83 c4 10             	add    $0x10,%esp
80103d97:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(memcmp(conf, "PCMP", 4) != 0)
80103d9a:	83 ec 04             	sub    $0x4,%esp
80103d9d:	6a 04                	push   $0x4
80103d9f:	68 e9 c4 10 80       	push   $0x8010c4e9
80103da4:	ff 75 f0             	pushl  -0x10(%ebp)
80103da7:	e8 0e 16 00 00       	call   801053ba <memcmp>
80103dac:	83 c4 10             	add    $0x10,%esp
80103daf:	85 c0                	test   %eax,%eax
80103db1:	74 07                	je     80103dba <mpconfig+0x5d>
    return 0;
80103db3:	b8 00 00 00 00       	mov    $0x0,%eax
80103db8:	eb 4c                	jmp    80103e06 <mpconfig+0xa9>
  if(conf->version != 1 && conf->version != 4)
80103dba:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103dbd:	0f b6 40 06          	movzbl 0x6(%eax),%eax
80103dc1:	3c 01                	cmp    $0x1,%al
80103dc3:	74 12                	je     80103dd7 <mpconfig+0x7a>
80103dc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103dc8:	0f b6 40 06          	movzbl 0x6(%eax),%eax
80103dcc:	3c 04                	cmp    $0x4,%al
80103dce:	74 07                	je     80103dd7 <mpconfig+0x7a>
    return 0;
80103dd0:	b8 00 00 00 00       	mov    $0x0,%eax
80103dd5:	eb 2f                	jmp    80103e06 <mpconfig+0xa9>
  if(sum((uchar*)conf, conf->length) != 0)
80103dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103dda:	0f b7 40 04          	movzwl 0x4(%eax),%eax
80103dde:	0f b7 c0             	movzwl %ax,%eax
80103de1:	83 ec 08             	sub    $0x8,%esp
80103de4:	50                   	push   %eax
80103de5:	ff 75 f0             	pushl  -0x10(%ebp)
80103de8:	e8 10 fe ff ff       	call   80103bfd <sum>
80103ded:	83 c4 10             	add    $0x10,%esp
80103df0:	84 c0                	test   %al,%al
80103df2:	74 07                	je     80103dfb <mpconfig+0x9e>
    return 0;
80103df4:	b8 00 00 00 00       	mov    $0x0,%eax
80103df9:	eb 0b                	jmp    80103e06 <mpconfig+0xa9>
  *pmp = mp;
80103dfb:	8b 45 08             	mov    0x8(%ebp),%eax
80103dfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
80103e01:	89 10                	mov    %edx,(%eax)
  return conf;
80103e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80103e06:	c9                   	leave  
80103e07:	c3                   	ret    

80103e08 <mpinit>:

void
mpinit(void)
{
80103e08:	55                   	push   %ebp
80103e09:	89 e5                	mov    %esp,%ebp
80103e0b:	83 ec 28             	sub    $0x28,%esp
  struct mp *mp;
  struct mpconf *conf;
  struct mpproc *proc;
  struct mpioapic *ioapic;

  bcpu = &cpus[0];
80103e0e:	c7 05 9c 36 11 80 60 	movl   $0x8011a460,0x8011369c
80103e15:	a4 11 80 
  if((conf = mpconfig(&mp)) == 0)
80103e18:	83 ec 0c             	sub    $0xc,%esp
80103e1b:	8d 45 e0             	lea    -0x20(%ebp),%eax
80103e1e:	50                   	push   %eax
80103e1f:	e8 39 ff ff ff       	call   80103d5d <mpconfig>
80103e24:	83 c4 10             	add    $0x10,%esp
80103e27:	89 45 f0             	mov    %eax,-0x10(%ebp)
80103e2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80103e2e:	0f 84 96 01 00 00    	je     80103fca <mpinit+0x1c2>
    return;
  ismp = 1;
80103e34:	c7 05 44 a4 11 80 01 	movl   $0x1,0x8011a444
80103e3b:	00 00 00 
  lapic = (uint*)conf->lapicaddr;
80103e3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103e41:	8b 40 24             	mov    0x24(%eax),%eax
80103e44:	a3 5c a3 11 80       	mov    %eax,0x8011a35c
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
80103e49:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103e4c:	83 c0 2c             	add    $0x2c,%eax
80103e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103e55:	0f b7 40 04          	movzwl 0x4(%eax),%eax
80103e59:	0f b7 d0             	movzwl %ax,%edx
80103e5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103e5f:	01 d0                	add    %edx,%eax
80103e61:	89 45 ec             	mov    %eax,-0x14(%ebp)
80103e64:	e9 f2 00 00 00       	jmp    80103f5b <mpinit+0x153>
    switch(*p){
80103e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103e6c:	0f b6 00             	movzbl (%eax),%eax
80103e6f:	0f b6 c0             	movzbl %al,%eax
80103e72:	83 f8 04             	cmp    $0x4,%eax
80103e75:	0f 87 bc 00 00 00    	ja     80103f37 <mpinit+0x12f>
80103e7b:	8b 04 85 2c c5 10 80 	mov    -0x7fef3ad4(,%eax,4),%eax
80103e82:	ff e0                	jmp    *%eax
    case MPPROC:
      proc = (struct mpproc*)p;
80103e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103e87:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if(ncpu != proc->apicid){
80103e8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
80103e8d:	0f b6 40 01          	movzbl 0x1(%eax),%eax
80103e91:	0f b6 d0             	movzbl %al,%edx
80103e94:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80103e99:	39 c2                	cmp    %eax,%edx
80103e9b:	74 2b                	je     80103ec8 <mpinit+0xc0>
        cprintf("mpinit: ncpu=%d apicid=%d\n", ncpu, proc->apicid);
80103e9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
80103ea0:	0f b6 40 01          	movzbl 0x1(%eax),%eax
80103ea4:	0f b6 d0             	movzbl %al,%edx
80103ea7:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80103eac:	83 ec 04             	sub    $0x4,%esp
80103eaf:	52                   	push   %edx
80103eb0:	50                   	push   %eax
80103eb1:	68 ee c4 10 80       	push   $0x8010c4ee
80103eb6:	e8 0b c5 ff ff       	call   801003c6 <cprintf>
80103ebb:	83 c4 10             	add    $0x10,%esp
        ismp = 0;
80103ebe:	c7 05 44 a4 11 80 00 	movl   $0x0,0x8011a444
80103ec5:	00 00 00 
      }
      if(proc->flags & MPBOOT)
80103ec8:	8b 45 e8             	mov    -0x18(%ebp),%eax
80103ecb:	0f b6 40 03          	movzbl 0x3(%eax),%eax
80103ecf:	0f b6 c0             	movzbl %al,%eax
80103ed2:	83 e0 02             	and    $0x2,%eax
80103ed5:	85 c0                	test   %eax,%eax
80103ed7:	74 15                	je     80103eee <mpinit+0xe6>
        bcpu = &cpus[ncpu];
80103ed9:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80103ede:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
80103ee4:	05 60 a4 11 80       	add    $0x8011a460,%eax
80103ee9:	a3 9c 36 11 80       	mov    %eax,0x8011369c
      cpus[ncpu].id = ncpu;
80103eee:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80103ef3:	8b 15 40 aa 11 80    	mov    0x8011aa40,%edx
80103ef9:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
80103eff:	05 60 a4 11 80       	add    $0x8011a460,%eax
80103f04:	88 10                	mov    %dl,(%eax)
      ncpu++;
80103f06:	a1 40 aa 11 80       	mov    0x8011aa40,%eax
80103f0b:	83 c0 01             	add    $0x1,%eax
80103f0e:	a3 40 aa 11 80       	mov    %eax,0x8011aa40
      p += sizeof(struct mpproc);
80103f13:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
      continue;
80103f17:	eb 42                	jmp    80103f5b <mpinit+0x153>
    case MPIOAPIC:
      ioapic = (struct mpioapic*)p;
80103f19:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103f1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      ioapicid = ioapic->apicno;
80103f1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103f22:	0f b6 40 01          	movzbl 0x1(%eax),%eax
80103f26:	a2 40 a4 11 80       	mov    %al,0x8011a440
      p += sizeof(struct mpioapic);
80103f2b:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
      continue;
80103f2f:	eb 2a                	jmp    80103f5b <mpinit+0x153>
    case MPBUS:
    case MPIOINTR:
    case MPLINTR:
      p += 8;
80103f31:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
      continue;
80103f35:	eb 24                	jmp    80103f5b <mpinit+0x153>
    default:
      cprintf("mpinit: unknown config type %x\n", *p);
80103f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103f3a:	0f b6 00             	movzbl (%eax),%eax
80103f3d:	0f b6 c0             	movzbl %al,%eax
80103f40:	83 ec 08             	sub    $0x8,%esp
80103f43:	50                   	push   %eax
80103f44:	68 0c c5 10 80       	push   $0x8010c50c
80103f49:	e8 78 c4 ff ff       	call   801003c6 <cprintf>
80103f4e:	83 c4 10             	add    $0x10,%esp
      ismp = 0;
80103f51:	c7 05 44 a4 11 80 00 	movl   $0x0,0x8011a444
80103f58:	00 00 00 
  bcpu = &cpus[0];
  if((conf = mpconfig(&mp)) == 0)
    return;
  ismp = 1;
  lapic = (uint*)conf->lapicaddr;
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
80103f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103f5e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80103f61:	0f 82 02 ff ff ff    	jb     80103e69 <mpinit+0x61>
    default:
      cprintf("mpinit: unknown config type %x\n", *p);
      ismp = 0;
    }
  }
  if(!ismp){
80103f67:	a1 44 a4 11 80       	mov    0x8011a444,%eax
80103f6c:	85 c0                	test   %eax,%eax
80103f6e:	75 1d                	jne    80103f8d <mpinit+0x185>
    // Didn't like what we found; fall back to no MP.
    ncpu = 1;
80103f70:	c7 05 40 aa 11 80 01 	movl   $0x1,0x8011aa40
80103f77:	00 00 00 
    lapic = 0;
80103f7a:	c7 05 5c a3 11 80 00 	movl   $0x0,0x8011a35c
80103f81:	00 00 00 
    ioapicid = 0;
80103f84:	c6 05 40 a4 11 80 00 	movb   $0x0,0x8011a440
    return;
80103f8b:	eb 3e                	jmp    80103fcb <mpinit+0x1c3>
  }

  if(mp->imcrp){
80103f8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80103f90:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
80103f94:	84 c0                	test   %al,%al
80103f96:	74 33                	je     80103fcb <mpinit+0x1c3>
    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
    // But it would on real hardware.
    outb(0x22, 0x70);   // Select IMCR
80103f98:	83 ec 08             	sub    $0x8,%esp
80103f9b:	6a 70                	push   $0x70
80103f9d:	6a 22                	push   $0x22
80103f9f:	e8 1c fc ff ff       	call   80103bc0 <outb>
80103fa4:	83 c4 10             	add    $0x10,%esp
    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
80103fa7:	83 ec 0c             	sub    $0xc,%esp
80103faa:	6a 23                	push   $0x23
80103fac:	e8 f2 fb ff ff       	call   80103ba3 <inb>
80103fb1:	83 c4 10             	add    $0x10,%esp
80103fb4:	83 c8 01             	or     $0x1,%eax
80103fb7:	0f b6 c0             	movzbl %al,%eax
80103fba:	83 ec 08             	sub    $0x8,%esp
80103fbd:	50                   	push   %eax
80103fbe:	6a 23                	push   $0x23
80103fc0:	e8 fb fb ff ff       	call   80103bc0 <outb>
80103fc5:	83 c4 10             	add    $0x10,%esp
80103fc8:	eb 01                	jmp    80103fcb <mpinit+0x1c3>
  struct mpproc *proc;
  struct mpioapic *ioapic;

  bcpu = &cpus[0];
  if((conf = mpconfig(&mp)) == 0)
    return;
80103fca:	90                   	nop
    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
    // But it would on real hardware.
    outb(0x22, 0x70);   // Select IMCR
    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
  }
}
80103fcb:	c9                   	leave  
80103fcc:	c3                   	ret    

80103fcd <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80103fcd:	55                   	push   %ebp
80103fce:	89 e5                	mov    %esp,%ebp
80103fd0:	83 ec 08             	sub    $0x8,%esp
80103fd3:	8b 55 08             	mov    0x8(%ebp),%edx
80103fd6:	8b 45 0c             	mov    0xc(%ebp),%eax
80103fd9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
80103fdd:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103fe0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80103fe4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80103fe8:	ee                   	out    %al,(%dx)
}
80103fe9:	90                   	nop
80103fea:	c9                   	leave  
80103feb:	c3                   	ret    

80103fec <picsetmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);

static void
picsetmask(ushort mask)
{
80103fec:	55                   	push   %ebp
80103fed:	89 e5                	mov    %esp,%ebp
80103fef:	83 ec 04             	sub    $0x4,%esp
80103ff2:	8b 45 08             	mov    0x8(%ebp),%eax
80103ff5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  irqmask = mask;
80103ff9:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
80103ffd:	66 a3 00 30 11 80    	mov    %ax,0x80113000
  outb(IO_PIC1+1, mask);
80104003:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
80104007:	0f b6 c0             	movzbl %al,%eax
8010400a:	50                   	push   %eax
8010400b:	6a 21                	push   $0x21
8010400d:	e8 bb ff ff ff       	call   80103fcd <outb>
80104012:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, mask >> 8);
80104015:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
80104019:	66 c1 e8 08          	shr    $0x8,%ax
8010401d:	0f b6 c0             	movzbl %al,%eax
80104020:	50                   	push   %eax
80104021:	68 a1 00 00 00       	push   $0xa1
80104026:	e8 a2 ff ff ff       	call   80103fcd <outb>
8010402b:	83 c4 08             	add    $0x8,%esp
}
8010402e:	90                   	nop
8010402f:	c9                   	leave  
80104030:	c3                   	ret    

80104031 <picenable>:

void
picenable(int irq)
{
80104031:	55                   	push   %ebp
80104032:	89 e5                	mov    %esp,%ebp
  picsetmask(irqmask & ~(1<<irq));
80104034:	8b 45 08             	mov    0x8(%ebp),%eax
80104037:	ba 01 00 00 00       	mov    $0x1,%edx
8010403c:	89 c1                	mov    %eax,%ecx
8010403e:	d3 e2                	shl    %cl,%edx
80104040:	89 d0                	mov    %edx,%eax
80104042:	f7 d0                	not    %eax
80104044:	89 c2                	mov    %eax,%edx
80104046:	0f b7 05 00 30 11 80 	movzwl 0x80113000,%eax
8010404d:	21 d0                	and    %edx,%eax
8010404f:	0f b7 c0             	movzwl %ax,%eax
80104052:	50                   	push   %eax
80104053:	e8 94 ff ff ff       	call   80103fec <picsetmask>
80104058:	83 c4 04             	add    $0x4,%esp
}
8010405b:	90                   	nop
8010405c:	c9                   	leave  
8010405d:	c3                   	ret    

8010405e <picinit>:

// Initialize the 8259A interrupt controllers.
void
picinit(void)
{
8010405e:	55                   	push   %ebp
8010405f:	89 e5                	mov    %esp,%ebp
  // mask all interrupts
  outb(IO_PIC1+1, 0xFF);
80104061:	68 ff 00 00 00       	push   $0xff
80104066:	6a 21                	push   $0x21
80104068:	e8 60 ff ff ff       	call   80103fcd <outb>
8010406d:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, 0xFF);
80104070:	68 ff 00 00 00       	push   $0xff
80104075:	68 a1 00 00 00       	push   $0xa1
8010407a:	e8 4e ff ff ff       	call   80103fcd <outb>
8010407f:	83 c4 08             	add    $0x8,%esp

  // ICW1:  0001g0hi
  //    g:  0 = edge triggering, 1 = level triggering
  //    h:  0 = cascaded PICs, 1 = master only
  //    i:  0 = no ICW4, 1 = ICW4 required
  outb(IO_PIC1, 0x11);
80104082:	6a 11                	push   $0x11
80104084:	6a 20                	push   $0x20
80104086:	e8 42 ff ff ff       	call   80103fcd <outb>
8010408b:	83 c4 08             	add    $0x8,%esp

  // ICW2:  Vector offset
  outb(IO_PIC1+1, T_IRQ0);
8010408e:	6a 20                	push   $0x20
80104090:	6a 21                	push   $0x21
80104092:	e8 36 ff ff ff       	call   80103fcd <outb>
80104097:	83 c4 08             	add    $0x8,%esp

  // ICW3:  (master PIC) bit mask of IR lines connected to slaves
  //        (slave PIC) 3-bit # of slave's connection to master
  outb(IO_PIC1+1, 1<<IRQ_SLAVE);
8010409a:	6a 04                	push   $0x4
8010409c:	6a 21                	push   $0x21
8010409e:	e8 2a ff ff ff       	call   80103fcd <outb>
801040a3:	83 c4 08             	add    $0x8,%esp
  //    m:  0 = slave PIC, 1 = master PIC
  //      (ignored when b is 0, as the master/slave role
  //      can be hardwired).
  //    a:  1 = Automatic EOI mode
  //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
  outb(IO_PIC1+1, 0x3);
801040a6:	6a 03                	push   $0x3
801040a8:	6a 21                	push   $0x21
801040aa:	e8 1e ff ff ff       	call   80103fcd <outb>
801040af:	83 c4 08             	add    $0x8,%esp

  // Set up slave (8259A-2)
  outb(IO_PIC2, 0x11);                  // ICW1
801040b2:	6a 11                	push   $0x11
801040b4:	68 a0 00 00 00       	push   $0xa0
801040b9:	e8 0f ff ff ff       	call   80103fcd <outb>
801040be:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, T_IRQ0 + 8);      // ICW2
801040c1:	6a 28                	push   $0x28
801040c3:	68 a1 00 00 00       	push   $0xa1
801040c8:	e8 00 ff ff ff       	call   80103fcd <outb>
801040cd:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, IRQ_SLAVE);           // ICW3
801040d0:	6a 02                	push   $0x2
801040d2:	68 a1 00 00 00       	push   $0xa1
801040d7:	e8 f1 fe ff ff       	call   80103fcd <outb>
801040dc:	83 c4 08             	add    $0x8,%esp
  // NB Automatic EOI mode doesn't tend to work on the slave.
  // Linux source code says it's "to be investigated".
  outb(IO_PIC2+1, 0x3);                 // ICW4
801040df:	6a 03                	push   $0x3
801040e1:	68 a1 00 00 00       	push   $0xa1
801040e6:	e8 e2 fe ff ff       	call   80103fcd <outb>
801040eb:	83 c4 08             	add    $0x8,%esp

  // OCW3:  0ef01prs
  //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
  //    p:  0 = no polling, 1 = polling mode
  //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
  outb(IO_PIC1, 0x68);             // clear specific mask
801040ee:	6a 68                	push   $0x68
801040f0:	6a 20                	push   $0x20
801040f2:	e8 d6 fe ff ff       	call   80103fcd <outb>
801040f7:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC1, 0x0a);             // read IRR by default
801040fa:	6a 0a                	push   $0xa
801040fc:	6a 20                	push   $0x20
801040fe:	e8 ca fe ff ff       	call   80103fcd <outb>
80104103:	83 c4 08             	add    $0x8,%esp

  outb(IO_PIC2, 0x68);             // OCW3
80104106:	6a 68                	push   $0x68
80104108:	68 a0 00 00 00       	push   $0xa0
8010410d:	e8 bb fe ff ff       	call   80103fcd <outb>
80104112:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2, 0x0a);             // OCW3
80104115:	6a 0a                	push   $0xa
80104117:	68 a0 00 00 00       	push   $0xa0
8010411c:	e8 ac fe ff ff       	call   80103fcd <outb>
80104121:	83 c4 08             	add    $0x8,%esp

  if(irqmask != 0xFFFF)
80104124:	0f b7 05 00 30 11 80 	movzwl 0x80113000,%eax
8010412b:	66 83 f8 ff          	cmp    $0xffff,%ax
8010412f:	74 13                	je     80104144 <picinit+0xe6>
    picsetmask(irqmask);
80104131:	0f b7 05 00 30 11 80 	movzwl 0x80113000,%eax
80104138:	0f b7 c0             	movzwl %ax,%eax
8010413b:	50                   	push   %eax
8010413c:	e8 ab fe ff ff       	call   80103fec <picsetmask>
80104141:	83 c4 04             	add    $0x4,%esp
}
80104144:	90                   	nop
80104145:	c9                   	leave  
80104146:	c3                   	ret    

80104147 <pipealloc>:
  int writeopen;  // write fd is still open
};

int
pipealloc(struct file **f0, struct file **f1)
{
80104147:	55                   	push   %ebp
80104148:	89 e5                	mov    %esp,%ebp
8010414a:	83 ec 18             	sub    $0x18,%esp
  struct pipe *p;

  p = 0;
8010414d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  *f0 = *f1 = 0;
80104154:	8b 45 0c             	mov    0xc(%ebp),%eax
80104157:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
8010415d:	8b 45 0c             	mov    0xc(%ebp),%eax
80104160:	8b 10                	mov    (%eax),%edx
80104162:	8b 45 08             	mov    0x8(%ebp),%eax
80104165:	89 10                	mov    %edx,(%eax)
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
80104167:	e8 ef cd ff ff       	call   80100f5b <filealloc>
8010416c:	89 c2                	mov    %eax,%edx
8010416e:	8b 45 08             	mov    0x8(%ebp),%eax
80104171:	89 10                	mov    %edx,(%eax)
80104173:	8b 45 08             	mov    0x8(%ebp),%eax
80104176:	8b 00                	mov    (%eax),%eax
80104178:	85 c0                	test   %eax,%eax
8010417a:	0f 84 cb 00 00 00    	je     8010424b <pipealloc+0x104>
80104180:	e8 d6 cd ff ff       	call   80100f5b <filealloc>
80104185:	89 c2                	mov    %eax,%edx
80104187:	8b 45 0c             	mov    0xc(%ebp),%eax
8010418a:	89 10                	mov    %edx,(%eax)
8010418c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010418f:	8b 00                	mov    (%eax),%eax
80104191:	85 c0                	test   %eax,%eax
80104193:	0f 84 b2 00 00 00    	je     8010424b <pipealloc+0x104>
    goto bad;
  if((p = (struct pipe*)kalloc()) == 0)
80104199:	e8 59 eb ff ff       	call   80102cf7 <kalloc>
8010419e:	89 45 f4             	mov    %eax,-0xc(%ebp)
801041a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801041a5:	0f 84 9f 00 00 00    	je     8010424a <pipealloc+0x103>
    goto bad;
  p->readopen = 1;
801041ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
801041ae:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
801041b5:	00 00 00 
  p->writeopen = 1;
801041b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801041bb:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
801041c2:	00 00 00 
  p->nwrite = 0;
801041c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801041c8:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
801041cf:	00 00 00 
  p->nread = 0;
801041d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801041d5:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
801041dc:	00 00 00 
  initlock(&p->lock, "pipe");
801041df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801041e2:	83 ec 08             	sub    $0x8,%esp
801041e5:	68 40 c5 10 80       	push   $0x8010c540
801041ea:	50                   	push   %eax
801041eb:	e8 de 0e 00 00       	call   801050ce <initlock>
801041f0:	83 c4 10             	add    $0x10,%esp
  (*f0)->type = FD_PIPE;
801041f3:	8b 45 08             	mov    0x8(%ebp),%eax
801041f6:	8b 00                	mov    (%eax),%eax
801041f8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  (*f0)->readable = 1;
801041fe:	8b 45 08             	mov    0x8(%ebp),%eax
80104201:	8b 00                	mov    (%eax),%eax
80104203:	c6 40 08 01          	movb   $0x1,0x8(%eax)
  (*f0)->writable = 0;
80104207:	8b 45 08             	mov    0x8(%ebp),%eax
8010420a:	8b 00                	mov    (%eax),%eax
8010420c:	c6 40 09 00          	movb   $0x0,0x9(%eax)
  (*f0)->pipe = p;
80104210:	8b 45 08             	mov    0x8(%ebp),%eax
80104213:	8b 00                	mov    (%eax),%eax
80104215:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104218:	89 50 0c             	mov    %edx,0xc(%eax)
  (*f1)->type = FD_PIPE;
8010421b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010421e:	8b 00                	mov    (%eax),%eax
80104220:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  (*f1)->readable = 0;
80104226:	8b 45 0c             	mov    0xc(%ebp),%eax
80104229:	8b 00                	mov    (%eax),%eax
8010422b:	c6 40 08 00          	movb   $0x0,0x8(%eax)
  (*f1)->writable = 1;
8010422f:	8b 45 0c             	mov    0xc(%ebp),%eax
80104232:	8b 00                	mov    (%eax),%eax
80104234:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  (*f1)->pipe = p;
80104238:	8b 45 0c             	mov    0xc(%ebp),%eax
8010423b:	8b 00                	mov    (%eax),%eax
8010423d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104240:	89 50 0c             	mov    %edx,0xc(%eax)
  return 0;
80104243:	b8 00 00 00 00       	mov    $0x0,%eax
80104248:	eb 4e                	jmp    80104298 <pipealloc+0x151>
  p = 0;
  *f0 = *f1 = 0;
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
    goto bad;
  if((p = (struct pipe*)kalloc()) == 0)
    goto bad;
8010424a:	90                   	nop
  (*f1)->pipe = p;
  return 0;

//PAGEBREAK: 20
 bad:
  if(p)
8010424b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010424f:	74 0e                	je     8010425f <pipealloc+0x118>
    kfree((char*)p);
80104251:	83 ec 0c             	sub    $0xc,%esp
80104254:	ff 75 f4             	pushl  -0xc(%ebp)
80104257:	e8 fe e9 ff ff       	call   80102c5a <kfree>
8010425c:	83 c4 10             	add    $0x10,%esp
  if(*f0)
8010425f:	8b 45 08             	mov    0x8(%ebp),%eax
80104262:	8b 00                	mov    (%eax),%eax
80104264:	85 c0                	test   %eax,%eax
80104266:	74 11                	je     80104279 <pipealloc+0x132>
    fileclose(*f0);
80104268:	8b 45 08             	mov    0x8(%ebp),%eax
8010426b:	8b 00                	mov    (%eax),%eax
8010426d:	83 ec 0c             	sub    $0xc,%esp
80104270:	50                   	push   %eax
80104271:	e8 a3 cd ff ff       	call   80101019 <fileclose>
80104276:	83 c4 10             	add    $0x10,%esp
  if(*f1)
80104279:	8b 45 0c             	mov    0xc(%ebp),%eax
8010427c:	8b 00                	mov    (%eax),%eax
8010427e:	85 c0                	test   %eax,%eax
80104280:	74 11                	je     80104293 <pipealloc+0x14c>
    fileclose(*f1);
80104282:	8b 45 0c             	mov    0xc(%ebp),%eax
80104285:	8b 00                	mov    (%eax),%eax
80104287:	83 ec 0c             	sub    $0xc,%esp
8010428a:	50                   	push   %eax
8010428b:	e8 89 cd ff ff       	call   80101019 <fileclose>
80104290:	83 c4 10             	add    $0x10,%esp
  return -1;
80104293:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104298:	c9                   	leave  
80104299:	c3                   	ret    

8010429a <pipeclose>:

void
pipeclose(struct pipe *p, int writable)
{
8010429a:	55                   	push   %ebp
8010429b:	89 e5                	mov    %esp,%ebp
8010429d:	83 ec 08             	sub    $0x8,%esp
  acquire(&p->lock);
801042a0:	8b 45 08             	mov    0x8(%ebp),%eax
801042a3:	83 ec 0c             	sub    $0xc,%esp
801042a6:	50                   	push   %eax
801042a7:	e8 44 0e 00 00       	call   801050f0 <acquire>
801042ac:	83 c4 10             	add    $0x10,%esp
  if(writable){
801042af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
801042b3:	74 23                	je     801042d8 <pipeclose+0x3e>
    p->writeopen = 0;
801042b5:	8b 45 08             	mov    0x8(%ebp),%eax
801042b8:	c7 80 40 02 00 00 00 	movl   $0x0,0x240(%eax)
801042bf:	00 00 00 
    wakeup(&p->nread);
801042c2:	8b 45 08             	mov    0x8(%ebp),%eax
801042c5:	05 34 02 00 00       	add    $0x234,%eax
801042ca:	83 ec 0c             	sub    $0xc,%esp
801042cd:	50                   	push   %eax
801042ce:	e8 0f 0c 00 00       	call   80104ee2 <wakeup>
801042d3:	83 c4 10             	add    $0x10,%esp
801042d6:	eb 21                	jmp    801042f9 <pipeclose+0x5f>
  } else {
    p->readopen = 0;
801042d8:	8b 45 08             	mov    0x8(%ebp),%eax
801042db:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%eax)
801042e2:	00 00 00 
    wakeup(&p->nwrite);
801042e5:	8b 45 08             	mov    0x8(%ebp),%eax
801042e8:	05 38 02 00 00       	add    $0x238,%eax
801042ed:	83 ec 0c             	sub    $0xc,%esp
801042f0:	50                   	push   %eax
801042f1:	e8 ec 0b 00 00       	call   80104ee2 <wakeup>
801042f6:	83 c4 10             	add    $0x10,%esp
  }
  if(p->readopen == 0 && p->writeopen == 0){
801042f9:	8b 45 08             	mov    0x8(%ebp),%eax
801042fc:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
80104302:	85 c0                	test   %eax,%eax
80104304:	75 2c                	jne    80104332 <pipeclose+0x98>
80104306:	8b 45 08             	mov    0x8(%ebp),%eax
80104309:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
8010430f:	85 c0                	test   %eax,%eax
80104311:	75 1f                	jne    80104332 <pipeclose+0x98>
    release(&p->lock);
80104313:	8b 45 08             	mov    0x8(%ebp),%eax
80104316:	83 ec 0c             	sub    $0xc,%esp
80104319:	50                   	push   %eax
8010431a:	e8 38 0e 00 00       	call   80105157 <release>
8010431f:	83 c4 10             	add    $0x10,%esp
    kfree((char*)p);
80104322:	83 ec 0c             	sub    $0xc,%esp
80104325:	ff 75 08             	pushl  0x8(%ebp)
80104328:	e8 2d e9 ff ff       	call   80102c5a <kfree>
8010432d:	83 c4 10             	add    $0x10,%esp
80104330:	eb 0f                	jmp    80104341 <pipeclose+0xa7>
  } else
    release(&p->lock);
80104332:	8b 45 08             	mov    0x8(%ebp),%eax
80104335:	83 ec 0c             	sub    $0xc,%esp
80104338:	50                   	push   %eax
80104339:	e8 19 0e 00 00       	call   80105157 <release>
8010433e:	83 c4 10             	add    $0x10,%esp
}
80104341:	90                   	nop
80104342:	c9                   	leave  
80104343:	c3                   	ret    

80104344 <pipewrite>:

//PAGEBREAK: 40
int
pipewrite(struct pipe *p, char *addr, int n)
{
80104344:	55                   	push   %ebp
80104345:	89 e5                	mov    %esp,%ebp
80104347:	83 ec 18             	sub    $0x18,%esp
  int i;

  acquire(&p->lock);
8010434a:	8b 45 08             	mov    0x8(%ebp),%eax
8010434d:	83 ec 0c             	sub    $0xc,%esp
80104350:	50                   	push   %eax
80104351:	e8 9a 0d 00 00       	call   801050f0 <acquire>
80104356:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < n; i++){
80104359:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80104360:	e9 ad 00 00 00       	jmp    80104412 <pipewrite+0xce>
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
      if(p->readopen == 0 || proc->killed){
80104365:	8b 45 08             	mov    0x8(%ebp),%eax
80104368:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
8010436e:	85 c0                	test   %eax,%eax
80104370:	74 0d                	je     8010437f <pipewrite+0x3b>
80104372:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104378:	8b 40 24             	mov    0x24(%eax),%eax
8010437b:	85 c0                	test   %eax,%eax
8010437d:	74 19                	je     80104398 <pipewrite+0x54>
        release(&p->lock);
8010437f:	8b 45 08             	mov    0x8(%ebp),%eax
80104382:	83 ec 0c             	sub    $0xc,%esp
80104385:	50                   	push   %eax
80104386:	e8 cc 0d 00 00       	call   80105157 <release>
8010438b:	83 c4 10             	add    $0x10,%esp
        return -1;
8010438e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104393:	e9 a8 00 00 00       	jmp    80104440 <pipewrite+0xfc>
      }
      wakeup(&p->nread);
80104398:	8b 45 08             	mov    0x8(%ebp),%eax
8010439b:	05 34 02 00 00       	add    $0x234,%eax
801043a0:	83 ec 0c             	sub    $0xc,%esp
801043a3:	50                   	push   %eax
801043a4:	e8 39 0b 00 00       	call   80104ee2 <wakeup>
801043a9:	83 c4 10             	add    $0x10,%esp
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
801043ac:	8b 45 08             	mov    0x8(%ebp),%eax
801043af:	8b 55 08             	mov    0x8(%ebp),%edx
801043b2:	81 c2 38 02 00 00    	add    $0x238,%edx
801043b8:	83 ec 08             	sub    $0x8,%esp
801043bb:	50                   	push   %eax
801043bc:	52                   	push   %edx
801043bd:	e8 35 0a 00 00       	call   80104df7 <sleep>
801043c2:	83 c4 10             	add    $0x10,%esp
{
  int i;

  acquire(&p->lock);
  for(i = 0; i < n; i++){
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
801043c5:	8b 45 08             	mov    0x8(%ebp),%eax
801043c8:	8b 90 38 02 00 00    	mov    0x238(%eax),%edx
801043ce:	8b 45 08             	mov    0x8(%ebp),%eax
801043d1:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
801043d7:	05 00 02 00 00       	add    $0x200,%eax
801043dc:	39 c2                	cmp    %eax,%edx
801043de:	74 85                	je     80104365 <pipewrite+0x21>
        return -1;
      }
      wakeup(&p->nread);
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
    }
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
801043e0:	8b 45 08             	mov    0x8(%ebp),%eax
801043e3:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
801043e9:	8d 48 01             	lea    0x1(%eax),%ecx
801043ec:	8b 55 08             	mov    0x8(%ebp),%edx
801043ef:	89 8a 38 02 00 00    	mov    %ecx,0x238(%edx)
801043f5:	25 ff 01 00 00       	and    $0x1ff,%eax
801043fa:	89 c1                	mov    %eax,%ecx
801043fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
801043ff:	8b 45 0c             	mov    0xc(%ebp),%eax
80104402:	01 d0                	add    %edx,%eax
80104404:	0f b6 10             	movzbl (%eax),%edx
80104407:	8b 45 08             	mov    0x8(%ebp),%eax
8010440a:	88 54 08 34          	mov    %dl,0x34(%eax,%ecx,1)
pipewrite(struct pipe *p, char *addr, int n)
{
  int i;

  acquire(&p->lock);
  for(i = 0; i < n; i++){
8010440e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80104412:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104415:	3b 45 10             	cmp    0x10(%ebp),%eax
80104418:	7c ab                	jl     801043c5 <pipewrite+0x81>
      wakeup(&p->nread);
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
    }
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
  }
  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
8010441a:	8b 45 08             	mov    0x8(%ebp),%eax
8010441d:	05 34 02 00 00       	add    $0x234,%eax
80104422:	83 ec 0c             	sub    $0xc,%esp
80104425:	50                   	push   %eax
80104426:	e8 b7 0a 00 00       	call   80104ee2 <wakeup>
8010442b:	83 c4 10             	add    $0x10,%esp
  release(&p->lock);
8010442e:	8b 45 08             	mov    0x8(%ebp),%eax
80104431:	83 ec 0c             	sub    $0xc,%esp
80104434:	50                   	push   %eax
80104435:	e8 1d 0d 00 00       	call   80105157 <release>
8010443a:	83 c4 10             	add    $0x10,%esp
  return n;
8010443d:	8b 45 10             	mov    0x10(%ebp),%eax
}
80104440:	c9                   	leave  
80104441:	c3                   	ret    

80104442 <piperead>:

int
piperead(struct pipe *p, char *addr, int n)
{
80104442:	55                   	push   %ebp
80104443:	89 e5                	mov    %esp,%ebp
80104445:	53                   	push   %ebx
80104446:	83 ec 14             	sub    $0x14,%esp
  int i;

  acquire(&p->lock);
80104449:	8b 45 08             	mov    0x8(%ebp),%eax
8010444c:	83 ec 0c             	sub    $0xc,%esp
8010444f:	50                   	push   %eax
80104450:	e8 9b 0c 00 00       	call   801050f0 <acquire>
80104455:	83 c4 10             	add    $0x10,%esp
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80104458:	eb 3f                	jmp    80104499 <piperead+0x57>
    if(proc->killed){
8010445a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104460:	8b 40 24             	mov    0x24(%eax),%eax
80104463:	85 c0                	test   %eax,%eax
80104465:	74 19                	je     80104480 <piperead+0x3e>
      release(&p->lock);
80104467:	8b 45 08             	mov    0x8(%ebp),%eax
8010446a:	83 ec 0c             	sub    $0xc,%esp
8010446d:	50                   	push   %eax
8010446e:	e8 e4 0c 00 00       	call   80105157 <release>
80104473:	83 c4 10             	add    $0x10,%esp
      return -1;
80104476:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010447b:	e9 bf 00 00 00       	jmp    8010453f <piperead+0xfd>
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
80104480:	8b 45 08             	mov    0x8(%ebp),%eax
80104483:	8b 55 08             	mov    0x8(%ebp),%edx
80104486:	81 c2 34 02 00 00    	add    $0x234,%edx
8010448c:	83 ec 08             	sub    $0x8,%esp
8010448f:	50                   	push   %eax
80104490:	52                   	push   %edx
80104491:	e8 61 09 00 00       	call   80104df7 <sleep>
80104496:	83 c4 10             	add    $0x10,%esp
piperead(struct pipe *p, char *addr, int n)
{
  int i;

  acquire(&p->lock);
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80104499:	8b 45 08             	mov    0x8(%ebp),%eax
8010449c:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
801044a2:	8b 45 08             	mov    0x8(%ebp),%eax
801044a5:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
801044ab:	39 c2                	cmp    %eax,%edx
801044ad:	75 0d                	jne    801044bc <piperead+0x7a>
801044af:	8b 45 08             	mov    0x8(%ebp),%eax
801044b2:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
801044b8:	85 c0                	test   %eax,%eax
801044ba:	75 9e                	jne    8010445a <piperead+0x18>
      release(&p->lock);
      return -1;
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
  }
  for(i = 0; i < n; i++){  //DOC: piperead-copy
801044bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801044c3:	eb 49                	jmp    8010450e <piperead+0xcc>
    if(p->nread == p->nwrite)
801044c5:	8b 45 08             	mov    0x8(%ebp),%eax
801044c8:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
801044ce:	8b 45 08             	mov    0x8(%ebp),%eax
801044d1:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
801044d7:	39 c2                	cmp    %eax,%edx
801044d9:	74 3d                	je     80104518 <piperead+0xd6>
      break;
    addr[i] = p->data[p->nread++ % PIPESIZE];
801044db:	8b 55 f4             	mov    -0xc(%ebp),%edx
801044de:	8b 45 0c             	mov    0xc(%ebp),%eax
801044e1:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
801044e4:	8b 45 08             	mov    0x8(%ebp),%eax
801044e7:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
801044ed:	8d 48 01             	lea    0x1(%eax),%ecx
801044f0:	8b 55 08             	mov    0x8(%ebp),%edx
801044f3:	89 8a 34 02 00 00    	mov    %ecx,0x234(%edx)
801044f9:	25 ff 01 00 00       	and    $0x1ff,%eax
801044fe:	89 c2                	mov    %eax,%edx
80104500:	8b 45 08             	mov    0x8(%ebp),%eax
80104503:	0f b6 44 10 34       	movzbl 0x34(%eax,%edx,1),%eax
80104508:	88 03                	mov    %al,(%ebx)
      release(&p->lock);
      return -1;
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
  }
  for(i = 0; i < n; i++){  //DOC: piperead-copy
8010450a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010450e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104511:	3b 45 10             	cmp    0x10(%ebp),%eax
80104514:	7c af                	jl     801044c5 <piperead+0x83>
80104516:	eb 01                	jmp    80104519 <piperead+0xd7>
    if(p->nread == p->nwrite)
      break;
80104518:	90                   	nop
    addr[i] = p->data[p->nread++ % PIPESIZE];
  }
  wakeup(&p->nwrite);  //DOC: piperead-wakeup
80104519:	8b 45 08             	mov    0x8(%ebp),%eax
8010451c:	05 38 02 00 00       	add    $0x238,%eax
80104521:	83 ec 0c             	sub    $0xc,%esp
80104524:	50                   	push   %eax
80104525:	e8 b8 09 00 00       	call   80104ee2 <wakeup>
8010452a:	83 c4 10             	add    $0x10,%esp
  release(&p->lock);
8010452d:	8b 45 08             	mov    0x8(%ebp),%eax
80104530:	83 ec 0c             	sub    $0xc,%esp
80104533:	50                   	push   %eax
80104534:	e8 1e 0c 00 00       	call   80105157 <release>
80104539:	83 c4 10             	add    $0x10,%esp
  return i;
8010453c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8010453f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104542:	c9                   	leave  
80104543:	c3                   	ret    

80104544 <readeflags>:
  asm volatile("ltr %0" : : "r" (sel));
}

static inline uint
readeflags(void)
{
80104544:	55                   	push   %ebp
80104545:	89 e5                	mov    %esp,%ebp
80104547:	83 ec 10             	sub    $0x10,%esp
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
8010454a:	9c                   	pushf  
8010454b:	58                   	pop    %eax
8010454c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
8010454f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80104552:	c9                   	leave  
80104553:	c3                   	ret    

80104554 <sti>:
  asm volatile("cli");
}

static inline void
sti(void)
{
80104554:	55                   	push   %ebp
80104555:	89 e5                	mov    %esp,%ebp
  asm volatile("sti");
80104557:	fb                   	sti    
}
80104558:	90                   	nop
80104559:	5d                   	pop    %ebp
8010455a:	c3                   	ret    

8010455b <pinit>:

static void wakeup1(void *chan);

void
pinit(void)
{
8010455b:	55                   	push   %ebp
8010455c:	89 e5                	mov    %esp,%ebp
8010455e:	83 ec 08             	sub    $0x8,%esp
  initlock(&ptable.lock, "ptable");
80104561:	83 ec 08             	sub    $0x8,%esp
80104564:	68 45 c5 10 80       	push   $0x8010c545
80104569:	68 60 aa 11 80       	push   $0x8011aa60
8010456e:	e8 5b 0b 00 00       	call   801050ce <initlock>
80104573:	83 c4 10             	add    $0x10,%esp
}
80104576:	90                   	nop
80104577:	c9                   	leave  
80104578:	c3                   	ret    

80104579 <allocproc>:
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
80104579:	55                   	push   %ebp
8010457a:	89 e5                	mov    %esp,%ebp
8010457c:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
8010457f:	83 ec 0c             	sub    $0xc,%esp
80104582:	68 60 aa 11 80       	push   $0x8011aa60
80104587:	e8 64 0b 00 00       	call   801050f0 <acquire>
8010458c:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
8010458f:	c7 45 f4 94 aa 11 80 	movl   $0x8011aa94,-0xc(%ebp)
80104596:	eb 0e                	jmp    801045a6 <allocproc+0x2d>
    if(p->state == UNUSED)
80104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010459b:	8b 40 0c             	mov    0xc(%eax),%eax
8010459e:	85 c0                	test   %eax,%eax
801045a0:	74 27                	je     801045c9 <allocproc+0x50>
{
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801045a2:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
801045a6:	81 7d f4 94 c9 11 80 	cmpl   $0x8011c994,-0xc(%ebp)
801045ad:	72 e9                	jb     80104598 <allocproc+0x1f>
    if(p->state == UNUSED)
      goto found;
  release(&ptable.lock);
801045af:	83 ec 0c             	sub    $0xc,%esp
801045b2:	68 60 aa 11 80       	push   $0x8011aa60
801045b7:	e8 9b 0b 00 00       	call   80105157 <release>
801045bc:	83 c4 10             	add    $0x10,%esp
  return 0;
801045bf:	b8 00 00 00 00       	mov    $0x0,%eax
801045c4:	e9 b4 00 00 00       	jmp    8010467d <allocproc+0x104>
  char *sp;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    if(p->state == UNUSED)
      goto found;
801045c9:	90                   	nop
  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
801045ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
801045cd:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
  p->pid = nextpid++;
801045d4:	a1 04 30 11 80       	mov    0x80113004,%eax
801045d9:	8d 50 01             	lea    0x1(%eax),%edx
801045dc:	89 15 04 30 11 80    	mov    %edx,0x80113004
801045e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
801045e5:	89 42 10             	mov    %eax,0x10(%edx)
  release(&ptable.lock);
801045e8:	83 ec 0c             	sub    $0xc,%esp
801045eb:	68 60 aa 11 80       	push   $0x8011aa60
801045f0:	e8 62 0b 00 00       	call   80105157 <release>
801045f5:	83 c4 10             	add    $0x10,%esp

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
801045f8:	e8 fa e6 ff ff       	call   80102cf7 <kalloc>
801045fd:	89 c2                	mov    %eax,%edx
801045ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104602:	89 50 08             	mov    %edx,0x8(%eax)
80104605:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104608:	8b 40 08             	mov    0x8(%eax),%eax
8010460b:	85 c0                	test   %eax,%eax
8010460d:	75 11                	jne    80104620 <allocproc+0xa7>
    p->state = UNUSED;
8010460f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104612:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    return 0;
80104619:	b8 00 00 00 00       	mov    $0x0,%eax
8010461e:	eb 5d                	jmp    8010467d <allocproc+0x104>
  }
  sp = p->kstack + KSTACKSIZE;
80104620:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104623:	8b 40 08             	mov    0x8(%eax),%eax
80104626:	05 00 10 00 00       	add    $0x1000,%eax
8010462b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  // Leave room for trap frame.
  sp -= sizeof *p->tf;
8010462e:	83 6d f0 4c          	subl   $0x4c,-0x10(%ebp)
  p->tf = (struct trapframe*)sp;
80104632:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104635:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104638:	89 50 18             	mov    %edx,0x18(%eax)
  
  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
8010463b:	83 6d f0 04          	subl   $0x4,-0x10(%ebp)
  *(uint*)sp = (uint)trapret;
8010463f:	ba 56 67 10 80       	mov    $0x80106756,%edx
80104644:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104647:	89 10                	mov    %edx,(%eax)

  sp -= sizeof *p->context;
80104649:	83 6d f0 14          	subl   $0x14,-0x10(%ebp)
  p->context = (struct context*)sp;
8010464d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104650:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104653:	89 50 1c             	mov    %edx,0x1c(%eax)
  memset(p->context, 0, sizeof *p->context);
80104656:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104659:	8b 40 1c             	mov    0x1c(%eax),%eax
8010465c:	83 ec 04             	sub    $0x4,%esp
8010465f:	6a 14                	push   $0x14
80104661:	6a 00                	push   $0x0
80104663:	50                   	push   %eax
80104664:	e8 ea 0c 00 00       	call   80105353 <memset>
80104669:	83 c4 10             	add    $0x10,%esp
  p->context->eip = (uint)forkret;
8010466c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010466f:	8b 40 1c             	mov    0x1c(%eax),%eax
80104672:	ba c6 4d 10 80       	mov    $0x80104dc6,%edx
80104677:	89 50 10             	mov    %edx,0x10(%eax)

  return p;
8010467a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8010467d:	c9                   	leave  
8010467e:	c3                   	ret    

8010467f <userinit>:

//PAGEBREAK: 32
// Set up first user process.
void
userinit(void)
{
8010467f:	55                   	push   %ebp
80104680:	89 e5                	mov    %esp,%ebp
80104682:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  extern char _binary_initcode_start[], _binary_initcode_size[];
  
  p = allocproc();
80104685:	e8 ef fe ff ff       	call   80104579 <allocproc>
8010468a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  initproc = p;
8010468d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104690:	a3 a0 36 11 80       	mov    %eax,0x801136a0
  if((p->pgdir = setupkvm()) == 0)
80104695:	e8 ad 37 00 00       	call   80107e47 <setupkvm>
8010469a:	89 c2                	mov    %eax,%edx
8010469c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010469f:	89 50 04             	mov    %edx,0x4(%eax)
801046a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801046a5:	8b 40 04             	mov    0x4(%eax),%eax
801046a8:	85 c0                	test   %eax,%eax
801046aa:	75 0d                	jne    801046b9 <userinit+0x3a>
    panic("userinit: out of memory?");
801046ac:	83 ec 0c             	sub    $0xc,%esp
801046af:	68 4c c5 10 80       	push   $0x8010c54c
801046b4:	e8 ad be ff ff       	call   80100566 <panic>
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
801046b9:	ba 2c 00 00 00       	mov    $0x2c,%edx
801046be:	8b 45 f4             	mov    -0xc(%ebp),%eax
801046c1:	8b 40 04             	mov    0x4(%eax),%eax
801046c4:	83 ec 04             	sub    $0x4,%esp
801046c7:	52                   	push   %edx
801046c8:	68 07 35 11 80       	push   $0x80113507
801046cd:	50                   	push   %eax
801046ce:	e8 ce 39 00 00       	call   801080a1 <inituvm>
801046d3:	83 c4 10             	add    $0x10,%esp
  p->sz = PGSIZE;
801046d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801046d9:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
  memset(p->tf, 0, sizeof(*p->tf));
801046df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801046e2:	8b 40 18             	mov    0x18(%eax),%eax
801046e5:	83 ec 04             	sub    $0x4,%esp
801046e8:	6a 4c                	push   $0x4c
801046ea:	6a 00                	push   $0x0
801046ec:	50                   	push   %eax
801046ed:	e8 61 0c 00 00       	call   80105353 <memset>
801046f2:	83 c4 10             	add    $0x10,%esp
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
801046f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801046f8:	8b 40 18             	mov    0x18(%eax),%eax
801046fb:	66 c7 40 3c 23 00    	movw   $0x23,0x3c(%eax)
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
80104701:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104704:	8b 40 18             	mov    0x18(%eax),%eax
80104707:	66 c7 40 2c 2b 00    	movw   $0x2b,0x2c(%eax)
  p->tf->es = p->tf->ds;
8010470d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104710:	8b 40 18             	mov    0x18(%eax),%eax
80104713:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104716:	8b 52 18             	mov    0x18(%edx),%edx
80104719:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
8010471d:	66 89 50 28          	mov    %dx,0x28(%eax)
  p->tf->ss = p->tf->ds;
80104721:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104724:	8b 40 18             	mov    0x18(%eax),%eax
80104727:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010472a:	8b 52 18             	mov    0x18(%edx),%edx
8010472d:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
80104731:	66 89 50 48          	mov    %dx,0x48(%eax)
  p->tf->eflags = FL_IF;
80104735:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104738:	8b 40 18             	mov    0x18(%eax),%eax
8010473b:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
  p->tf->esp = PGSIZE;
80104742:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104745:	8b 40 18             	mov    0x18(%eax),%eax
80104748:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
  p->tf->eip = 0;  // beginning of initcode.S
8010474f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104752:	8b 40 18             	mov    0x18(%eax),%eax
80104755:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)

  safestrcpy(p->name, "initcode", sizeof(p->name));
8010475c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010475f:	83 c0 6c             	add    $0x6c,%eax
80104762:	83 ec 04             	sub    $0x4,%esp
80104765:	6a 10                	push   $0x10
80104767:	68 65 c5 10 80       	push   $0x8010c565
8010476c:	50                   	push   %eax
8010476d:	e8 e4 0d 00 00       	call   80105556 <safestrcpy>
80104772:	83 c4 10             	add    $0x10,%esp
  p->cwd = namei("/");
80104775:	83 ec 0c             	sub    $0xc,%esp
80104778:	68 6e c5 10 80       	push   $0x8010c56e
8010477d:	e8 73 de ff ff       	call   801025f5 <namei>
80104782:	83 c4 10             	add    $0x10,%esp
80104785:	89 c2                	mov    %eax,%edx
80104787:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010478a:	89 50 68             	mov    %edx,0x68(%eax)

  p->state = RUNNABLE;
8010478d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104790:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
}
80104797:	90                   	nop
80104798:	c9                   	leave  
80104799:	c3                   	ret    

8010479a <growproc>:

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
8010479a:	55                   	push   %ebp
8010479b:	89 e5                	mov    %esp,%ebp
8010479d:	83 ec 18             	sub    $0x18,%esp
  uint sz;
  
  sz = proc->sz;
801047a0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801047a6:	8b 00                	mov    (%eax),%eax
801047a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(n > 0){
801047ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801047af:	7e 31                	jle    801047e2 <growproc+0x48>
    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
801047b1:	8b 55 08             	mov    0x8(%ebp),%edx
801047b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801047b7:	01 c2                	add    %eax,%edx
801047b9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801047bf:	8b 40 04             	mov    0x4(%eax),%eax
801047c2:	83 ec 04             	sub    $0x4,%esp
801047c5:	52                   	push   %edx
801047c6:	ff 75 f4             	pushl  -0xc(%ebp)
801047c9:	50                   	push   %eax
801047ca:	e8 1f 3a 00 00       	call   801081ee <allocuvm>
801047cf:	83 c4 10             	add    $0x10,%esp
801047d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
801047d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801047d9:	75 3e                	jne    80104819 <growproc+0x7f>
      return -1;
801047db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801047e0:	eb 59                	jmp    8010483b <growproc+0xa1>
  } else if(n < 0){
801047e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801047e6:	79 31                	jns    80104819 <growproc+0x7f>
    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
801047e8:	8b 55 08             	mov    0x8(%ebp),%edx
801047eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801047ee:	01 c2                	add    %eax,%edx
801047f0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801047f6:	8b 40 04             	mov    0x4(%eax),%eax
801047f9:	83 ec 04             	sub    $0x4,%esp
801047fc:	52                   	push   %edx
801047fd:	ff 75 f4             	pushl  -0xc(%ebp)
80104800:	50                   	push   %eax
80104801:	e8 b1 3a 00 00       	call   801082b7 <deallocuvm>
80104806:	83 c4 10             	add    $0x10,%esp
80104809:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010480c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80104810:	75 07                	jne    80104819 <growproc+0x7f>
      return -1;
80104812:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104817:	eb 22                	jmp    8010483b <growproc+0xa1>
  }
  proc->sz = sz;
80104819:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010481f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104822:	89 10                	mov    %edx,(%eax)
  switchuvm(proc);
80104824:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010482a:	83 ec 0c             	sub    $0xc,%esp
8010482d:	50                   	push   %eax
8010482e:	e8 fb 36 00 00       	call   80107f2e <switchuvm>
80104833:	83 c4 10             	add    $0x10,%esp
  return 0;
80104836:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010483b:	c9                   	leave  
8010483c:	c3                   	ret    

8010483d <fork>:
// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
8010483d:	55                   	push   %ebp
8010483e:	89 e5                	mov    %esp,%ebp
80104840:	57                   	push   %edi
80104841:	56                   	push   %esi
80104842:	53                   	push   %ebx
80104843:	83 ec 1c             	sub    $0x1c,%esp
  int i, pid;
  struct proc *np;

  // Allocate process.
  if((np = allocproc()) == 0)
80104846:	e8 2e fd ff ff       	call   80104579 <allocproc>
8010484b:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010484e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80104852:	75 0a                	jne    8010485e <fork+0x21>
    return -1;
80104854:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104859:	e9 68 01 00 00       	jmp    801049c6 <fork+0x189>

  // Copy process state from p.
  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
8010485e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104864:	8b 10                	mov    (%eax),%edx
80104866:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010486c:	8b 40 04             	mov    0x4(%eax),%eax
8010486f:	83 ec 08             	sub    $0x8,%esp
80104872:	52                   	push   %edx
80104873:	50                   	push   %eax
80104874:	e8 dc 3b 00 00       	call   80108455 <copyuvm>
80104879:	83 c4 10             	add    $0x10,%esp
8010487c:	89 c2                	mov    %eax,%edx
8010487e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104881:	89 50 04             	mov    %edx,0x4(%eax)
80104884:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104887:	8b 40 04             	mov    0x4(%eax),%eax
8010488a:	85 c0                	test   %eax,%eax
8010488c:	75 30                	jne    801048be <fork+0x81>
    kfree(np->kstack);
8010488e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104891:	8b 40 08             	mov    0x8(%eax),%eax
80104894:	83 ec 0c             	sub    $0xc,%esp
80104897:	50                   	push   %eax
80104898:	e8 bd e3 ff ff       	call   80102c5a <kfree>
8010489d:	83 c4 10             	add    $0x10,%esp
    np->kstack = 0;
801048a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
801048a3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    np->state = UNUSED;
801048aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
801048ad:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    return -1;
801048b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801048b9:	e9 08 01 00 00       	jmp    801049c6 <fork+0x189>
  }
  np->sz = proc->sz;
801048be:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801048c4:	8b 10                	mov    (%eax),%edx
801048c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
801048c9:	89 10                	mov    %edx,(%eax)
  np->parent = proc;
801048cb:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
801048d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
801048d5:	89 50 14             	mov    %edx,0x14(%eax)
  *np->tf = *proc->tf;
801048d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
801048db:	8b 50 18             	mov    0x18(%eax),%edx
801048de:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801048e4:	8b 40 18             	mov    0x18(%eax),%eax
801048e7:	89 c3                	mov    %eax,%ebx
801048e9:	b8 13 00 00 00       	mov    $0x13,%eax
801048ee:	89 d7                	mov    %edx,%edi
801048f0:	89 de                	mov    %ebx,%esi
801048f2:	89 c1                	mov    %eax,%ecx
801048f4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;
801048f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
801048f9:	8b 40 18             	mov    0x18(%eax),%eax
801048fc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  for(i = 0; i < NOFILE; i++)
80104903:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
8010490a:	eb 43                	jmp    8010494f <fork+0x112>
    if(proc->ofile[i])
8010490c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104912:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80104915:	83 c2 08             	add    $0x8,%edx
80104918:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
8010491c:	85 c0                	test   %eax,%eax
8010491e:	74 2b                	je     8010494b <fork+0x10e>
      np->ofile[i] = filedup(proc->ofile[i]);
80104920:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104926:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80104929:	83 c2 08             	add    $0x8,%edx
8010492c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80104930:	83 ec 0c             	sub    $0xc,%esp
80104933:	50                   	push   %eax
80104934:	e8 8f c6 ff ff       	call   80100fc8 <filedup>
80104939:	83 c4 10             	add    $0x10,%esp
8010493c:	89 c1                	mov    %eax,%ecx
8010493e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104941:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80104944:	83 c2 08             	add    $0x8,%edx
80104947:	89 4c 90 08          	mov    %ecx,0x8(%eax,%edx,4)
  *np->tf = *proc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for(i = 0; i < NOFILE; i++)
8010494b:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
8010494f:	83 7d e4 0f          	cmpl   $0xf,-0x1c(%ebp)
80104953:	7e b7                	jle    8010490c <fork+0xcf>
    if(proc->ofile[i])
      np->ofile[i] = filedup(proc->ofile[i]);
  np->cwd = idup(proc->cwd);
80104955:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010495b:	8b 40 68             	mov    0x68(%eax),%eax
8010495e:	83 ec 0c             	sub    $0xc,%esp
80104961:	50                   	push   %eax
80104962:	e8 4d cf ff ff       	call   801018b4 <idup>
80104967:	83 c4 10             	add    $0x10,%esp
8010496a:	89 c2                	mov    %eax,%edx
8010496c:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010496f:	89 50 68             	mov    %edx,0x68(%eax)

  safestrcpy(np->name, proc->name, sizeof(proc->name));
80104972:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104978:	8d 50 6c             	lea    0x6c(%eax),%edx
8010497b:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010497e:	83 c0 6c             	add    $0x6c,%eax
80104981:	83 ec 04             	sub    $0x4,%esp
80104984:	6a 10                	push   $0x10
80104986:	52                   	push   %edx
80104987:	50                   	push   %eax
80104988:	e8 c9 0b 00 00       	call   80105556 <safestrcpy>
8010498d:	83 c4 10             	add    $0x10,%esp
 
  pid = np->pid;
80104990:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104993:	8b 40 10             	mov    0x10(%eax),%eax
80104996:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // lock to force the compiler to emit the np->state write last.
  acquire(&ptable.lock);
80104999:	83 ec 0c             	sub    $0xc,%esp
8010499c:	68 60 aa 11 80       	push   $0x8011aa60
801049a1:	e8 4a 07 00 00       	call   801050f0 <acquire>
801049a6:	83 c4 10             	add    $0x10,%esp
  np->state = RUNNABLE;
801049a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
801049ac:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  release(&ptable.lock);
801049b3:	83 ec 0c             	sub    $0xc,%esp
801049b6:	68 60 aa 11 80       	push   $0x8011aa60
801049bb:	e8 97 07 00 00       	call   80105157 <release>
801049c0:	83 c4 10             	add    $0x10,%esp
  
  return pid;
801049c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
}
801049c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801049c9:	5b                   	pop    %ebx
801049ca:	5e                   	pop    %esi
801049cb:	5f                   	pop    %edi
801049cc:	5d                   	pop    %ebp
801049cd:	c3                   	ret    

801049ce <exit>:
// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(void)
{
801049ce:	55                   	push   %ebp
801049cf:	89 e5                	mov    %esp,%ebp
801049d1:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  int fd;

  if(proc == initproc)
801049d4:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
801049db:	a1 a0 36 11 80       	mov    0x801136a0,%eax
801049e0:	39 c2                	cmp    %eax,%edx
801049e2:	75 0d                	jne    801049f1 <exit+0x23>
    panic("init exiting");
801049e4:	83 ec 0c             	sub    $0xc,%esp
801049e7:	68 70 c5 10 80       	push   $0x8010c570
801049ec:	e8 75 bb ff ff       	call   80100566 <panic>

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
801049f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
801049f8:	eb 48                	jmp    80104a42 <exit+0x74>
    if(proc->ofile[fd]){
801049fa:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104a00:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104a03:	83 c2 08             	add    $0x8,%edx
80104a06:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80104a0a:	85 c0                	test   %eax,%eax
80104a0c:	74 30                	je     80104a3e <exit+0x70>
      fileclose(proc->ofile[fd]);
80104a0e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104a14:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104a17:	83 c2 08             	add    $0x8,%edx
80104a1a:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80104a1e:	83 ec 0c             	sub    $0xc,%esp
80104a21:	50                   	push   %eax
80104a22:	e8 f2 c5 ff ff       	call   80101019 <fileclose>
80104a27:	83 c4 10             	add    $0x10,%esp
      proc->ofile[fd] = 0;
80104a2a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104a30:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104a33:	83 c2 08             	add    $0x8,%edx
80104a36:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
80104a3d:	00 

  if(proc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
80104a3e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80104a42:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
80104a46:	7e b2                	jle    801049fa <exit+0x2c>
      fileclose(proc->ofile[fd]);
      proc->ofile[fd] = 0;
    }
  }

  begin_op();
80104a48:	e8 12 ec ff ff       	call   8010365f <begin_op>
  iput(proc->cwd);
80104a4d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104a53:	8b 40 68             	mov    0x68(%eax),%eax
80104a56:	83 ec 0c             	sub    $0xc,%esp
80104a59:	50                   	push   %eax
80104a5a:	e8 59 d0 ff ff       	call   80101ab8 <iput>
80104a5f:	83 c4 10             	add    $0x10,%esp
  end_op();
80104a62:	e8 84 ec ff ff       	call   801036eb <end_op>
  proc->cwd = 0;
80104a67:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104a6d:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)

  acquire(&ptable.lock);
80104a74:	83 ec 0c             	sub    $0xc,%esp
80104a77:	68 60 aa 11 80       	push   $0x8011aa60
80104a7c:	e8 6f 06 00 00       	call   801050f0 <acquire>
80104a81:	83 c4 10             	add    $0x10,%esp

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);
80104a84:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104a8a:	8b 40 14             	mov    0x14(%eax),%eax
80104a8d:	83 ec 0c             	sub    $0xc,%esp
80104a90:	50                   	push   %eax
80104a91:	e8 0d 04 00 00       	call   80104ea3 <wakeup1>
80104a96:	83 c4 10             	add    $0x10,%esp

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104a99:	c7 45 f4 94 aa 11 80 	movl   $0x8011aa94,-0xc(%ebp)
80104aa0:	eb 3c                	jmp    80104ade <exit+0x110>
    if(p->parent == proc){
80104aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104aa5:	8b 50 14             	mov    0x14(%eax),%edx
80104aa8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104aae:	39 c2                	cmp    %eax,%edx
80104ab0:	75 28                	jne    80104ada <exit+0x10c>
      p->parent = initproc;
80104ab2:	8b 15 a0 36 11 80    	mov    0x801136a0,%edx
80104ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104abb:	89 50 14             	mov    %edx,0x14(%eax)
      if(p->state == ZOMBIE)
80104abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ac1:	8b 40 0c             	mov    0xc(%eax),%eax
80104ac4:	83 f8 05             	cmp    $0x5,%eax
80104ac7:	75 11                	jne    80104ada <exit+0x10c>
        wakeup1(initproc);
80104ac9:	a1 a0 36 11 80       	mov    0x801136a0,%eax
80104ace:	83 ec 0c             	sub    $0xc,%esp
80104ad1:	50                   	push   %eax
80104ad2:	e8 cc 03 00 00       	call   80104ea3 <wakeup1>
80104ad7:	83 c4 10             	add    $0x10,%esp

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104ada:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80104ade:	81 7d f4 94 c9 11 80 	cmpl   $0x8011c994,-0xc(%ebp)
80104ae5:	72 bb                	jb     80104aa2 <exit+0xd4>
        wakeup1(initproc);
    }
  }

  // Jump into the scheduler, never to return.
  proc->state = ZOMBIE;
80104ae7:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104aed:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
  sched();
80104af4:	e8 d6 01 00 00       	call   80104ccf <sched>
  panic("zombie exit");
80104af9:	83 ec 0c             	sub    $0xc,%esp
80104afc:	68 7d c5 10 80       	push   $0x8010c57d
80104b01:	e8 60 ba ff ff       	call   80100566 <panic>

80104b06 <wait>:

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(void)
{
80104b06:	55                   	push   %ebp
80104b07:	89 e5                	mov    %esp,%ebp
80104b09:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  int havekids, pid;

  acquire(&ptable.lock);
80104b0c:	83 ec 0c             	sub    $0xc,%esp
80104b0f:	68 60 aa 11 80       	push   $0x8011aa60
80104b14:	e8 d7 05 00 00       	call   801050f0 <acquire>
80104b19:	83 c4 10             	add    $0x10,%esp
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
80104b1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104b23:	c7 45 f4 94 aa 11 80 	movl   $0x8011aa94,-0xc(%ebp)
80104b2a:	e9 a6 00 00 00       	jmp    80104bd5 <wait+0xcf>
      if(p->parent != proc)
80104b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b32:	8b 50 14             	mov    0x14(%eax),%edx
80104b35:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104b3b:	39 c2                	cmp    %eax,%edx
80104b3d:	0f 85 8d 00 00 00    	jne    80104bd0 <wait+0xca>
        continue;
      havekids = 1;
80104b43:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      if(p->state == ZOMBIE){
80104b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b4d:	8b 40 0c             	mov    0xc(%eax),%eax
80104b50:	83 f8 05             	cmp    $0x5,%eax
80104b53:	75 7c                	jne    80104bd1 <wait+0xcb>
        // Found one.
        pid = p->pid;
80104b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b58:	8b 40 10             	mov    0x10(%eax),%eax
80104b5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        kfree(p->kstack);
80104b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b61:	8b 40 08             	mov    0x8(%eax),%eax
80104b64:	83 ec 0c             	sub    $0xc,%esp
80104b67:	50                   	push   %eax
80104b68:	e8 ed e0 ff ff       	call   80102c5a <kfree>
80104b6d:	83 c4 10             	add    $0x10,%esp
        p->kstack = 0;
80104b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b73:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        freevm(p->pgdir);
80104b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b7d:	8b 40 04             	mov    0x4(%eax),%eax
80104b80:	83 ec 0c             	sub    $0xc,%esp
80104b83:	50                   	push   %eax
80104b84:	e8 eb 37 00 00       	call   80108374 <freevm>
80104b89:	83 c4 10             	add    $0x10,%esp
        p->state = UNUSED;
80104b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b8f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        p->pid = 0;
80104b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b99:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        p->parent = 0;
80104ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ba3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        p->name[0] = 0;
80104baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104bad:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
        p->killed = 0;
80104bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104bb4:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        release(&ptable.lock);
80104bbb:	83 ec 0c             	sub    $0xc,%esp
80104bbe:	68 60 aa 11 80       	push   $0x8011aa60
80104bc3:	e8 8f 05 00 00       	call   80105157 <release>
80104bc8:	83 c4 10             	add    $0x10,%esp
        return pid;
80104bcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104bce:	eb 58                	jmp    80104c28 <wait+0x122>
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->parent != proc)
        continue;
80104bd0:	90                   	nop

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104bd1:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80104bd5:	81 7d f4 94 c9 11 80 	cmpl   $0x8011c994,-0xc(%ebp)
80104bdc:	0f 82 4d ff ff ff    	jb     80104b2f <wait+0x29>
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if(!havekids || proc->killed){
80104be2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80104be6:	74 0d                	je     80104bf5 <wait+0xef>
80104be8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104bee:	8b 40 24             	mov    0x24(%eax),%eax
80104bf1:	85 c0                	test   %eax,%eax
80104bf3:	74 17                	je     80104c0c <wait+0x106>
      release(&ptable.lock);
80104bf5:	83 ec 0c             	sub    $0xc,%esp
80104bf8:	68 60 aa 11 80       	push   $0x8011aa60
80104bfd:	e8 55 05 00 00       	call   80105157 <release>
80104c02:	83 c4 10             	add    $0x10,%esp
      return -1;
80104c05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104c0a:	eb 1c                	jmp    80104c28 <wait+0x122>
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(proc, &ptable.lock);  //DOC: wait-sleep
80104c0c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104c12:	83 ec 08             	sub    $0x8,%esp
80104c15:	68 60 aa 11 80       	push   $0x8011aa60
80104c1a:	50                   	push   %eax
80104c1b:	e8 d7 01 00 00       	call   80104df7 <sleep>
80104c20:	83 c4 10             	add    $0x10,%esp
  }
80104c23:	e9 f4 fe ff ff       	jmp    80104b1c <wait+0x16>
}
80104c28:	c9                   	leave  
80104c29:	c3                   	ret    

80104c2a <scheduler>:
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void
scheduler(void)
{
80104c2a:	55                   	push   %ebp
80104c2b:	89 e5                	mov    %esp,%ebp
80104c2d:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;

  for(;;){
    // Enable interrupts on this processor.
    sti();
80104c30:	e8 1f f9 ff ff       	call   80104554 <sti>

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
80104c35:	83 ec 0c             	sub    $0xc,%esp
80104c38:	68 60 aa 11 80       	push   $0x8011aa60
80104c3d:	e8 ae 04 00 00       	call   801050f0 <acquire>
80104c42:	83 c4 10             	add    $0x10,%esp
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104c45:	c7 45 f4 94 aa 11 80 	movl   $0x8011aa94,-0xc(%ebp)
80104c4c:	eb 63                	jmp    80104cb1 <scheduler+0x87>
      if(p->state != RUNNABLE)
80104c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104c51:	8b 40 0c             	mov    0xc(%eax),%eax
80104c54:	83 f8 03             	cmp    $0x3,%eax
80104c57:	75 53                	jne    80104cac <scheduler+0x82>
        continue;

      // Switch to chosen process.  It is the process's job
      // to release ptable.lock and then reacquire it
      // before jumping back to us.
      proc = p;
80104c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104c5c:	65 a3 04 00 00 00    	mov    %eax,%gs:0x4
      switchuvm(p);
80104c62:	83 ec 0c             	sub    $0xc,%esp
80104c65:	ff 75 f4             	pushl  -0xc(%ebp)
80104c68:	e8 c1 32 00 00       	call   80107f2e <switchuvm>
80104c6d:	83 c4 10             	add    $0x10,%esp
      p->state = RUNNING;
80104c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104c73:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
      swtch(&cpu->scheduler, proc->context);
80104c7a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104c80:	8b 40 1c             	mov    0x1c(%eax),%eax
80104c83:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80104c8a:	83 c2 04             	add    $0x4,%edx
80104c8d:	83 ec 08             	sub    $0x8,%esp
80104c90:	50                   	push   %eax
80104c91:	52                   	push   %edx
80104c92:	e8 30 09 00 00       	call   801055c7 <swtch>
80104c97:	83 c4 10             	add    $0x10,%esp
      switchkvm();
80104c9a:	e8 72 32 00 00       	call   80107f11 <switchkvm>

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      proc = 0;
80104c9f:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
80104ca6:	00 00 00 00 
80104caa:	eb 01                	jmp    80104cad <scheduler+0x83>

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->state != RUNNABLE)
        continue;
80104cac:	90                   	nop
    // Enable interrupts on this processor.
    sti();

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104cad:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80104cb1:	81 7d f4 94 c9 11 80 	cmpl   $0x8011c994,-0xc(%ebp)
80104cb8:	72 94                	jb     80104c4e <scheduler+0x24>

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      proc = 0;
    }
    release(&ptable.lock);
80104cba:	83 ec 0c             	sub    $0xc,%esp
80104cbd:	68 60 aa 11 80       	push   $0x8011aa60
80104cc2:	e8 90 04 00 00       	call   80105157 <release>
80104cc7:	83 c4 10             	add    $0x10,%esp

  }
80104cca:	e9 61 ff ff ff       	jmp    80104c30 <scheduler+0x6>

80104ccf <sched>:

// Enter scheduler.  Must hold only ptable.lock
// and have changed proc->state.
void
sched(void)
{
80104ccf:	55                   	push   %ebp
80104cd0:	89 e5                	mov    %esp,%ebp
80104cd2:	83 ec 18             	sub    $0x18,%esp
  int intena;

  if(!holding(&ptable.lock))
80104cd5:	83 ec 0c             	sub    $0xc,%esp
80104cd8:	68 60 aa 11 80       	push   $0x8011aa60
80104cdd:	e8 41 05 00 00       	call   80105223 <holding>
80104ce2:	83 c4 10             	add    $0x10,%esp
80104ce5:	85 c0                	test   %eax,%eax
80104ce7:	75 0d                	jne    80104cf6 <sched+0x27>
    panic("sched ptable.lock");
80104ce9:	83 ec 0c             	sub    $0xc,%esp
80104cec:	68 89 c5 10 80       	push   $0x8010c589
80104cf1:	e8 70 b8 ff ff       	call   80100566 <panic>
  if(cpu->ncli != 1)
80104cf6:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80104cfc:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
80104d02:	83 f8 01             	cmp    $0x1,%eax
80104d05:	74 0d                	je     80104d14 <sched+0x45>
    panic("sched locks");
80104d07:	83 ec 0c             	sub    $0xc,%esp
80104d0a:	68 9b c5 10 80       	push   $0x8010c59b
80104d0f:	e8 52 b8 ff ff       	call   80100566 <panic>
  if(proc->state == RUNNING)
80104d14:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104d1a:	8b 40 0c             	mov    0xc(%eax),%eax
80104d1d:	83 f8 04             	cmp    $0x4,%eax
80104d20:	75 0d                	jne    80104d2f <sched+0x60>
    panic("sched running");
80104d22:	83 ec 0c             	sub    $0xc,%esp
80104d25:	68 a7 c5 10 80       	push   $0x8010c5a7
80104d2a:	e8 37 b8 ff ff       	call   80100566 <panic>
  if(readeflags()&FL_IF)
80104d2f:	e8 10 f8 ff ff       	call   80104544 <readeflags>
80104d34:	25 00 02 00 00       	and    $0x200,%eax
80104d39:	85 c0                	test   %eax,%eax
80104d3b:	74 0d                	je     80104d4a <sched+0x7b>
    panic("sched interruptible");
80104d3d:	83 ec 0c             	sub    $0xc,%esp
80104d40:	68 b5 c5 10 80       	push   $0x8010c5b5
80104d45:	e8 1c b8 ff ff       	call   80100566 <panic>
  intena = cpu->intena;
80104d4a:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80104d50:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
80104d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
  swtch(&proc->context, cpu->scheduler);
80104d59:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80104d5f:	8b 40 04             	mov    0x4(%eax),%eax
80104d62:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
80104d69:	83 c2 1c             	add    $0x1c,%edx
80104d6c:	83 ec 08             	sub    $0x8,%esp
80104d6f:	50                   	push   %eax
80104d70:	52                   	push   %edx
80104d71:	e8 51 08 00 00       	call   801055c7 <swtch>
80104d76:	83 c4 10             	add    $0x10,%esp
  cpu->intena = intena;
80104d79:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80104d7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104d82:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
80104d88:	90                   	nop
80104d89:	c9                   	leave  
80104d8a:	c3                   	ret    

80104d8b <yield>:

// Give up the CPU for one scheduling round.
void
yield(void)
{
80104d8b:	55                   	push   %ebp
80104d8c:	89 e5                	mov    %esp,%ebp
80104d8e:	83 ec 08             	sub    $0x8,%esp
  acquire(&ptable.lock);  //DOC: yieldlock
80104d91:	83 ec 0c             	sub    $0xc,%esp
80104d94:	68 60 aa 11 80       	push   $0x8011aa60
80104d99:	e8 52 03 00 00       	call   801050f0 <acquire>
80104d9e:	83 c4 10             	add    $0x10,%esp
  proc->state = RUNNABLE;
80104da1:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104da7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  sched();
80104dae:	e8 1c ff ff ff       	call   80104ccf <sched>
  release(&ptable.lock);
80104db3:	83 ec 0c             	sub    $0xc,%esp
80104db6:	68 60 aa 11 80       	push   $0x8011aa60
80104dbb:	e8 97 03 00 00       	call   80105157 <release>
80104dc0:	83 c4 10             	add    $0x10,%esp
}
80104dc3:	90                   	nop
80104dc4:	c9                   	leave  
80104dc5:	c3                   	ret    

80104dc6 <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
80104dc6:	55                   	push   %ebp
80104dc7:	89 e5                	mov    %esp,%ebp
80104dc9:	83 ec 08             	sub    $0x8,%esp
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
80104dcc:	83 ec 0c             	sub    $0xc,%esp
80104dcf:	68 60 aa 11 80       	push   $0x8011aa60
80104dd4:	e8 7e 03 00 00       	call   80105157 <release>
80104dd9:	83 c4 10             	add    $0x10,%esp

  if (first) {
80104ddc:	a1 08 30 11 80       	mov    0x80113008,%eax
80104de1:	85 c0                	test   %eax,%eax
80104de3:	74 0f                	je     80104df4 <forkret+0x2e>
    // Some initialization functions must be run in the context
    // of a regular process (e.g., they call sleep), and thus cannot 
    // be run from main().
    first = 0;
80104de5:	c7 05 08 30 11 80 00 	movl   $0x0,0x80113008
80104dec:	00 00 00 
    initlog();
80104def:	e8 45 e6 ff ff       	call   80103439 <initlog>
  }
  
  // Return to "caller", actually trapret (see allocproc).
}
80104df4:	90                   	nop
80104df5:	c9                   	leave  
80104df6:	c3                   	ret    

80104df7 <sleep>:

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
80104df7:	55                   	push   %ebp
80104df8:	89 e5                	mov    %esp,%ebp
80104dfa:	83 ec 08             	sub    $0x8,%esp
  if(proc == 0)
80104dfd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104e03:	85 c0                	test   %eax,%eax
80104e05:	75 0d                	jne    80104e14 <sleep+0x1d>
    panic("sleep");
80104e07:	83 ec 0c             	sub    $0xc,%esp
80104e0a:	68 c9 c5 10 80       	push   $0x8010c5c9
80104e0f:	e8 52 b7 ff ff       	call   80100566 <panic>

  if(lk == 0)
80104e14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80104e18:	75 0d                	jne    80104e27 <sleep+0x30>
    panic("sleep without lk");
80104e1a:	83 ec 0c             	sub    $0xc,%esp
80104e1d:	68 cf c5 10 80       	push   $0x8010c5cf
80104e22:	e8 3f b7 ff ff       	call   80100566 <panic>
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
80104e27:	81 7d 0c 60 aa 11 80 	cmpl   $0x8011aa60,0xc(%ebp)
80104e2e:	74 1e                	je     80104e4e <sleep+0x57>
    acquire(&ptable.lock);  //DOC: sleeplock1
80104e30:	83 ec 0c             	sub    $0xc,%esp
80104e33:	68 60 aa 11 80       	push   $0x8011aa60
80104e38:	e8 b3 02 00 00       	call   801050f0 <acquire>
80104e3d:	83 c4 10             	add    $0x10,%esp
    release(lk);
80104e40:	83 ec 0c             	sub    $0xc,%esp
80104e43:	ff 75 0c             	pushl  0xc(%ebp)
80104e46:	e8 0c 03 00 00       	call   80105157 <release>
80104e4b:	83 c4 10             	add    $0x10,%esp
  }

  // Go to sleep.
  proc->chan = chan;
80104e4e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104e54:	8b 55 08             	mov    0x8(%ebp),%edx
80104e57:	89 50 20             	mov    %edx,0x20(%eax)
  proc->state = SLEEPING;
80104e5a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104e60:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
  sched();
80104e67:	e8 63 fe ff ff       	call   80104ccf <sched>

  // Tidy up.
  proc->chan = 0;
80104e6c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104e72:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
80104e79:	81 7d 0c 60 aa 11 80 	cmpl   $0x8011aa60,0xc(%ebp)
80104e80:	74 1e                	je     80104ea0 <sleep+0xa9>
    release(&ptable.lock);
80104e82:	83 ec 0c             	sub    $0xc,%esp
80104e85:	68 60 aa 11 80       	push   $0x8011aa60
80104e8a:	e8 c8 02 00 00       	call   80105157 <release>
80104e8f:	83 c4 10             	add    $0x10,%esp
    acquire(lk);
80104e92:	83 ec 0c             	sub    $0xc,%esp
80104e95:	ff 75 0c             	pushl  0xc(%ebp)
80104e98:	e8 53 02 00 00       	call   801050f0 <acquire>
80104e9d:	83 c4 10             	add    $0x10,%esp
  }
}
80104ea0:	90                   	nop
80104ea1:	c9                   	leave  
80104ea2:	c3                   	ret    

80104ea3 <wakeup1>:
//PAGEBREAK!
// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
80104ea3:	55                   	push   %ebp
80104ea4:	89 e5                	mov    %esp,%ebp
80104ea6:	83 ec 10             	sub    $0x10,%esp
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104ea9:	c7 45 fc 94 aa 11 80 	movl   $0x8011aa94,-0x4(%ebp)
80104eb0:	eb 24                	jmp    80104ed6 <wakeup1+0x33>
    if(p->state == SLEEPING && p->chan == chan)
80104eb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
80104eb5:	8b 40 0c             	mov    0xc(%eax),%eax
80104eb8:	83 f8 02             	cmp    $0x2,%eax
80104ebb:	75 15                	jne    80104ed2 <wakeup1+0x2f>
80104ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
80104ec0:	8b 40 20             	mov    0x20(%eax),%eax
80104ec3:	3b 45 08             	cmp    0x8(%ebp),%eax
80104ec6:	75 0a                	jne    80104ed2 <wakeup1+0x2f>
      p->state = RUNNABLE;
80104ec8:	8b 45 fc             	mov    -0x4(%ebp),%eax
80104ecb:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104ed2:	83 45 fc 7c          	addl   $0x7c,-0x4(%ebp)
80104ed6:	81 7d fc 94 c9 11 80 	cmpl   $0x8011c994,-0x4(%ebp)
80104edd:	72 d3                	jb     80104eb2 <wakeup1+0xf>
    if(p->state == SLEEPING && p->chan == chan)
      p->state = RUNNABLE;
}
80104edf:	90                   	nop
80104ee0:	c9                   	leave  
80104ee1:	c3                   	ret    

80104ee2 <wakeup>:

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
80104ee2:	55                   	push   %ebp
80104ee3:	89 e5                	mov    %esp,%ebp
80104ee5:	83 ec 08             	sub    $0x8,%esp
  acquire(&ptable.lock);
80104ee8:	83 ec 0c             	sub    $0xc,%esp
80104eeb:	68 60 aa 11 80       	push   $0x8011aa60
80104ef0:	e8 fb 01 00 00       	call   801050f0 <acquire>
80104ef5:	83 c4 10             	add    $0x10,%esp
  wakeup1(chan);
80104ef8:	83 ec 0c             	sub    $0xc,%esp
80104efb:	ff 75 08             	pushl  0x8(%ebp)
80104efe:	e8 a0 ff ff ff       	call   80104ea3 <wakeup1>
80104f03:	83 c4 10             	add    $0x10,%esp
  release(&ptable.lock);
80104f06:	83 ec 0c             	sub    $0xc,%esp
80104f09:	68 60 aa 11 80       	push   $0x8011aa60
80104f0e:	e8 44 02 00 00       	call   80105157 <release>
80104f13:	83 c4 10             	add    $0x10,%esp
}
80104f16:	90                   	nop
80104f17:	c9                   	leave  
80104f18:	c3                   	ret    

80104f19 <kill>:
// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
80104f19:	55                   	push   %ebp
80104f1a:	89 e5                	mov    %esp,%ebp
80104f1c:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;

  acquire(&ptable.lock);
80104f1f:	83 ec 0c             	sub    $0xc,%esp
80104f22:	68 60 aa 11 80       	push   $0x8011aa60
80104f27:	e8 c4 01 00 00       	call   801050f0 <acquire>
80104f2c:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104f2f:	c7 45 f4 94 aa 11 80 	movl   $0x8011aa94,-0xc(%ebp)
80104f36:	eb 45                	jmp    80104f7d <kill+0x64>
    if(p->pid == pid){
80104f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f3b:	8b 40 10             	mov    0x10(%eax),%eax
80104f3e:	3b 45 08             	cmp    0x8(%ebp),%eax
80104f41:	75 36                	jne    80104f79 <kill+0x60>
      p->killed = 1;
80104f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f46:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING)
80104f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f50:	8b 40 0c             	mov    0xc(%eax),%eax
80104f53:	83 f8 02             	cmp    $0x2,%eax
80104f56:	75 0a                	jne    80104f62 <kill+0x49>
        p->state = RUNNABLE;
80104f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f5b:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
      release(&ptable.lock);
80104f62:	83 ec 0c             	sub    $0xc,%esp
80104f65:	68 60 aa 11 80       	push   $0x8011aa60
80104f6a:	e8 e8 01 00 00       	call   80105157 <release>
80104f6f:	83 c4 10             	add    $0x10,%esp
      return 0;
80104f72:	b8 00 00 00 00       	mov    $0x0,%eax
80104f77:	eb 22                	jmp    80104f9b <kill+0x82>
kill(int pid)
{
  struct proc *p;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104f79:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80104f7d:	81 7d f4 94 c9 11 80 	cmpl   $0x8011c994,-0xc(%ebp)
80104f84:	72 b2                	jb     80104f38 <kill+0x1f>
        p->state = RUNNABLE;
      release(&ptable.lock);
      return 0;
    }
  }
  release(&ptable.lock);
80104f86:	83 ec 0c             	sub    $0xc,%esp
80104f89:	68 60 aa 11 80       	push   $0x8011aa60
80104f8e:	e8 c4 01 00 00       	call   80105157 <release>
80104f93:	83 c4 10             	add    $0x10,%esp
  return -1;
80104f96:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104f9b:	c9                   	leave  
80104f9c:	c3                   	ret    

80104f9d <procdump>:
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
80104f9d:	55                   	push   %ebp
80104f9e:	89 e5                	mov    %esp,%ebp
80104fa0:	83 ec 48             	sub    $0x48,%esp
  int i;
  struct proc *p;
  char *state;
  uint pc[10];
  
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104fa3:	c7 45 f0 94 aa 11 80 	movl   $0x8011aa94,-0x10(%ebp)
80104faa:	e9 d7 00 00 00       	jmp    80105086 <procdump+0xe9>
    if(p->state == UNUSED)
80104faf:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104fb2:	8b 40 0c             	mov    0xc(%eax),%eax
80104fb5:	85 c0                	test   %eax,%eax
80104fb7:	0f 84 c4 00 00 00    	je     80105081 <procdump+0xe4>
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
80104fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104fc0:	8b 40 0c             	mov    0xc(%eax),%eax
80104fc3:	83 f8 05             	cmp    $0x5,%eax
80104fc6:	77 23                	ja     80104feb <procdump+0x4e>
80104fc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104fcb:	8b 40 0c             	mov    0xc(%eax),%eax
80104fce:	8b 04 85 0c 30 11 80 	mov    -0x7feecff4(,%eax,4),%eax
80104fd5:	85 c0                	test   %eax,%eax
80104fd7:	74 12                	je     80104feb <procdump+0x4e>
      state = states[p->state];
80104fd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104fdc:	8b 40 0c             	mov    0xc(%eax),%eax
80104fdf:	8b 04 85 0c 30 11 80 	mov    -0x7feecff4(,%eax,4),%eax
80104fe6:	89 45 ec             	mov    %eax,-0x14(%ebp)
80104fe9:	eb 07                	jmp    80104ff2 <procdump+0x55>
    else
      state = "???";
80104feb:	c7 45 ec e0 c5 10 80 	movl   $0x8010c5e0,-0x14(%ebp)
    cprintf("%d %s %s", p->pid, state, p->name);
80104ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104ff5:	8d 50 6c             	lea    0x6c(%eax),%edx
80104ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104ffb:	8b 40 10             	mov    0x10(%eax),%eax
80104ffe:	52                   	push   %edx
80104fff:	ff 75 ec             	pushl  -0x14(%ebp)
80105002:	50                   	push   %eax
80105003:	68 e4 c5 10 80       	push   $0x8010c5e4
80105008:	e8 b9 b3 ff ff       	call   801003c6 <cprintf>
8010500d:	83 c4 10             	add    $0x10,%esp
    if(p->state == SLEEPING){
80105010:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105013:	8b 40 0c             	mov    0xc(%eax),%eax
80105016:	83 f8 02             	cmp    $0x2,%eax
80105019:	75 54                	jne    8010506f <procdump+0xd2>
      getcallerpcs((uint*)p->context->ebp+2, pc);
8010501b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010501e:	8b 40 1c             	mov    0x1c(%eax),%eax
80105021:	8b 40 0c             	mov    0xc(%eax),%eax
80105024:	83 c0 08             	add    $0x8,%eax
80105027:	89 c2                	mov    %eax,%edx
80105029:	83 ec 08             	sub    $0x8,%esp
8010502c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
8010502f:	50                   	push   %eax
80105030:	52                   	push   %edx
80105031:	e8 73 01 00 00       	call   801051a9 <getcallerpcs>
80105036:	83 c4 10             	add    $0x10,%esp
      for(i=0; i<10 && pc[i] != 0; i++)
80105039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80105040:	eb 1c                	jmp    8010505e <procdump+0xc1>
        cprintf(" %p", pc[i]);
80105042:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105045:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
80105049:	83 ec 08             	sub    $0x8,%esp
8010504c:	50                   	push   %eax
8010504d:	68 ed c5 10 80       	push   $0x8010c5ed
80105052:	e8 6f b3 ff ff       	call   801003c6 <cprintf>
80105057:	83 c4 10             	add    $0x10,%esp
    else
      state = "???";
    cprintf("%d %s %s", p->pid, state, p->name);
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
8010505a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010505e:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
80105062:	7f 0b                	jg     8010506f <procdump+0xd2>
80105064:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105067:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
8010506b:	85 c0                	test   %eax,%eax
8010506d:	75 d3                	jne    80105042 <procdump+0xa5>
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
8010506f:	83 ec 0c             	sub    $0xc,%esp
80105072:	68 f1 c5 10 80       	push   $0x8010c5f1
80105077:	e8 4a b3 ff ff       	call   801003c6 <cprintf>
8010507c:	83 c4 10             	add    $0x10,%esp
8010507f:	eb 01                	jmp    80105082 <procdump+0xe5>
  char *state;
  uint pc[10];
  
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->state == UNUSED)
      continue;
80105081:	90                   	nop
  int i;
  struct proc *p;
  char *state;
  uint pc[10];
  
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105082:	83 45 f0 7c          	addl   $0x7c,-0x10(%ebp)
80105086:	81 7d f0 94 c9 11 80 	cmpl   $0x8011c994,-0x10(%ebp)
8010508d:	0f 82 1c ff ff ff    	jb     80104faf <procdump+0x12>
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
  }
}
80105093:	90                   	nop
80105094:	c9                   	leave  
80105095:	c3                   	ret    

80105096 <readeflags>:
  asm volatile("ltr %0" : : "r" (sel));
}

static inline uint
readeflags(void)
{
80105096:	55                   	push   %ebp
80105097:	89 e5                	mov    %esp,%ebp
80105099:	83 ec 10             	sub    $0x10,%esp
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
8010509c:	9c                   	pushf  
8010509d:	58                   	pop    %eax
8010509e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
801050a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801050a4:	c9                   	leave  
801050a5:	c3                   	ret    

801050a6 <cli>:
  asm volatile("movw %0, %%gs" : : "r" (v));
}

static inline void
cli(void)
{
801050a6:	55                   	push   %ebp
801050a7:	89 e5                	mov    %esp,%ebp
  asm volatile("cli");
801050a9:	fa                   	cli    
}
801050aa:	90                   	nop
801050ab:	5d                   	pop    %ebp
801050ac:	c3                   	ret    

801050ad <sti>:

static inline void
sti(void)
{
801050ad:	55                   	push   %ebp
801050ae:	89 e5                	mov    %esp,%ebp
  asm volatile("sti");
801050b0:	fb                   	sti    
}
801050b1:	90                   	nop
801050b2:	5d                   	pop    %ebp
801050b3:	c3                   	ret    

801050b4 <xchg>:

static inline uint
xchg(volatile uint *addr, uint newval)
{
801050b4:	55                   	push   %ebp
801050b5:	89 e5                	mov    %esp,%ebp
801050b7:	83 ec 10             	sub    $0x10,%esp
  uint result;
  
  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
801050ba:	8b 55 08             	mov    0x8(%ebp),%edx
801050bd:	8b 45 0c             	mov    0xc(%ebp),%eax
801050c0:	8b 4d 08             	mov    0x8(%ebp),%ecx
801050c3:	f0 87 02             	lock xchg %eax,(%edx)
801050c6:	89 45 fc             	mov    %eax,-0x4(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
801050c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801050cc:	c9                   	leave  
801050cd:	c3                   	ret    

801050ce <initlock>:
#include "proc.h"
#include "spinlock.h"

void
initlock(struct spinlock *lk, char *name)
{
801050ce:	55                   	push   %ebp
801050cf:	89 e5                	mov    %esp,%ebp
  lk->name = name;
801050d1:	8b 45 08             	mov    0x8(%ebp),%eax
801050d4:	8b 55 0c             	mov    0xc(%ebp),%edx
801050d7:	89 50 04             	mov    %edx,0x4(%eax)
  lk->locked = 0;
801050da:	8b 45 08             	mov    0x8(%ebp),%eax
801050dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  lk->cpu = 0;
801050e3:	8b 45 08             	mov    0x8(%ebp),%eax
801050e6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
801050ed:	90                   	nop
801050ee:	5d                   	pop    %ebp
801050ef:	c3                   	ret    

801050f0 <acquire>:
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void
acquire(struct spinlock *lk)
{
801050f0:	55                   	push   %ebp
801050f1:	89 e5                	mov    %esp,%ebp
801050f3:	83 ec 08             	sub    $0x8,%esp
  pushcli(); // disable interrupts to avoid deadlock.
801050f6:	e8 52 01 00 00       	call   8010524d <pushcli>
  if(holding(lk))
801050fb:	8b 45 08             	mov    0x8(%ebp),%eax
801050fe:	83 ec 0c             	sub    $0xc,%esp
80105101:	50                   	push   %eax
80105102:	e8 1c 01 00 00       	call   80105223 <holding>
80105107:	83 c4 10             	add    $0x10,%esp
8010510a:	85 c0                	test   %eax,%eax
8010510c:	74 0d                	je     8010511b <acquire+0x2b>
    panic("acquire");
8010510e:	83 ec 0c             	sub    $0xc,%esp
80105111:	68 1d c6 10 80       	push   $0x8010c61d
80105116:	e8 4b b4 ff ff       	call   80100566 <panic>

  // The xchg is atomic.
  // It also serializes, so that reads after acquire are not
  // reordered before it. 
  while(xchg(&lk->locked, 1) != 0)
8010511b:	90                   	nop
8010511c:	8b 45 08             	mov    0x8(%ebp),%eax
8010511f:	83 ec 08             	sub    $0x8,%esp
80105122:	6a 01                	push   $0x1
80105124:	50                   	push   %eax
80105125:	e8 8a ff ff ff       	call   801050b4 <xchg>
8010512a:	83 c4 10             	add    $0x10,%esp
8010512d:	85 c0                	test   %eax,%eax
8010512f:	75 eb                	jne    8010511c <acquire+0x2c>
    ;

  // Record info about lock acquisition for debugging.
  lk->cpu = cpu;
80105131:	8b 45 08             	mov    0x8(%ebp),%eax
80105134:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
8010513b:	89 50 08             	mov    %edx,0x8(%eax)
  getcallerpcs(&lk, lk->pcs);
8010513e:	8b 45 08             	mov    0x8(%ebp),%eax
80105141:	83 c0 0c             	add    $0xc,%eax
80105144:	83 ec 08             	sub    $0x8,%esp
80105147:	50                   	push   %eax
80105148:	8d 45 08             	lea    0x8(%ebp),%eax
8010514b:	50                   	push   %eax
8010514c:	e8 58 00 00 00       	call   801051a9 <getcallerpcs>
80105151:	83 c4 10             	add    $0x10,%esp
}
80105154:	90                   	nop
80105155:	c9                   	leave  
80105156:	c3                   	ret    

80105157 <release>:

// Release the lock.
void
release(struct spinlock *lk)
{
80105157:	55                   	push   %ebp
80105158:	89 e5                	mov    %esp,%ebp
8010515a:	83 ec 08             	sub    $0x8,%esp
  if(!holding(lk))
8010515d:	83 ec 0c             	sub    $0xc,%esp
80105160:	ff 75 08             	pushl  0x8(%ebp)
80105163:	e8 bb 00 00 00       	call   80105223 <holding>
80105168:	83 c4 10             	add    $0x10,%esp
8010516b:	85 c0                	test   %eax,%eax
8010516d:	75 0d                	jne    8010517c <release+0x25>
    panic("release");
8010516f:	83 ec 0c             	sub    $0xc,%esp
80105172:	68 25 c6 10 80       	push   $0x8010c625
80105177:	e8 ea b3 ff ff       	call   80100566 <panic>

  lk->pcs[0] = 0;
8010517c:	8b 45 08             	mov    0x8(%ebp),%eax
8010517f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
  lk->cpu = 0;
80105186:	8b 45 08             	mov    0x8(%ebp),%eax
80105189:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  // But the 2007 Intel 64 Architecture Memory Ordering White
  // Paper says that Intel 64 and IA-32 will not move a load
  // after a store. So lock->locked = 0 would work here.
  // The xchg being asm volatile ensures gcc emits it after
  // the above assignments (and after the critical section).
  xchg(&lk->locked, 0);
80105190:	8b 45 08             	mov    0x8(%ebp),%eax
80105193:	83 ec 08             	sub    $0x8,%esp
80105196:	6a 00                	push   $0x0
80105198:	50                   	push   %eax
80105199:	e8 16 ff ff ff       	call   801050b4 <xchg>
8010519e:	83 c4 10             	add    $0x10,%esp

  popcli();
801051a1:	e8 ec 00 00 00       	call   80105292 <popcli>
}
801051a6:	90                   	nop
801051a7:	c9                   	leave  
801051a8:	c3                   	ret    

801051a9 <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
void
getcallerpcs(void *v, uint pcs[])
{
801051a9:	55                   	push   %ebp
801051aa:	89 e5                	mov    %esp,%ebp
801051ac:	83 ec 10             	sub    $0x10,%esp
  uint *ebp;
  int i;
  
  ebp = (uint*)v - 2;
801051af:	8b 45 08             	mov    0x8(%ebp),%eax
801051b2:	83 e8 08             	sub    $0x8,%eax
801051b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for(i = 0; i < 10; i++){
801051b8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
801051bf:	eb 38                	jmp    801051f9 <getcallerpcs+0x50>
    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
801051c1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
801051c5:	74 53                	je     8010521a <getcallerpcs+0x71>
801051c7:	81 7d fc ff ff ff 7f 	cmpl   $0x7fffffff,-0x4(%ebp)
801051ce:	76 4a                	jbe    8010521a <getcallerpcs+0x71>
801051d0:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
801051d4:	74 44                	je     8010521a <getcallerpcs+0x71>
      break;
    pcs[i] = ebp[1];     // saved %eip
801051d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
801051d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801051e0:	8b 45 0c             	mov    0xc(%ebp),%eax
801051e3:	01 c2                	add    %eax,%edx
801051e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
801051e8:	8b 40 04             	mov    0x4(%eax),%eax
801051eb:	89 02                	mov    %eax,(%edx)
    ebp = (uint*)ebp[0]; // saved %ebp
801051ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
801051f0:	8b 00                	mov    (%eax),%eax
801051f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
{
  uint *ebp;
  int i;
  
  ebp = (uint*)v - 2;
  for(i = 0; i < 10; i++){
801051f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
801051f9:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
801051fd:	7e c2                	jle    801051c1 <getcallerpcs+0x18>
    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
      break;
    pcs[i] = ebp[1];     // saved %eip
    ebp = (uint*)ebp[0]; // saved %ebp
  }
  for(; i < 10; i++)
801051ff:	eb 19                	jmp    8010521a <getcallerpcs+0x71>
    pcs[i] = 0;
80105201:	8b 45 f8             	mov    -0x8(%ebp),%eax
80105204:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010520b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010520e:	01 d0                	add    %edx,%eax
80105210:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
      break;
    pcs[i] = ebp[1];     // saved %eip
    ebp = (uint*)ebp[0]; // saved %ebp
  }
  for(; i < 10; i++)
80105216:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
8010521a:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
8010521e:	7e e1                	jle    80105201 <getcallerpcs+0x58>
    pcs[i] = 0;
}
80105220:	90                   	nop
80105221:	c9                   	leave  
80105222:	c3                   	ret    

80105223 <holding>:

// Check whether this cpu is holding the lock.
int
holding(struct spinlock *lock)
{
80105223:	55                   	push   %ebp
80105224:	89 e5                	mov    %esp,%ebp
  return lock->locked && lock->cpu == cpu;
80105226:	8b 45 08             	mov    0x8(%ebp),%eax
80105229:	8b 00                	mov    (%eax),%eax
8010522b:	85 c0                	test   %eax,%eax
8010522d:	74 17                	je     80105246 <holding+0x23>
8010522f:	8b 45 08             	mov    0x8(%ebp),%eax
80105232:	8b 50 08             	mov    0x8(%eax),%edx
80105235:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010523b:	39 c2                	cmp    %eax,%edx
8010523d:	75 07                	jne    80105246 <holding+0x23>
8010523f:	b8 01 00 00 00       	mov    $0x1,%eax
80105244:	eb 05                	jmp    8010524b <holding+0x28>
80105246:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010524b:	5d                   	pop    %ebp
8010524c:	c3                   	ret    

8010524d <pushcli>:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void
pushcli(void)
{
8010524d:	55                   	push   %ebp
8010524e:	89 e5                	mov    %esp,%ebp
80105250:	83 ec 10             	sub    $0x10,%esp
  int eflags;
  
  eflags = readeflags();
80105253:	e8 3e fe ff ff       	call   80105096 <readeflags>
80105258:	89 45 fc             	mov    %eax,-0x4(%ebp)
  cli();
8010525b:	e8 46 fe ff ff       	call   801050a6 <cli>
  if(cpu->ncli++ == 0)
80105260:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80105267:	8b 82 ac 00 00 00    	mov    0xac(%edx),%eax
8010526d:	8d 48 01             	lea    0x1(%eax),%ecx
80105270:	89 8a ac 00 00 00    	mov    %ecx,0xac(%edx)
80105276:	85 c0                	test   %eax,%eax
80105278:	75 15                	jne    8010528f <pushcli+0x42>
    cpu->intena = eflags & FL_IF;
8010527a:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80105280:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105283:	81 e2 00 02 00 00    	and    $0x200,%edx
80105289:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
8010528f:	90                   	nop
80105290:	c9                   	leave  
80105291:	c3                   	ret    

80105292 <popcli>:

void
popcli(void)
{
80105292:	55                   	push   %ebp
80105293:	89 e5                	mov    %esp,%ebp
80105295:	83 ec 08             	sub    $0x8,%esp
  if(readeflags()&FL_IF)
80105298:	e8 f9 fd ff ff       	call   80105096 <readeflags>
8010529d:	25 00 02 00 00       	and    $0x200,%eax
801052a2:	85 c0                	test   %eax,%eax
801052a4:	74 0d                	je     801052b3 <popcli+0x21>
    panic("popcli - interruptible");
801052a6:	83 ec 0c             	sub    $0xc,%esp
801052a9:	68 2d c6 10 80       	push   $0x8010c62d
801052ae:	e8 b3 b2 ff ff       	call   80100566 <panic>
  if(--cpu->ncli < 0)
801052b3:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801052b9:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
801052bf:	83 ea 01             	sub    $0x1,%edx
801052c2:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
801052c8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
801052ce:	85 c0                	test   %eax,%eax
801052d0:	79 0d                	jns    801052df <popcli+0x4d>
    panic("popcli");
801052d2:	83 ec 0c             	sub    $0xc,%esp
801052d5:	68 44 c6 10 80       	push   $0x8010c644
801052da:	e8 87 b2 ff ff       	call   80100566 <panic>
  if(cpu->ncli == 0 && cpu->intena)
801052df:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801052e5:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
801052eb:	85 c0                	test   %eax,%eax
801052ed:	75 15                	jne    80105304 <popcli+0x72>
801052ef:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801052f5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
801052fb:	85 c0                	test   %eax,%eax
801052fd:	74 05                	je     80105304 <popcli+0x72>
    sti();
801052ff:	e8 a9 fd ff ff       	call   801050ad <sti>
}
80105304:	90                   	nop
80105305:	c9                   	leave  
80105306:	c3                   	ret    

80105307 <stosb>:
               "cc");
}

static inline void
stosb(void *addr, int data, int cnt)
{
80105307:	55                   	push   %ebp
80105308:	89 e5                	mov    %esp,%ebp
8010530a:	57                   	push   %edi
8010530b:	53                   	push   %ebx
  asm volatile("cld; rep stosb" :
8010530c:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010530f:	8b 55 10             	mov    0x10(%ebp),%edx
80105312:	8b 45 0c             	mov    0xc(%ebp),%eax
80105315:	89 cb                	mov    %ecx,%ebx
80105317:	89 df                	mov    %ebx,%edi
80105319:	89 d1                	mov    %edx,%ecx
8010531b:	fc                   	cld    
8010531c:	f3 aa                	rep stos %al,%es:(%edi)
8010531e:	89 ca                	mov    %ecx,%edx
80105320:	89 fb                	mov    %edi,%ebx
80105322:	89 5d 08             	mov    %ebx,0x8(%ebp)
80105325:	89 55 10             	mov    %edx,0x10(%ebp)
               "=D" (addr), "=c" (cnt) :
               "0" (addr), "1" (cnt), "a" (data) :
               "memory", "cc");
}
80105328:	90                   	nop
80105329:	5b                   	pop    %ebx
8010532a:	5f                   	pop    %edi
8010532b:	5d                   	pop    %ebp
8010532c:	c3                   	ret    

8010532d <stosl>:

static inline void
stosl(void *addr, int data, int cnt)
{
8010532d:	55                   	push   %ebp
8010532e:	89 e5                	mov    %esp,%ebp
80105330:	57                   	push   %edi
80105331:	53                   	push   %ebx
  asm volatile("cld; rep stosl" :
80105332:	8b 4d 08             	mov    0x8(%ebp),%ecx
80105335:	8b 55 10             	mov    0x10(%ebp),%edx
80105338:	8b 45 0c             	mov    0xc(%ebp),%eax
8010533b:	89 cb                	mov    %ecx,%ebx
8010533d:	89 df                	mov    %ebx,%edi
8010533f:	89 d1                	mov    %edx,%ecx
80105341:	fc                   	cld    
80105342:	f3 ab                	rep stos %eax,%es:(%edi)
80105344:	89 ca                	mov    %ecx,%edx
80105346:	89 fb                	mov    %edi,%ebx
80105348:	89 5d 08             	mov    %ebx,0x8(%ebp)
8010534b:	89 55 10             	mov    %edx,0x10(%ebp)
               "=D" (addr), "=c" (cnt) :
               "0" (addr), "1" (cnt), "a" (data) :
               "memory", "cc");
}
8010534e:	90                   	nop
8010534f:	5b                   	pop    %ebx
80105350:	5f                   	pop    %edi
80105351:	5d                   	pop    %ebp
80105352:	c3                   	ret    

80105353 <memset>:
#include "types.h"
#include "x86.h"

void*
memset(void *dst, int c, uint n)
{
80105353:	55                   	push   %ebp
80105354:	89 e5                	mov    %esp,%ebp
  if ((int)dst%4 == 0 && n%4 == 0){
80105356:	8b 45 08             	mov    0x8(%ebp),%eax
80105359:	83 e0 03             	and    $0x3,%eax
8010535c:	85 c0                	test   %eax,%eax
8010535e:	75 43                	jne    801053a3 <memset+0x50>
80105360:	8b 45 10             	mov    0x10(%ebp),%eax
80105363:	83 e0 03             	and    $0x3,%eax
80105366:	85 c0                	test   %eax,%eax
80105368:	75 39                	jne    801053a3 <memset+0x50>
    c &= 0xFF;
8010536a:	81 65 0c ff 00 00 00 	andl   $0xff,0xc(%ebp)
    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
80105371:	8b 45 10             	mov    0x10(%ebp),%eax
80105374:	c1 e8 02             	shr    $0x2,%eax
80105377:	89 c1                	mov    %eax,%ecx
80105379:	8b 45 0c             	mov    0xc(%ebp),%eax
8010537c:	c1 e0 18             	shl    $0x18,%eax
8010537f:	89 c2                	mov    %eax,%edx
80105381:	8b 45 0c             	mov    0xc(%ebp),%eax
80105384:	c1 e0 10             	shl    $0x10,%eax
80105387:	09 c2                	or     %eax,%edx
80105389:	8b 45 0c             	mov    0xc(%ebp),%eax
8010538c:	c1 e0 08             	shl    $0x8,%eax
8010538f:	09 d0                	or     %edx,%eax
80105391:	0b 45 0c             	or     0xc(%ebp),%eax
80105394:	51                   	push   %ecx
80105395:	50                   	push   %eax
80105396:	ff 75 08             	pushl  0x8(%ebp)
80105399:	e8 8f ff ff ff       	call   8010532d <stosl>
8010539e:	83 c4 0c             	add    $0xc,%esp
801053a1:	eb 12                	jmp    801053b5 <memset+0x62>
  } else
    stosb(dst, c, n);
801053a3:	8b 45 10             	mov    0x10(%ebp),%eax
801053a6:	50                   	push   %eax
801053a7:	ff 75 0c             	pushl  0xc(%ebp)
801053aa:	ff 75 08             	pushl  0x8(%ebp)
801053ad:	e8 55 ff ff ff       	call   80105307 <stosb>
801053b2:	83 c4 0c             	add    $0xc,%esp
  return dst;
801053b5:	8b 45 08             	mov    0x8(%ebp),%eax
}
801053b8:	c9                   	leave  
801053b9:	c3                   	ret    

801053ba <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
801053ba:	55                   	push   %ebp
801053bb:	89 e5                	mov    %esp,%ebp
801053bd:	83 ec 10             	sub    $0x10,%esp
  const uchar *s1, *s2;
  
  s1 = v1;
801053c0:	8b 45 08             	mov    0x8(%ebp),%eax
801053c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  s2 = v2;
801053c6:	8b 45 0c             	mov    0xc(%ebp),%eax
801053c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(n-- > 0){
801053cc:	eb 30                	jmp    801053fe <memcmp+0x44>
    if(*s1 != *s2)
801053ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
801053d1:	0f b6 10             	movzbl (%eax),%edx
801053d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
801053d7:	0f b6 00             	movzbl (%eax),%eax
801053da:	38 c2                	cmp    %al,%dl
801053dc:	74 18                	je     801053f6 <memcmp+0x3c>
      return *s1 - *s2;
801053de:	8b 45 fc             	mov    -0x4(%ebp),%eax
801053e1:	0f b6 00             	movzbl (%eax),%eax
801053e4:	0f b6 d0             	movzbl %al,%edx
801053e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
801053ea:	0f b6 00             	movzbl (%eax),%eax
801053ed:	0f b6 c0             	movzbl %al,%eax
801053f0:	29 c2                	sub    %eax,%edx
801053f2:	89 d0                	mov    %edx,%eax
801053f4:	eb 1a                	jmp    80105410 <memcmp+0x56>
    s1++, s2++;
801053f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
801053fa:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
{
  const uchar *s1, *s2;
  
  s1 = v1;
  s2 = v2;
  while(n-- > 0){
801053fe:	8b 45 10             	mov    0x10(%ebp),%eax
80105401:	8d 50 ff             	lea    -0x1(%eax),%edx
80105404:	89 55 10             	mov    %edx,0x10(%ebp)
80105407:	85 c0                	test   %eax,%eax
80105409:	75 c3                	jne    801053ce <memcmp+0x14>
    if(*s1 != *s2)
      return *s1 - *s2;
    s1++, s2++;
  }

  return 0;
8010540b:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105410:	c9                   	leave  
80105411:	c3                   	ret    

80105412 <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
80105412:	55                   	push   %ebp
80105413:	89 e5                	mov    %esp,%ebp
80105415:	83 ec 10             	sub    $0x10,%esp
  const char *s;
  char *d;

  s = src;
80105418:	8b 45 0c             	mov    0xc(%ebp),%eax
8010541b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  d = dst;
8010541e:	8b 45 08             	mov    0x8(%ebp),%eax
80105421:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(s < d && s + n > d){
80105424:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105427:	3b 45 f8             	cmp    -0x8(%ebp),%eax
8010542a:	73 54                	jae    80105480 <memmove+0x6e>
8010542c:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010542f:	8b 45 10             	mov    0x10(%ebp),%eax
80105432:	01 d0                	add    %edx,%eax
80105434:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80105437:	76 47                	jbe    80105480 <memmove+0x6e>
    s += n;
80105439:	8b 45 10             	mov    0x10(%ebp),%eax
8010543c:	01 45 fc             	add    %eax,-0x4(%ebp)
    d += n;
8010543f:	8b 45 10             	mov    0x10(%ebp),%eax
80105442:	01 45 f8             	add    %eax,-0x8(%ebp)
    while(n-- > 0)
80105445:	eb 13                	jmp    8010545a <memmove+0x48>
      *--d = *--s;
80105447:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
8010544b:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
8010544f:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105452:	0f b6 10             	movzbl (%eax),%edx
80105455:	8b 45 f8             	mov    -0x8(%ebp),%eax
80105458:	88 10                	mov    %dl,(%eax)
  s = src;
  d = dst;
  if(s < d && s + n > d){
    s += n;
    d += n;
    while(n-- > 0)
8010545a:	8b 45 10             	mov    0x10(%ebp),%eax
8010545d:	8d 50 ff             	lea    -0x1(%eax),%edx
80105460:	89 55 10             	mov    %edx,0x10(%ebp)
80105463:	85 c0                	test   %eax,%eax
80105465:	75 e0                	jne    80105447 <memmove+0x35>
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
80105467:	eb 24                	jmp    8010548d <memmove+0x7b>
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
      *d++ = *s++;
80105469:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010546c:	8d 50 01             	lea    0x1(%eax),%edx
8010546f:	89 55 f8             	mov    %edx,-0x8(%ebp)
80105472:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105475:	8d 4a 01             	lea    0x1(%edx),%ecx
80105478:	89 4d fc             	mov    %ecx,-0x4(%ebp)
8010547b:	0f b6 12             	movzbl (%edx),%edx
8010547e:	88 10                	mov    %dl,(%eax)
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
80105480:	8b 45 10             	mov    0x10(%ebp),%eax
80105483:	8d 50 ff             	lea    -0x1(%eax),%edx
80105486:	89 55 10             	mov    %edx,0x10(%ebp)
80105489:	85 c0                	test   %eax,%eax
8010548b:	75 dc                	jne    80105469 <memmove+0x57>
      *d++ = *s++;

  return dst;
8010548d:	8b 45 08             	mov    0x8(%ebp),%eax
}
80105490:	c9                   	leave  
80105491:	c3                   	ret    

80105492 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
80105492:	55                   	push   %ebp
80105493:	89 e5                	mov    %esp,%ebp
  return memmove(dst, src, n);
80105495:	ff 75 10             	pushl  0x10(%ebp)
80105498:	ff 75 0c             	pushl  0xc(%ebp)
8010549b:	ff 75 08             	pushl  0x8(%ebp)
8010549e:	e8 6f ff ff ff       	call   80105412 <memmove>
801054a3:	83 c4 0c             	add    $0xc,%esp
}
801054a6:	c9                   	leave  
801054a7:	c3                   	ret    

801054a8 <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
801054a8:	55                   	push   %ebp
801054a9:	89 e5                	mov    %esp,%ebp
  while(n > 0 && *p && *p == *q)
801054ab:	eb 0c                	jmp    801054b9 <strncmp+0x11>
    n--, p++, q++;
801054ad:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
801054b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
801054b5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint n)
{
  while(n > 0 && *p && *p == *q)
801054b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
801054bd:	74 1a                	je     801054d9 <strncmp+0x31>
801054bf:	8b 45 08             	mov    0x8(%ebp),%eax
801054c2:	0f b6 00             	movzbl (%eax),%eax
801054c5:	84 c0                	test   %al,%al
801054c7:	74 10                	je     801054d9 <strncmp+0x31>
801054c9:	8b 45 08             	mov    0x8(%ebp),%eax
801054cc:	0f b6 10             	movzbl (%eax),%edx
801054cf:	8b 45 0c             	mov    0xc(%ebp),%eax
801054d2:	0f b6 00             	movzbl (%eax),%eax
801054d5:	38 c2                	cmp    %al,%dl
801054d7:	74 d4                	je     801054ad <strncmp+0x5>
    n--, p++, q++;
  if(n == 0)
801054d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
801054dd:	75 07                	jne    801054e6 <strncmp+0x3e>
    return 0;
801054df:	b8 00 00 00 00       	mov    $0x0,%eax
801054e4:	eb 16                	jmp    801054fc <strncmp+0x54>
  return (uchar)*p - (uchar)*q;
801054e6:	8b 45 08             	mov    0x8(%ebp),%eax
801054e9:	0f b6 00             	movzbl (%eax),%eax
801054ec:	0f b6 d0             	movzbl %al,%edx
801054ef:	8b 45 0c             	mov    0xc(%ebp),%eax
801054f2:	0f b6 00             	movzbl (%eax),%eax
801054f5:	0f b6 c0             	movzbl %al,%eax
801054f8:	29 c2                	sub    %eax,%edx
801054fa:	89 d0                	mov    %edx,%eax
}
801054fc:	5d                   	pop    %ebp
801054fd:	c3                   	ret    

801054fe <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
801054fe:	55                   	push   %ebp
801054ff:	89 e5                	mov    %esp,%ebp
80105501:	83 ec 10             	sub    $0x10,%esp
  char *os;
  
  os = s;
80105504:	8b 45 08             	mov    0x8(%ebp),%eax
80105507:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while(n-- > 0 && (*s++ = *t++) != 0)
8010550a:	90                   	nop
8010550b:	8b 45 10             	mov    0x10(%ebp),%eax
8010550e:	8d 50 ff             	lea    -0x1(%eax),%edx
80105511:	89 55 10             	mov    %edx,0x10(%ebp)
80105514:	85 c0                	test   %eax,%eax
80105516:	7e 2c                	jle    80105544 <strncpy+0x46>
80105518:	8b 45 08             	mov    0x8(%ebp),%eax
8010551b:	8d 50 01             	lea    0x1(%eax),%edx
8010551e:	89 55 08             	mov    %edx,0x8(%ebp)
80105521:	8b 55 0c             	mov    0xc(%ebp),%edx
80105524:	8d 4a 01             	lea    0x1(%edx),%ecx
80105527:	89 4d 0c             	mov    %ecx,0xc(%ebp)
8010552a:	0f b6 12             	movzbl (%edx),%edx
8010552d:	88 10                	mov    %dl,(%eax)
8010552f:	0f b6 00             	movzbl (%eax),%eax
80105532:	84 c0                	test   %al,%al
80105534:	75 d5                	jne    8010550b <strncpy+0xd>
    ;
  while(n-- > 0)
80105536:	eb 0c                	jmp    80105544 <strncpy+0x46>
    *s++ = 0;
80105538:	8b 45 08             	mov    0x8(%ebp),%eax
8010553b:	8d 50 01             	lea    0x1(%eax),%edx
8010553e:	89 55 08             	mov    %edx,0x8(%ebp)
80105541:	c6 00 00             	movb   $0x0,(%eax)
  char *os;
  
  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
    ;
  while(n-- > 0)
80105544:	8b 45 10             	mov    0x10(%ebp),%eax
80105547:	8d 50 ff             	lea    -0x1(%eax),%edx
8010554a:	89 55 10             	mov    %edx,0x10(%ebp)
8010554d:	85 c0                	test   %eax,%eax
8010554f:	7f e7                	jg     80105538 <strncpy+0x3a>
    *s++ = 0;
  return os;
80105551:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80105554:	c9                   	leave  
80105555:	c3                   	ret    

80105556 <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
80105556:	55                   	push   %ebp
80105557:	89 e5                	mov    %esp,%ebp
80105559:	83 ec 10             	sub    $0x10,%esp
  char *os;
  
  os = s;
8010555c:	8b 45 08             	mov    0x8(%ebp),%eax
8010555f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if(n <= 0)
80105562:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105566:	7f 05                	jg     8010556d <safestrcpy+0x17>
    return os;
80105568:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010556b:	eb 31                	jmp    8010559e <safestrcpy+0x48>
  while(--n > 0 && (*s++ = *t++) != 0)
8010556d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
80105571:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105575:	7e 1e                	jle    80105595 <safestrcpy+0x3f>
80105577:	8b 45 08             	mov    0x8(%ebp),%eax
8010557a:	8d 50 01             	lea    0x1(%eax),%edx
8010557d:	89 55 08             	mov    %edx,0x8(%ebp)
80105580:	8b 55 0c             	mov    0xc(%ebp),%edx
80105583:	8d 4a 01             	lea    0x1(%edx),%ecx
80105586:	89 4d 0c             	mov    %ecx,0xc(%ebp)
80105589:	0f b6 12             	movzbl (%edx),%edx
8010558c:	88 10                	mov    %dl,(%eax)
8010558e:	0f b6 00             	movzbl (%eax),%eax
80105591:	84 c0                	test   %al,%al
80105593:	75 d8                	jne    8010556d <safestrcpy+0x17>
    ;
  *s = 0;
80105595:	8b 45 08             	mov    0x8(%ebp),%eax
80105598:	c6 00 00             	movb   $0x0,(%eax)
  return os;
8010559b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
8010559e:	c9                   	leave  
8010559f:	c3                   	ret    

801055a0 <strlen>:

int
strlen(const char *s)
{
801055a0:	55                   	push   %ebp
801055a1:	89 e5                	mov    %esp,%ebp
801055a3:	83 ec 10             	sub    $0x10,%esp
  int n;

  for(n = 0; s[n]; n++)
801055a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
801055ad:	eb 04                	jmp    801055b3 <strlen+0x13>
801055af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
801055b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
801055b6:	8b 45 08             	mov    0x8(%ebp),%eax
801055b9:	01 d0                	add    %edx,%eax
801055bb:	0f b6 00             	movzbl (%eax),%eax
801055be:	84 c0                	test   %al,%al
801055c0:	75 ed                	jne    801055af <strlen+0xf>
    ;
  return n;
801055c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801055c5:	c9                   	leave  
801055c6:	c3                   	ret    

801055c7 <swtch>:
# Save current register context in old
# and then load register context from new.

.globl swtch
swtch:
  movl 4(%esp), %eax
801055c7:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
801055cb:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-save registers
  pushl %ebp
801055cf:	55                   	push   %ebp
  pushl %ebx
801055d0:	53                   	push   %ebx
  pushl %esi
801055d1:	56                   	push   %esi
  pushl %edi
801055d2:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
801055d3:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
801055d5:	89 d4                	mov    %edx,%esp

  # Load new callee-save registers
  popl %edi
801055d7:	5f                   	pop    %edi
  popl %esi
801055d8:	5e                   	pop    %esi
  popl %ebx
801055d9:	5b                   	pop    %ebx
  popl %ebp
801055da:	5d                   	pop    %ebp
  ret
801055db:	c3                   	ret    

801055dc <fetchint>:
// to a saved program counter, and then the first argument.

// Fetch the int at addr from the current process.
int
fetchint(uint addr, int *ip)
{
801055dc:	55                   	push   %ebp
801055dd:	89 e5                	mov    %esp,%ebp
  if(addr >= proc->sz || addr+4 > proc->sz)
801055df:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801055e5:	8b 00                	mov    (%eax),%eax
801055e7:	3b 45 08             	cmp    0x8(%ebp),%eax
801055ea:	76 12                	jbe    801055fe <fetchint+0x22>
801055ec:	8b 45 08             	mov    0x8(%ebp),%eax
801055ef:	8d 50 04             	lea    0x4(%eax),%edx
801055f2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801055f8:	8b 00                	mov    (%eax),%eax
801055fa:	39 c2                	cmp    %eax,%edx
801055fc:	76 07                	jbe    80105605 <fetchint+0x29>
    return -1;
801055fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105603:	eb 0f                	jmp    80105614 <fetchint+0x38>
  *ip = *(int*)(addr);
80105605:	8b 45 08             	mov    0x8(%ebp),%eax
80105608:	8b 10                	mov    (%eax),%edx
8010560a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010560d:	89 10                	mov    %edx,(%eax)
  return 0;
8010560f:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105614:	5d                   	pop    %ebp
80105615:	c3                   	ret    

80105616 <fetchstr>:
// Fetch the nul-terminated string at addr from the current process.
// Doesn't actually copy the string - just sets *pp to point at it.
// Returns length of string, not including nul.
int
fetchstr(uint addr, char **pp)
{
80105616:	55                   	push   %ebp
80105617:	89 e5                	mov    %esp,%ebp
80105619:	83 ec 10             	sub    $0x10,%esp
  char *s, *ep;

  if(addr >= proc->sz)
8010561c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105622:	8b 00                	mov    (%eax),%eax
80105624:	3b 45 08             	cmp    0x8(%ebp),%eax
80105627:	77 07                	ja     80105630 <fetchstr+0x1a>
    return -1;
80105629:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010562e:	eb 46                	jmp    80105676 <fetchstr+0x60>
  *pp = (char*)addr;
80105630:	8b 55 08             	mov    0x8(%ebp),%edx
80105633:	8b 45 0c             	mov    0xc(%ebp),%eax
80105636:	89 10                	mov    %edx,(%eax)
  ep = (char*)proc->sz;
80105638:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010563e:	8b 00                	mov    (%eax),%eax
80105640:	89 45 f8             	mov    %eax,-0x8(%ebp)
  for(s = *pp; s < ep; s++)
80105643:	8b 45 0c             	mov    0xc(%ebp),%eax
80105646:	8b 00                	mov    (%eax),%eax
80105648:	89 45 fc             	mov    %eax,-0x4(%ebp)
8010564b:	eb 1c                	jmp    80105669 <fetchstr+0x53>
    if(*s == 0)
8010564d:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105650:	0f b6 00             	movzbl (%eax),%eax
80105653:	84 c0                	test   %al,%al
80105655:	75 0e                	jne    80105665 <fetchstr+0x4f>
      return s - *pp;
80105657:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010565a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010565d:	8b 00                	mov    (%eax),%eax
8010565f:	29 c2                	sub    %eax,%edx
80105661:	89 d0                	mov    %edx,%eax
80105663:	eb 11                	jmp    80105676 <fetchstr+0x60>

  if(addr >= proc->sz)
    return -1;
  *pp = (char*)addr;
  ep = (char*)proc->sz;
  for(s = *pp; s < ep; s++)
80105665:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80105669:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010566c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
8010566f:	72 dc                	jb     8010564d <fetchstr+0x37>
    if(*s == 0)
      return s - *pp;
  return -1;
80105671:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105676:	c9                   	leave  
80105677:	c3                   	ret    

80105678 <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
80105678:	55                   	push   %ebp
80105679:	89 e5                	mov    %esp,%ebp
  return fetchint(proc->tf->esp + 4 + 4*n, ip);
8010567b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105681:	8b 40 18             	mov    0x18(%eax),%eax
80105684:	8b 40 44             	mov    0x44(%eax),%eax
80105687:	8b 55 08             	mov    0x8(%ebp),%edx
8010568a:	c1 e2 02             	shl    $0x2,%edx
8010568d:	01 d0                	add    %edx,%eax
8010568f:	83 c0 04             	add    $0x4,%eax
80105692:	ff 75 0c             	pushl  0xc(%ebp)
80105695:	50                   	push   %eax
80105696:	e8 41 ff ff ff       	call   801055dc <fetchint>
8010569b:	83 c4 08             	add    $0x8,%esp
}
8010569e:	c9                   	leave  
8010569f:	c3                   	ret    

801056a0 <argptr>:
// Fetch the nth word-sized system call argument as a pointer
// to a block of memory of size n bytes.  Check that the pointer
// lies within the process address space.
int
argptr(int n, char **pp, int size)
{
801056a0:	55                   	push   %ebp
801056a1:	89 e5                	mov    %esp,%ebp
801056a3:	83 ec 10             	sub    $0x10,%esp
  int i;

  if(argint(n, &i) < 0)
801056a6:	8d 45 fc             	lea    -0x4(%ebp),%eax
801056a9:	50                   	push   %eax
801056aa:	ff 75 08             	pushl  0x8(%ebp)
801056ad:	e8 c6 ff ff ff       	call   80105678 <argint>
801056b2:	83 c4 08             	add    $0x8,%esp
801056b5:	85 c0                	test   %eax,%eax
801056b7:	79 07                	jns    801056c0 <argptr+0x20>
    return -1;
801056b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801056be:	eb 3b                	jmp    801056fb <argptr+0x5b>
  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
801056c0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801056c6:	8b 00                	mov    (%eax),%eax
801056c8:	8b 55 fc             	mov    -0x4(%ebp),%edx
801056cb:	39 d0                	cmp    %edx,%eax
801056cd:	76 16                	jbe    801056e5 <argptr+0x45>
801056cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
801056d2:	89 c2                	mov    %eax,%edx
801056d4:	8b 45 10             	mov    0x10(%ebp),%eax
801056d7:	01 c2                	add    %eax,%edx
801056d9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801056df:	8b 00                	mov    (%eax),%eax
801056e1:	39 c2                	cmp    %eax,%edx
801056e3:	76 07                	jbe    801056ec <argptr+0x4c>
    return -1;
801056e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801056ea:	eb 0f                	jmp    801056fb <argptr+0x5b>
  *pp = (char*)i;
801056ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
801056ef:	89 c2                	mov    %eax,%edx
801056f1:	8b 45 0c             	mov    0xc(%ebp),%eax
801056f4:	89 10                	mov    %edx,(%eax)
  return 0;
801056f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
801056fb:	c9                   	leave  
801056fc:	c3                   	ret    

801056fd <argstr>:
// Check that the pointer is valid and the string is nul-terminated.
// (There is no shared writable memory, so the string can't change
// between this check and being used by the kernel.)
int
argstr(int n, char **pp)
{
801056fd:	55                   	push   %ebp
801056fe:	89 e5                	mov    %esp,%ebp
80105700:	83 ec 10             	sub    $0x10,%esp
  int addr;
  if(argint(n, &addr) < 0)
80105703:	8d 45 fc             	lea    -0x4(%ebp),%eax
80105706:	50                   	push   %eax
80105707:	ff 75 08             	pushl  0x8(%ebp)
8010570a:	e8 69 ff ff ff       	call   80105678 <argint>
8010570f:	83 c4 08             	add    $0x8,%esp
80105712:	85 c0                	test   %eax,%eax
80105714:	79 07                	jns    8010571d <argstr+0x20>
    return -1;
80105716:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010571b:	eb 0f                	jmp    8010572c <argstr+0x2f>
  return fetchstr(addr, pp);
8010571d:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105720:	ff 75 0c             	pushl  0xc(%ebp)
80105723:	50                   	push   %eax
80105724:	e8 ed fe ff ff       	call   80105616 <fetchstr>
80105729:	83 c4 08             	add    $0x8,%esp
}
8010572c:	c9                   	leave  
8010572d:	c3                   	ret    

8010572e <syscall>:
[SYS_destroywindow]    sys_destroywindow,
};

void
syscall(void)
{
8010572e:	55                   	push   %ebp
8010572f:	89 e5                	mov    %esp,%ebp
80105731:	53                   	push   %ebx
80105732:	83 ec 14             	sub    $0x14,%esp
  int num;

  num = proc->tf->eax;
80105735:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010573b:	8b 40 18             	mov    0x18(%eax),%eax
8010573e:	8b 40 1c             	mov    0x1c(%eax),%eax
80105741:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
80105744:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105748:	7e 30                	jle    8010577a <syscall+0x4c>
8010574a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010574d:	83 f8 1b             	cmp    $0x1b,%eax
80105750:	77 28                	ja     8010577a <syscall+0x4c>
80105752:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105755:	8b 04 85 40 30 11 80 	mov    -0x7feecfc0(,%eax,4),%eax
8010575c:	85 c0                	test   %eax,%eax
8010575e:	74 1a                	je     8010577a <syscall+0x4c>
    proc->tf->eax = syscalls[num]();
80105760:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105766:	8b 58 18             	mov    0x18(%eax),%ebx
80105769:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010576c:	8b 04 85 40 30 11 80 	mov    -0x7feecfc0(,%eax,4),%eax
80105773:	ff d0                	call   *%eax
80105775:	89 43 1c             	mov    %eax,0x1c(%ebx)
80105778:	eb 34                	jmp    801057ae <syscall+0x80>
  } else {
    cprintf("%d %s: unknown sys call %d\n",
            proc->pid, proc->name, num);
8010577a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105780:	8d 50 6c             	lea    0x6c(%eax),%edx
80105783:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax

  num = proc->tf->eax;
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    proc->tf->eax = syscalls[num]();
  } else {
    cprintf("%d %s: unknown sys call %d\n",
80105789:	8b 40 10             	mov    0x10(%eax),%eax
8010578c:	ff 75 f4             	pushl  -0xc(%ebp)
8010578f:	52                   	push   %edx
80105790:	50                   	push   %eax
80105791:	68 4b c6 10 80       	push   $0x8010c64b
80105796:	e8 2b ac ff ff       	call   801003c6 <cprintf>
8010579b:	83 c4 10             	add    $0x10,%esp
            proc->pid, proc->name, num);
    proc->tf->eax = -1;
8010579e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801057a4:	8b 40 18             	mov    0x18(%eax),%eax
801057a7:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
  }
}
801057ae:	90                   	nop
801057af:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801057b2:	c9                   	leave  
801057b3:	c3                   	ret    

801057b4 <argfd>:

// Fetch the nth word-sized system call argument as a file descriptor
// and return both the descriptor and the corresponding struct file.
static int
argfd(int n, int *pfd, struct file **pf)
{
801057b4:	55                   	push   %ebp
801057b5:	89 e5                	mov    %esp,%ebp
801057b7:	83 ec 18             	sub    $0x18,%esp
  int fd;
  struct file *f;

  if(argint(n, &fd) < 0)
801057ba:	83 ec 08             	sub    $0x8,%esp
801057bd:	8d 45 f0             	lea    -0x10(%ebp),%eax
801057c0:	50                   	push   %eax
801057c1:	ff 75 08             	pushl  0x8(%ebp)
801057c4:	e8 af fe ff ff       	call   80105678 <argint>
801057c9:	83 c4 10             	add    $0x10,%esp
801057cc:	85 c0                	test   %eax,%eax
801057ce:	79 07                	jns    801057d7 <argfd+0x23>
    return -1;
801057d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801057d5:	eb 50                	jmp    80105827 <argfd+0x73>
  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
801057d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801057da:	85 c0                	test   %eax,%eax
801057dc:	78 21                	js     801057ff <argfd+0x4b>
801057de:	8b 45 f0             	mov    -0x10(%ebp),%eax
801057e1:	83 f8 0f             	cmp    $0xf,%eax
801057e4:	7f 19                	jg     801057ff <argfd+0x4b>
801057e6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801057ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
801057ef:	83 c2 08             	add    $0x8,%edx
801057f2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
801057f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
801057f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801057fd:	75 07                	jne    80105806 <argfd+0x52>
    return -1;
801057ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105804:	eb 21                	jmp    80105827 <argfd+0x73>
  if(pfd)
80105806:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010580a:	74 08                	je     80105814 <argfd+0x60>
    *pfd = fd;
8010580c:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010580f:	8b 45 0c             	mov    0xc(%ebp),%eax
80105812:	89 10                	mov    %edx,(%eax)
  if(pf)
80105814:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105818:	74 08                	je     80105822 <argfd+0x6e>
    *pf = f;
8010581a:	8b 45 10             	mov    0x10(%ebp),%eax
8010581d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105820:	89 10                	mov    %edx,(%eax)
  return 0;
80105822:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105827:	c9                   	leave  
80105828:	c3                   	ret    

80105829 <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
static int
fdalloc(struct file *f)
{
80105829:	55                   	push   %ebp
8010582a:	89 e5                	mov    %esp,%ebp
8010582c:	83 ec 10             	sub    $0x10,%esp
  int fd;

  for(fd = 0; fd < NOFILE; fd++){
8010582f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80105836:	eb 30                	jmp    80105868 <fdalloc+0x3f>
    if(proc->ofile[fd] == 0){
80105838:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010583e:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105841:	83 c2 08             	add    $0x8,%edx
80105844:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80105848:	85 c0                	test   %eax,%eax
8010584a:	75 18                	jne    80105864 <fdalloc+0x3b>
      proc->ofile[fd] = f;
8010584c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105852:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105855:	8d 4a 08             	lea    0x8(%edx),%ecx
80105858:	8b 55 08             	mov    0x8(%ebp),%edx
8010585b:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return fd;
8010585f:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105862:	eb 0f                	jmp    80105873 <fdalloc+0x4a>
static int
fdalloc(struct file *f)
{
  int fd;

  for(fd = 0; fd < NOFILE; fd++){
80105864:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80105868:	83 7d fc 0f          	cmpl   $0xf,-0x4(%ebp)
8010586c:	7e ca                	jle    80105838 <fdalloc+0xf>
    if(proc->ofile[fd] == 0){
      proc->ofile[fd] = f;
      return fd;
    }
  }
  return -1;
8010586e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105873:	c9                   	leave  
80105874:	c3                   	ret    

80105875 <sys_dup>:

int
sys_dup(void)
{
80105875:	55                   	push   %ebp
80105876:	89 e5                	mov    %esp,%ebp
80105878:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  int fd;
  
  if(argfd(0, 0, &f) < 0)
8010587b:	83 ec 04             	sub    $0x4,%esp
8010587e:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105881:	50                   	push   %eax
80105882:	6a 00                	push   $0x0
80105884:	6a 00                	push   $0x0
80105886:	e8 29 ff ff ff       	call   801057b4 <argfd>
8010588b:	83 c4 10             	add    $0x10,%esp
8010588e:	85 c0                	test   %eax,%eax
80105890:	79 07                	jns    80105899 <sys_dup+0x24>
    return -1;
80105892:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105897:	eb 31                	jmp    801058ca <sys_dup+0x55>
  if((fd=fdalloc(f)) < 0)
80105899:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010589c:	83 ec 0c             	sub    $0xc,%esp
8010589f:	50                   	push   %eax
801058a0:	e8 84 ff ff ff       	call   80105829 <fdalloc>
801058a5:	83 c4 10             	add    $0x10,%esp
801058a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
801058ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801058af:	79 07                	jns    801058b8 <sys_dup+0x43>
    return -1;
801058b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801058b6:	eb 12                	jmp    801058ca <sys_dup+0x55>
  filedup(f);
801058b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801058bb:	83 ec 0c             	sub    $0xc,%esp
801058be:	50                   	push   %eax
801058bf:	e8 04 b7 ff ff       	call   80100fc8 <filedup>
801058c4:	83 c4 10             	add    $0x10,%esp
  return fd;
801058c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801058ca:	c9                   	leave  
801058cb:	c3                   	ret    

801058cc <sys_read>:

int
sys_read(void)
{
801058cc:	55                   	push   %ebp
801058cd:	89 e5                	mov    %esp,%ebp
801058cf:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  int n;
  char *p;

  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
801058d2:	83 ec 04             	sub    $0x4,%esp
801058d5:	8d 45 f4             	lea    -0xc(%ebp),%eax
801058d8:	50                   	push   %eax
801058d9:	6a 00                	push   $0x0
801058db:	6a 00                	push   $0x0
801058dd:	e8 d2 fe ff ff       	call   801057b4 <argfd>
801058e2:	83 c4 10             	add    $0x10,%esp
801058e5:	85 c0                	test   %eax,%eax
801058e7:	78 2e                	js     80105917 <sys_read+0x4b>
801058e9:	83 ec 08             	sub    $0x8,%esp
801058ec:	8d 45 f0             	lea    -0x10(%ebp),%eax
801058ef:	50                   	push   %eax
801058f0:	6a 02                	push   $0x2
801058f2:	e8 81 fd ff ff       	call   80105678 <argint>
801058f7:	83 c4 10             	add    $0x10,%esp
801058fa:	85 c0                	test   %eax,%eax
801058fc:	78 19                	js     80105917 <sys_read+0x4b>
801058fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105901:	83 ec 04             	sub    $0x4,%esp
80105904:	50                   	push   %eax
80105905:	8d 45 ec             	lea    -0x14(%ebp),%eax
80105908:	50                   	push   %eax
80105909:	6a 01                	push   $0x1
8010590b:	e8 90 fd ff ff       	call   801056a0 <argptr>
80105910:	83 c4 10             	add    $0x10,%esp
80105913:	85 c0                	test   %eax,%eax
80105915:	79 07                	jns    8010591e <sys_read+0x52>
    return -1;
80105917:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010591c:	eb 17                	jmp    80105935 <sys_read+0x69>
  return fileread(f, p, n);
8010591e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
80105921:	8b 55 ec             	mov    -0x14(%ebp),%edx
80105924:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105927:	83 ec 04             	sub    $0x4,%esp
8010592a:	51                   	push   %ecx
8010592b:	52                   	push   %edx
8010592c:	50                   	push   %eax
8010592d:	e8 26 b8 ff ff       	call   80101158 <fileread>
80105932:	83 c4 10             	add    $0x10,%esp
}
80105935:	c9                   	leave  
80105936:	c3                   	ret    

80105937 <sys_write>:

int
sys_write(void)
{
80105937:	55                   	push   %ebp
80105938:	89 e5                	mov    %esp,%ebp
8010593a:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  int n;
  char *p;

  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
8010593d:	83 ec 04             	sub    $0x4,%esp
80105940:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105943:	50                   	push   %eax
80105944:	6a 00                	push   $0x0
80105946:	6a 00                	push   $0x0
80105948:	e8 67 fe ff ff       	call   801057b4 <argfd>
8010594d:	83 c4 10             	add    $0x10,%esp
80105950:	85 c0                	test   %eax,%eax
80105952:	78 2e                	js     80105982 <sys_write+0x4b>
80105954:	83 ec 08             	sub    $0x8,%esp
80105957:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010595a:	50                   	push   %eax
8010595b:	6a 02                	push   $0x2
8010595d:	e8 16 fd ff ff       	call   80105678 <argint>
80105962:	83 c4 10             	add    $0x10,%esp
80105965:	85 c0                	test   %eax,%eax
80105967:	78 19                	js     80105982 <sys_write+0x4b>
80105969:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010596c:	83 ec 04             	sub    $0x4,%esp
8010596f:	50                   	push   %eax
80105970:	8d 45 ec             	lea    -0x14(%ebp),%eax
80105973:	50                   	push   %eax
80105974:	6a 01                	push   $0x1
80105976:	e8 25 fd ff ff       	call   801056a0 <argptr>
8010597b:	83 c4 10             	add    $0x10,%esp
8010597e:	85 c0                	test   %eax,%eax
80105980:	79 07                	jns    80105989 <sys_write+0x52>
    return -1;
80105982:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105987:	eb 17                	jmp    801059a0 <sys_write+0x69>
  return filewrite(f, p, n);
80105989:	8b 4d f0             	mov    -0x10(%ebp),%ecx
8010598c:	8b 55 ec             	mov    -0x14(%ebp),%edx
8010598f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105992:	83 ec 04             	sub    $0x4,%esp
80105995:	51                   	push   %ecx
80105996:	52                   	push   %edx
80105997:	50                   	push   %eax
80105998:	e8 73 b8 ff ff       	call   80101210 <filewrite>
8010599d:	83 c4 10             	add    $0x10,%esp
}
801059a0:	c9                   	leave  
801059a1:	c3                   	ret    

801059a2 <sys_close>:

int
sys_close(void)
{
801059a2:	55                   	push   %ebp
801059a3:	89 e5                	mov    %esp,%ebp
801059a5:	83 ec 18             	sub    $0x18,%esp
  int fd;
  struct file *f;
  
  if(argfd(0, &fd, &f) < 0)
801059a8:	83 ec 04             	sub    $0x4,%esp
801059ab:	8d 45 f0             	lea    -0x10(%ebp),%eax
801059ae:	50                   	push   %eax
801059af:	8d 45 f4             	lea    -0xc(%ebp),%eax
801059b2:	50                   	push   %eax
801059b3:	6a 00                	push   $0x0
801059b5:	e8 fa fd ff ff       	call   801057b4 <argfd>
801059ba:	83 c4 10             	add    $0x10,%esp
801059bd:	85 c0                	test   %eax,%eax
801059bf:	79 07                	jns    801059c8 <sys_close+0x26>
    return -1;
801059c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801059c6:	eb 28                	jmp    801059f0 <sys_close+0x4e>
  proc->ofile[fd] = 0;
801059c8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801059ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
801059d1:	83 c2 08             	add    $0x8,%edx
801059d4:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
801059db:	00 
  fileclose(f);
801059dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801059df:	83 ec 0c             	sub    $0xc,%esp
801059e2:	50                   	push   %eax
801059e3:	e8 31 b6 ff ff       	call   80101019 <fileclose>
801059e8:	83 c4 10             	add    $0x10,%esp
  return 0;
801059eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
801059f0:	c9                   	leave  
801059f1:	c3                   	ret    

801059f2 <sys_fstat>:

int
sys_fstat(void)
{
801059f2:	55                   	push   %ebp
801059f3:	89 e5                	mov    %esp,%ebp
801059f5:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  struct stat *st;
  
  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
801059f8:	83 ec 04             	sub    $0x4,%esp
801059fb:	8d 45 f4             	lea    -0xc(%ebp),%eax
801059fe:	50                   	push   %eax
801059ff:	6a 00                	push   $0x0
80105a01:	6a 00                	push   $0x0
80105a03:	e8 ac fd ff ff       	call   801057b4 <argfd>
80105a08:	83 c4 10             	add    $0x10,%esp
80105a0b:	85 c0                	test   %eax,%eax
80105a0d:	78 17                	js     80105a26 <sys_fstat+0x34>
80105a0f:	83 ec 04             	sub    $0x4,%esp
80105a12:	6a 14                	push   $0x14
80105a14:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105a17:	50                   	push   %eax
80105a18:	6a 01                	push   $0x1
80105a1a:	e8 81 fc ff ff       	call   801056a0 <argptr>
80105a1f:	83 c4 10             	add    $0x10,%esp
80105a22:	85 c0                	test   %eax,%eax
80105a24:	79 07                	jns    80105a2d <sys_fstat+0x3b>
    return -1;
80105a26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105a2b:	eb 13                	jmp    80105a40 <sys_fstat+0x4e>
  return filestat(f, st);
80105a2d:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105a30:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105a33:	83 ec 08             	sub    $0x8,%esp
80105a36:	52                   	push   %edx
80105a37:	50                   	push   %eax
80105a38:	e8 c4 b6 ff ff       	call   80101101 <filestat>
80105a3d:	83 c4 10             	add    $0x10,%esp
}
80105a40:	c9                   	leave  
80105a41:	c3                   	ret    

80105a42 <sys_link>:

// Create the path new as a link to the same inode as old.
int
sys_link(void)
{
80105a42:	55                   	push   %ebp
80105a43:	89 e5                	mov    %esp,%ebp
80105a45:	83 ec 38             	sub    $0x38,%esp
  char name[DIRSIZ], *new, *old;
  struct inode *dp, *ip;

  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
80105a48:	83 ec 08             	sub    $0x8,%esp
80105a4b:	8d 45 c8             	lea    -0x38(%ebp),%eax
80105a4e:	50                   	push   %eax
80105a4f:	6a 00                	push   $0x0
80105a51:	e8 a7 fc ff ff       	call   801056fd <argstr>
80105a56:	83 c4 10             	add    $0x10,%esp
80105a59:	85 c0                	test   %eax,%eax
80105a5b:	78 15                	js     80105a72 <sys_link+0x30>
80105a5d:	83 ec 08             	sub    $0x8,%esp
80105a60:	8d 45 cc             	lea    -0x34(%ebp),%eax
80105a63:	50                   	push   %eax
80105a64:	6a 01                	push   $0x1
80105a66:	e8 92 fc ff ff       	call   801056fd <argstr>
80105a6b:	83 c4 10             	add    $0x10,%esp
80105a6e:	85 c0                	test   %eax,%eax
80105a70:	79 0a                	jns    80105a7c <sys_link+0x3a>
    return -1;
80105a72:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105a77:	e9 68 01 00 00       	jmp    80105be4 <sys_link+0x1a2>

  begin_op();
80105a7c:	e8 de db ff ff       	call   8010365f <begin_op>
  if((ip = namei(old)) == 0){
80105a81:	8b 45 c8             	mov    -0x38(%ebp),%eax
80105a84:	83 ec 0c             	sub    $0xc,%esp
80105a87:	50                   	push   %eax
80105a88:	e8 68 cb ff ff       	call   801025f5 <namei>
80105a8d:	83 c4 10             	add    $0x10,%esp
80105a90:	89 45 f4             	mov    %eax,-0xc(%ebp)
80105a93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105a97:	75 0f                	jne    80105aa8 <sys_link+0x66>
    end_op();
80105a99:	e8 4d dc ff ff       	call   801036eb <end_op>
    return -1;
80105a9e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105aa3:	e9 3c 01 00 00       	jmp    80105be4 <sys_link+0x1a2>
  }

  ilock(ip);
80105aa8:	83 ec 0c             	sub    $0xc,%esp
80105aab:	ff 75 f4             	pushl  -0xc(%ebp)
80105aae:	e8 3b be ff ff       	call   801018ee <ilock>
80105ab3:	83 c4 10             	add    $0x10,%esp
  if(ip->type == T_DIR){
80105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ab9:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80105abd:	66 83 f8 01          	cmp    $0x1,%ax
80105ac1:	75 1d                	jne    80105ae0 <sys_link+0x9e>
    iunlockput(ip);
80105ac3:	83 ec 0c             	sub    $0xc,%esp
80105ac6:	ff 75 f4             	pushl  -0xc(%ebp)
80105ac9:	e8 da c0 ff ff       	call   80101ba8 <iunlockput>
80105ace:	83 c4 10             	add    $0x10,%esp
    end_op();
80105ad1:	e8 15 dc ff ff       	call   801036eb <end_op>
    return -1;
80105ad6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105adb:	e9 04 01 00 00       	jmp    80105be4 <sys_link+0x1a2>
  }

  ip->nlink++;
80105ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ae3:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80105ae7:	83 c0 01             	add    $0x1,%eax
80105aea:	89 c2                	mov    %eax,%edx
80105aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105aef:	66 89 50 16          	mov    %dx,0x16(%eax)
  iupdate(ip);
80105af3:	83 ec 0c             	sub    $0xc,%esp
80105af6:	ff 75 f4             	pushl  -0xc(%ebp)
80105af9:	e8 1c bc ff ff       	call   8010171a <iupdate>
80105afe:	83 c4 10             	add    $0x10,%esp
  iunlock(ip);
80105b01:	83 ec 0c             	sub    $0xc,%esp
80105b04:	ff 75 f4             	pushl  -0xc(%ebp)
80105b07:	e8 3a bf ff ff       	call   80101a46 <iunlock>
80105b0c:	83 c4 10             	add    $0x10,%esp

  if((dp = nameiparent(new, name)) == 0)
80105b0f:	8b 45 cc             	mov    -0x34(%ebp),%eax
80105b12:	83 ec 08             	sub    $0x8,%esp
80105b15:	8d 55 d2             	lea    -0x2e(%ebp),%edx
80105b18:	52                   	push   %edx
80105b19:	50                   	push   %eax
80105b1a:	e8 f2 ca ff ff       	call   80102611 <nameiparent>
80105b1f:	83 c4 10             	add    $0x10,%esp
80105b22:	89 45 f0             	mov    %eax,-0x10(%ebp)
80105b25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80105b29:	74 71                	je     80105b9c <sys_link+0x15a>
    goto bad;
  ilock(dp);
80105b2b:	83 ec 0c             	sub    $0xc,%esp
80105b2e:	ff 75 f0             	pushl  -0x10(%ebp)
80105b31:	e8 b8 bd ff ff       	call   801018ee <ilock>
80105b36:	83 c4 10             	add    $0x10,%esp
  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
80105b39:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105b3c:	8b 10                	mov    (%eax),%edx
80105b3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105b41:	8b 00                	mov    (%eax),%eax
80105b43:	39 c2                	cmp    %eax,%edx
80105b45:	75 1d                	jne    80105b64 <sys_link+0x122>
80105b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105b4a:	8b 40 04             	mov    0x4(%eax),%eax
80105b4d:	83 ec 04             	sub    $0x4,%esp
80105b50:	50                   	push   %eax
80105b51:	8d 45 d2             	lea    -0x2e(%ebp),%eax
80105b54:	50                   	push   %eax
80105b55:	ff 75 f0             	pushl  -0x10(%ebp)
80105b58:	e8 fc c7 ff ff       	call   80102359 <dirlink>
80105b5d:	83 c4 10             	add    $0x10,%esp
80105b60:	85 c0                	test   %eax,%eax
80105b62:	79 10                	jns    80105b74 <sys_link+0x132>
    iunlockput(dp);
80105b64:	83 ec 0c             	sub    $0xc,%esp
80105b67:	ff 75 f0             	pushl  -0x10(%ebp)
80105b6a:	e8 39 c0 ff ff       	call   80101ba8 <iunlockput>
80105b6f:	83 c4 10             	add    $0x10,%esp
    goto bad;
80105b72:	eb 29                	jmp    80105b9d <sys_link+0x15b>
  }
  iunlockput(dp);
80105b74:	83 ec 0c             	sub    $0xc,%esp
80105b77:	ff 75 f0             	pushl  -0x10(%ebp)
80105b7a:	e8 29 c0 ff ff       	call   80101ba8 <iunlockput>
80105b7f:	83 c4 10             	add    $0x10,%esp
  iput(ip);
80105b82:	83 ec 0c             	sub    $0xc,%esp
80105b85:	ff 75 f4             	pushl  -0xc(%ebp)
80105b88:	e8 2b bf ff ff       	call   80101ab8 <iput>
80105b8d:	83 c4 10             	add    $0x10,%esp

  end_op();
80105b90:	e8 56 db ff ff       	call   801036eb <end_op>

  return 0;
80105b95:	b8 00 00 00 00       	mov    $0x0,%eax
80105b9a:	eb 48                	jmp    80105be4 <sys_link+0x1a2>
  ip->nlink++;
  iupdate(ip);
  iunlock(ip);

  if((dp = nameiparent(new, name)) == 0)
    goto bad;
80105b9c:	90                   	nop
  end_op();

  return 0;

bad:
  ilock(ip);
80105b9d:	83 ec 0c             	sub    $0xc,%esp
80105ba0:	ff 75 f4             	pushl  -0xc(%ebp)
80105ba3:	e8 46 bd ff ff       	call   801018ee <ilock>
80105ba8:	83 c4 10             	add    $0x10,%esp
  ip->nlink--;
80105bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105bae:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80105bb2:	83 e8 01             	sub    $0x1,%eax
80105bb5:	89 c2                	mov    %eax,%edx
80105bb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105bba:	66 89 50 16          	mov    %dx,0x16(%eax)
  iupdate(ip);
80105bbe:	83 ec 0c             	sub    $0xc,%esp
80105bc1:	ff 75 f4             	pushl  -0xc(%ebp)
80105bc4:	e8 51 bb ff ff       	call   8010171a <iupdate>
80105bc9:	83 c4 10             	add    $0x10,%esp
  iunlockput(ip);
80105bcc:	83 ec 0c             	sub    $0xc,%esp
80105bcf:	ff 75 f4             	pushl  -0xc(%ebp)
80105bd2:	e8 d1 bf ff ff       	call   80101ba8 <iunlockput>
80105bd7:	83 c4 10             	add    $0x10,%esp
  end_op();
80105bda:	e8 0c db ff ff       	call   801036eb <end_op>
  return -1;
80105bdf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105be4:	c9                   	leave  
80105be5:	c3                   	ret    

80105be6 <isdirempty>:

// Is the directory dp empty except for "." and ".." ?
static int
isdirempty(struct inode *dp)
{
80105be6:	55                   	push   %ebp
80105be7:	89 e5                	mov    %esp,%ebp
80105be9:	83 ec 38             	sub    $0x38,%esp
  int off;
  struct dirent de;

  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
80105bec:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%ebp)
80105bf3:	eb 40                	jmp    80105c35 <isdirempty+0x4f>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80105bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105bf8:	6a 20                	push   $0x20
80105bfa:	50                   	push   %eax
80105bfb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80105bfe:	50                   	push   %eax
80105bff:	ff 75 08             	pushl  0x8(%ebp)
80105c02:	e8 9e c3 ff ff       	call   80101fa5 <readi>
80105c07:	83 c4 10             	add    $0x10,%esp
80105c0a:	83 f8 20             	cmp    $0x20,%eax
80105c0d:	74 0d                	je     80105c1c <isdirempty+0x36>
      panic("isdirempty: readi");
80105c0f:	83 ec 0c             	sub    $0xc,%esp
80105c12:	68 67 c6 10 80       	push   $0x8010c667
80105c17:	e8 4a a9 ff ff       	call   80100566 <panic>
    if(de.inum != 0)
80105c1c:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
80105c20:	66 85 c0             	test   %ax,%ax
80105c23:	74 07                	je     80105c2c <isdirempty+0x46>
      return 0;
80105c25:	b8 00 00 00 00       	mov    $0x0,%eax
80105c2a:	eb 1b                	jmp    80105c47 <isdirempty+0x61>
isdirempty(struct inode *dp)
{
  int off;
  struct dirent de;

  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
80105c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105c2f:	83 c0 20             	add    $0x20,%eax
80105c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
80105c35:	8b 45 08             	mov    0x8(%ebp),%eax
80105c38:	8b 50 18             	mov    0x18(%eax),%edx
80105c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105c3e:	39 c2                	cmp    %eax,%edx
80105c40:	77 b3                	ja     80105bf5 <isdirempty+0xf>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
      panic("isdirempty: readi");
    if(de.inum != 0)
      return 0;
  }
  return 1;
80105c42:	b8 01 00 00 00       	mov    $0x1,%eax
}
80105c47:	c9                   	leave  
80105c48:	c3                   	ret    

80105c49 <sys_unlink>:

//PAGEBREAK!
int
sys_unlink(void)
{
80105c49:	55                   	push   %ebp
80105c4a:	89 e5                	mov    %esp,%ebp
80105c4c:	83 ec 58             	sub    $0x58,%esp
  struct inode *ip, *dp;
  struct dirent de;
  char name[DIRSIZ], *path;
  uint off;

  if(argstr(0, &path) < 0)
80105c4f:	83 ec 08             	sub    $0x8,%esp
80105c52:	8d 45 ac             	lea    -0x54(%ebp),%eax
80105c55:	50                   	push   %eax
80105c56:	6a 00                	push   $0x0
80105c58:	e8 a0 fa ff ff       	call   801056fd <argstr>
80105c5d:	83 c4 10             	add    $0x10,%esp
80105c60:	85 c0                	test   %eax,%eax
80105c62:	79 0a                	jns    80105c6e <sys_unlink+0x25>
    return -1;
80105c64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105c69:	e9 bc 01 00 00       	jmp    80105e2a <sys_unlink+0x1e1>

  begin_op();
80105c6e:	e8 ec d9 ff ff       	call   8010365f <begin_op>
  if((dp = nameiparent(path, name)) == 0){
80105c73:	8b 45 ac             	mov    -0x54(%ebp),%eax
80105c76:	83 ec 08             	sub    $0x8,%esp
80105c79:	8d 55 b2             	lea    -0x4e(%ebp),%edx
80105c7c:	52                   	push   %edx
80105c7d:	50                   	push   %eax
80105c7e:	e8 8e c9 ff ff       	call   80102611 <nameiparent>
80105c83:	83 c4 10             	add    $0x10,%esp
80105c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
80105c89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105c8d:	75 0f                	jne    80105c9e <sys_unlink+0x55>
    end_op();
80105c8f:	e8 57 da ff ff       	call   801036eb <end_op>
    return -1;
80105c94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105c99:	e9 8c 01 00 00       	jmp    80105e2a <sys_unlink+0x1e1>
  }

  ilock(dp);
80105c9e:	83 ec 0c             	sub    $0xc,%esp
80105ca1:	ff 75 f4             	pushl  -0xc(%ebp)
80105ca4:	e8 45 bc ff ff       	call   801018ee <ilock>
80105ca9:	83 c4 10             	add    $0x10,%esp

  // Cannot unlink "." or "..".
  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
80105cac:	83 ec 08             	sub    $0x8,%esp
80105caf:	68 79 c6 10 80       	push   $0x8010c679
80105cb4:	8d 45 b2             	lea    -0x4e(%ebp),%eax
80105cb7:	50                   	push   %eax
80105cb8:	e8 c7 c5 ff ff       	call   80102284 <namecmp>
80105cbd:	83 c4 10             	add    $0x10,%esp
80105cc0:	85 c0                	test   %eax,%eax
80105cc2:	0f 84 4a 01 00 00    	je     80105e12 <sys_unlink+0x1c9>
80105cc8:	83 ec 08             	sub    $0x8,%esp
80105ccb:	68 7b c6 10 80       	push   $0x8010c67b
80105cd0:	8d 45 b2             	lea    -0x4e(%ebp),%eax
80105cd3:	50                   	push   %eax
80105cd4:	e8 ab c5 ff ff       	call   80102284 <namecmp>
80105cd9:	83 c4 10             	add    $0x10,%esp
80105cdc:	85 c0                	test   %eax,%eax
80105cde:	0f 84 2e 01 00 00    	je     80105e12 <sys_unlink+0x1c9>
    goto bad;

  if((ip = dirlookup(dp, name, &off)) == 0)
80105ce4:	83 ec 04             	sub    $0x4,%esp
80105ce7:	8d 45 a8             	lea    -0x58(%ebp),%eax
80105cea:	50                   	push   %eax
80105ceb:	8d 45 b2             	lea    -0x4e(%ebp),%eax
80105cee:	50                   	push   %eax
80105cef:	ff 75 f4             	pushl  -0xc(%ebp)
80105cf2:	e8 a8 c5 ff ff       	call   8010229f <dirlookup>
80105cf7:	83 c4 10             	add    $0x10,%esp
80105cfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
80105cfd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80105d01:	0f 84 0a 01 00 00    	je     80105e11 <sys_unlink+0x1c8>
    goto bad;
  ilock(ip);
80105d07:	83 ec 0c             	sub    $0xc,%esp
80105d0a:	ff 75 f0             	pushl  -0x10(%ebp)
80105d0d:	e8 dc bb ff ff       	call   801018ee <ilock>
80105d12:	83 c4 10             	add    $0x10,%esp

  if(ip->nlink < 1)
80105d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105d18:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80105d1c:	66 85 c0             	test   %ax,%ax
80105d1f:	7f 0d                	jg     80105d2e <sys_unlink+0xe5>
    panic("unlink: nlink < 1");
80105d21:	83 ec 0c             	sub    $0xc,%esp
80105d24:	68 7e c6 10 80       	push   $0x8010c67e
80105d29:	e8 38 a8 ff ff       	call   80100566 <panic>
  if(ip->type == T_DIR && !isdirempty(ip)){
80105d2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105d31:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80105d35:	66 83 f8 01          	cmp    $0x1,%ax
80105d39:	75 25                	jne    80105d60 <sys_unlink+0x117>
80105d3b:	83 ec 0c             	sub    $0xc,%esp
80105d3e:	ff 75 f0             	pushl  -0x10(%ebp)
80105d41:	e8 a0 fe ff ff       	call   80105be6 <isdirempty>
80105d46:	83 c4 10             	add    $0x10,%esp
80105d49:	85 c0                	test   %eax,%eax
80105d4b:	75 13                	jne    80105d60 <sys_unlink+0x117>
    iunlockput(ip);
80105d4d:	83 ec 0c             	sub    $0xc,%esp
80105d50:	ff 75 f0             	pushl  -0x10(%ebp)
80105d53:	e8 50 be ff ff       	call   80101ba8 <iunlockput>
80105d58:	83 c4 10             	add    $0x10,%esp
    goto bad;
80105d5b:	e9 b2 00 00 00       	jmp    80105e12 <sys_unlink+0x1c9>
  }

  memset(&de, 0, sizeof(de));
80105d60:	83 ec 04             	sub    $0x4,%esp
80105d63:	6a 20                	push   $0x20
80105d65:	6a 00                	push   $0x0
80105d67:	8d 45 d0             	lea    -0x30(%ebp),%eax
80105d6a:	50                   	push   %eax
80105d6b:	e8 e3 f5 ff ff       	call   80105353 <memset>
80105d70:	83 c4 10             	add    $0x10,%esp
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80105d73:	8b 45 a8             	mov    -0x58(%ebp),%eax
80105d76:	6a 20                	push   $0x20
80105d78:	50                   	push   %eax
80105d79:	8d 45 d0             	lea    -0x30(%ebp),%eax
80105d7c:	50                   	push   %eax
80105d7d:	ff 75 f4             	pushl  -0xc(%ebp)
80105d80:	e8 77 c3 ff ff       	call   801020fc <writei>
80105d85:	83 c4 10             	add    $0x10,%esp
80105d88:	83 f8 20             	cmp    $0x20,%eax
80105d8b:	74 0d                	je     80105d9a <sys_unlink+0x151>
    panic("unlink: writei");
80105d8d:	83 ec 0c             	sub    $0xc,%esp
80105d90:	68 90 c6 10 80       	push   $0x8010c690
80105d95:	e8 cc a7 ff ff       	call   80100566 <panic>
  if(ip->type == T_DIR){
80105d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105d9d:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80105da1:	66 83 f8 01          	cmp    $0x1,%ax
80105da5:	75 21                	jne    80105dc8 <sys_unlink+0x17f>
    dp->nlink--;
80105da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105daa:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80105dae:	83 e8 01             	sub    $0x1,%eax
80105db1:	89 c2                	mov    %eax,%edx
80105db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105db6:	66 89 50 16          	mov    %dx,0x16(%eax)
    iupdate(dp);
80105dba:	83 ec 0c             	sub    $0xc,%esp
80105dbd:	ff 75 f4             	pushl  -0xc(%ebp)
80105dc0:	e8 55 b9 ff ff       	call   8010171a <iupdate>
80105dc5:	83 c4 10             	add    $0x10,%esp
  }
  iunlockput(dp);
80105dc8:	83 ec 0c             	sub    $0xc,%esp
80105dcb:	ff 75 f4             	pushl  -0xc(%ebp)
80105dce:	e8 d5 bd ff ff       	call   80101ba8 <iunlockput>
80105dd3:	83 c4 10             	add    $0x10,%esp

  ip->nlink--;
80105dd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105dd9:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80105ddd:	83 e8 01             	sub    $0x1,%eax
80105de0:	89 c2                	mov    %eax,%edx
80105de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105de5:	66 89 50 16          	mov    %dx,0x16(%eax)
  iupdate(ip);
80105de9:	83 ec 0c             	sub    $0xc,%esp
80105dec:	ff 75 f0             	pushl  -0x10(%ebp)
80105def:	e8 26 b9 ff ff       	call   8010171a <iupdate>
80105df4:	83 c4 10             	add    $0x10,%esp
  iunlockput(ip);
80105df7:	83 ec 0c             	sub    $0xc,%esp
80105dfa:	ff 75 f0             	pushl  -0x10(%ebp)
80105dfd:	e8 a6 bd ff ff       	call   80101ba8 <iunlockput>
80105e02:	83 c4 10             	add    $0x10,%esp

  end_op();
80105e05:	e8 e1 d8 ff ff       	call   801036eb <end_op>

  return 0;
80105e0a:	b8 00 00 00 00       	mov    $0x0,%eax
80105e0f:	eb 19                	jmp    80105e2a <sys_unlink+0x1e1>
  // Cannot unlink "." or "..".
  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
    goto bad;

  if((ip = dirlookup(dp, name, &off)) == 0)
    goto bad;
80105e11:	90                   	nop
  end_op();

  return 0;

bad:
  iunlockput(dp);
80105e12:	83 ec 0c             	sub    $0xc,%esp
80105e15:	ff 75 f4             	pushl  -0xc(%ebp)
80105e18:	e8 8b bd ff ff       	call   80101ba8 <iunlockput>
80105e1d:	83 c4 10             	add    $0x10,%esp
  end_op();
80105e20:	e8 c6 d8 ff ff       	call   801036eb <end_op>
  return -1;
80105e25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105e2a:	c9                   	leave  
80105e2b:	c3                   	ret    

80105e2c <create>:

static struct inode*
create(char *path, short type, short major, short minor)
{
80105e2c:	55                   	push   %ebp
80105e2d:	89 e5                	mov    %esp,%ebp
80105e2f:	83 ec 48             	sub    $0x48,%esp
80105e32:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80105e35:	8b 55 10             	mov    0x10(%ebp),%edx
80105e38:	8b 45 14             	mov    0x14(%ebp),%eax
80105e3b:	66 89 4d c4          	mov    %cx,-0x3c(%ebp)
80105e3f:	66 89 55 c0          	mov    %dx,-0x40(%ebp)
80105e43:	66 89 45 bc          	mov    %ax,-0x44(%ebp)
  uint off;
  struct inode *ip, *dp;
  char name[DIRSIZ];

  if((dp = nameiparent(path, name)) == 0)
80105e47:	83 ec 08             	sub    $0x8,%esp
80105e4a:	8d 45 ce             	lea    -0x32(%ebp),%eax
80105e4d:	50                   	push   %eax
80105e4e:	ff 75 08             	pushl  0x8(%ebp)
80105e51:	e8 bb c7 ff ff       	call   80102611 <nameiparent>
80105e56:	83 c4 10             	add    $0x10,%esp
80105e59:	89 45 f4             	mov    %eax,-0xc(%ebp)
80105e5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105e60:	75 0a                	jne    80105e6c <create+0x40>
    return 0;
80105e62:	b8 00 00 00 00       	mov    $0x0,%eax
80105e67:	e9 90 01 00 00       	jmp    80105ffc <create+0x1d0>
  ilock(dp);
80105e6c:	83 ec 0c             	sub    $0xc,%esp
80105e6f:	ff 75 f4             	pushl  -0xc(%ebp)
80105e72:	e8 77 ba ff ff       	call   801018ee <ilock>
80105e77:	83 c4 10             	add    $0x10,%esp

  if((ip = dirlookup(dp, name, &off)) != 0){
80105e7a:	83 ec 04             	sub    $0x4,%esp
80105e7d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80105e80:	50                   	push   %eax
80105e81:	8d 45 ce             	lea    -0x32(%ebp),%eax
80105e84:	50                   	push   %eax
80105e85:	ff 75 f4             	pushl  -0xc(%ebp)
80105e88:	e8 12 c4 ff ff       	call   8010229f <dirlookup>
80105e8d:	83 c4 10             	add    $0x10,%esp
80105e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
80105e93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80105e97:	74 50                	je     80105ee9 <create+0xbd>
    iunlockput(dp);
80105e99:	83 ec 0c             	sub    $0xc,%esp
80105e9c:	ff 75 f4             	pushl  -0xc(%ebp)
80105e9f:	e8 04 bd ff ff       	call   80101ba8 <iunlockput>
80105ea4:	83 c4 10             	add    $0x10,%esp
    ilock(ip);
80105ea7:	83 ec 0c             	sub    $0xc,%esp
80105eaa:	ff 75 f0             	pushl  -0x10(%ebp)
80105ead:	e8 3c ba ff ff       	call   801018ee <ilock>
80105eb2:	83 c4 10             	add    $0x10,%esp
    if(type == T_FILE && ip->type == T_FILE)
80105eb5:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%ebp)
80105eba:	75 15                	jne    80105ed1 <create+0xa5>
80105ebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105ebf:	0f b7 40 10          	movzwl 0x10(%eax),%eax
80105ec3:	66 83 f8 02          	cmp    $0x2,%ax
80105ec7:	75 08                	jne    80105ed1 <create+0xa5>
      return ip;
80105ec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105ecc:	e9 2b 01 00 00       	jmp    80105ffc <create+0x1d0>
    iunlockput(ip);
80105ed1:	83 ec 0c             	sub    $0xc,%esp
80105ed4:	ff 75 f0             	pushl  -0x10(%ebp)
80105ed7:	e8 cc bc ff ff       	call   80101ba8 <iunlockput>
80105edc:	83 c4 10             	add    $0x10,%esp
    return 0;
80105edf:	b8 00 00 00 00       	mov    $0x0,%eax
80105ee4:	e9 13 01 00 00       	jmp    80105ffc <create+0x1d0>
  }

  if((ip = ialloc(dp->dev, type)) == 0)
80105ee9:	0f bf 55 c4          	movswl -0x3c(%ebp),%edx
80105eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ef0:	8b 00                	mov    (%eax),%eax
80105ef2:	83 ec 08             	sub    $0x8,%esp
80105ef5:	52                   	push   %edx
80105ef6:	50                   	push   %eax
80105ef7:	e8 3d b7 ff ff       	call   80101639 <ialloc>
80105efc:	83 c4 10             	add    $0x10,%esp
80105eff:	89 45 f0             	mov    %eax,-0x10(%ebp)
80105f02:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80105f06:	75 0d                	jne    80105f15 <create+0xe9>
    panic("create: ialloc");
80105f08:	83 ec 0c             	sub    $0xc,%esp
80105f0b:	68 9f c6 10 80       	push   $0x8010c69f
80105f10:	e8 51 a6 ff ff       	call   80100566 <panic>

  ilock(ip);
80105f15:	83 ec 0c             	sub    $0xc,%esp
80105f18:	ff 75 f0             	pushl  -0x10(%ebp)
80105f1b:	e8 ce b9 ff ff       	call   801018ee <ilock>
80105f20:	83 c4 10             	add    $0x10,%esp
  ip->major = major;
80105f23:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f26:	0f b7 55 c0          	movzwl -0x40(%ebp),%edx
80105f2a:	66 89 50 12          	mov    %dx,0x12(%eax)
  ip->minor = minor;
80105f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f31:	0f b7 55 bc          	movzwl -0x44(%ebp),%edx
80105f35:	66 89 50 14          	mov    %dx,0x14(%eax)
  ip->nlink = 1;
80105f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f3c:	66 c7 40 16 01 00    	movw   $0x1,0x16(%eax)
  iupdate(ip);
80105f42:	83 ec 0c             	sub    $0xc,%esp
80105f45:	ff 75 f0             	pushl  -0x10(%ebp)
80105f48:	e8 cd b7 ff ff       	call   8010171a <iupdate>
80105f4d:	83 c4 10             	add    $0x10,%esp

  if(type == T_DIR){  // Create . and .. entries.
80105f50:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%ebp)
80105f55:	75 6a                	jne    80105fc1 <create+0x195>
    dp->nlink++;  // for ".."
80105f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105f5a:	0f b7 40 16          	movzwl 0x16(%eax),%eax
80105f5e:	83 c0 01             	add    $0x1,%eax
80105f61:	89 c2                	mov    %eax,%edx
80105f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105f66:	66 89 50 16          	mov    %dx,0x16(%eax)
    iupdate(dp);
80105f6a:	83 ec 0c             	sub    $0xc,%esp
80105f6d:	ff 75 f4             	pushl  -0xc(%ebp)
80105f70:	e8 a5 b7 ff ff       	call   8010171a <iupdate>
80105f75:	83 c4 10             	add    $0x10,%esp
    // No ip->nlink++ for ".": avoid cyclic ref count.
    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
80105f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f7b:	8b 40 04             	mov    0x4(%eax),%eax
80105f7e:	83 ec 04             	sub    $0x4,%esp
80105f81:	50                   	push   %eax
80105f82:	68 79 c6 10 80       	push   $0x8010c679
80105f87:	ff 75 f0             	pushl  -0x10(%ebp)
80105f8a:	e8 ca c3 ff ff       	call   80102359 <dirlink>
80105f8f:	83 c4 10             	add    $0x10,%esp
80105f92:	85 c0                	test   %eax,%eax
80105f94:	78 1e                	js     80105fb4 <create+0x188>
80105f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105f99:	8b 40 04             	mov    0x4(%eax),%eax
80105f9c:	83 ec 04             	sub    $0x4,%esp
80105f9f:	50                   	push   %eax
80105fa0:	68 7b c6 10 80       	push   $0x8010c67b
80105fa5:	ff 75 f0             	pushl  -0x10(%ebp)
80105fa8:	e8 ac c3 ff ff       	call   80102359 <dirlink>
80105fad:	83 c4 10             	add    $0x10,%esp
80105fb0:	85 c0                	test   %eax,%eax
80105fb2:	79 0d                	jns    80105fc1 <create+0x195>
      panic("create dots");
80105fb4:	83 ec 0c             	sub    $0xc,%esp
80105fb7:	68 ae c6 10 80       	push   $0x8010c6ae
80105fbc:	e8 a5 a5 ff ff       	call   80100566 <panic>
  }

  if(dirlink(dp, name, ip->inum) < 0)
80105fc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105fc4:	8b 40 04             	mov    0x4(%eax),%eax
80105fc7:	83 ec 04             	sub    $0x4,%esp
80105fca:	50                   	push   %eax
80105fcb:	8d 45 ce             	lea    -0x32(%ebp),%eax
80105fce:	50                   	push   %eax
80105fcf:	ff 75 f4             	pushl  -0xc(%ebp)
80105fd2:	e8 82 c3 ff ff       	call   80102359 <dirlink>
80105fd7:	83 c4 10             	add    $0x10,%esp
80105fda:	85 c0                	test   %eax,%eax
80105fdc:	79 0d                	jns    80105feb <create+0x1bf>
    panic("create: dirlink");
80105fde:	83 ec 0c             	sub    $0xc,%esp
80105fe1:	68 ba c6 10 80       	push   $0x8010c6ba
80105fe6:	e8 7b a5 ff ff       	call   80100566 <panic>

  iunlockput(dp);
80105feb:	83 ec 0c             	sub    $0xc,%esp
80105fee:	ff 75 f4             	pushl  -0xc(%ebp)
80105ff1:	e8 b2 bb ff ff       	call   80101ba8 <iunlockput>
80105ff6:	83 c4 10             	add    $0x10,%esp

  return ip;
80105ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80105ffc:	c9                   	leave  
80105ffd:	c3                   	ret    

80105ffe <sys_open>:

int
sys_open(void)
{
80105ffe:	55                   	push   %ebp
80105fff:	89 e5                	mov    %esp,%ebp
80106001:	83 ec 28             	sub    $0x28,%esp
  char *path;
  int fd, omode;
  struct file *f;
  struct inode *ip;

  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
80106004:	83 ec 08             	sub    $0x8,%esp
80106007:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010600a:	50                   	push   %eax
8010600b:	6a 00                	push   $0x0
8010600d:	e8 eb f6 ff ff       	call   801056fd <argstr>
80106012:	83 c4 10             	add    $0x10,%esp
80106015:	85 c0                	test   %eax,%eax
80106017:	78 15                	js     8010602e <sys_open+0x30>
80106019:	83 ec 08             	sub    $0x8,%esp
8010601c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010601f:	50                   	push   %eax
80106020:	6a 01                	push   $0x1
80106022:	e8 51 f6 ff ff       	call   80105678 <argint>
80106027:	83 c4 10             	add    $0x10,%esp
8010602a:	85 c0                	test   %eax,%eax
8010602c:	79 0a                	jns    80106038 <sys_open+0x3a>
    return -1;
8010602e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106033:	e9 61 01 00 00       	jmp    80106199 <sys_open+0x19b>

  begin_op();
80106038:	e8 22 d6 ff ff       	call   8010365f <begin_op>

  if(omode & O_CREATE){
8010603d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106040:	25 00 02 00 00       	and    $0x200,%eax
80106045:	85 c0                	test   %eax,%eax
80106047:	74 2a                	je     80106073 <sys_open+0x75>
    ip = create(path, T_FILE, 0, 0);
80106049:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010604c:	6a 00                	push   $0x0
8010604e:	6a 00                	push   $0x0
80106050:	6a 02                	push   $0x2
80106052:	50                   	push   %eax
80106053:	e8 d4 fd ff ff       	call   80105e2c <create>
80106058:	83 c4 10             	add    $0x10,%esp
8010605b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(ip == 0){
8010605e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106062:	75 75                	jne    801060d9 <sys_open+0xdb>
      end_op();
80106064:	e8 82 d6 ff ff       	call   801036eb <end_op>
      return -1;
80106069:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010606e:	e9 26 01 00 00       	jmp    80106199 <sys_open+0x19b>
    }
  } else {
    if((ip = namei(path)) == 0){
80106073:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106076:	83 ec 0c             	sub    $0xc,%esp
80106079:	50                   	push   %eax
8010607a:	e8 76 c5 ff ff       	call   801025f5 <namei>
8010607f:	83 c4 10             	add    $0x10,%esp
80106082:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106085:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106089:	75 0f                	jne    8010609a <sys_open+0x9c>
      end_op();
8010608b:	e8 5b d6 ff ff       	call   801036eb <end_op>
      return -1;
80106090:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106095:	e9 ff 00 00 00       	jmp    80106199 <sys_open+0x19b>
    }
    ilock(ip);
8010609a:	83 ec 0c             	sub    $0xc,%esp
8010609d:	ff 75 f4             	pushl  -0xc(%ebp)
801060a0:	e8 49 b8 ff ff       	call   801018ee <ilock>
801060a5:	83 c4 10             	add    $0x10,%esp
    if(ip->type == T_DIR && omode != O_RDONLY){
801060a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801060ab:	0f b7 40 10          	movzwl 0x10(%eax),%eax
801060af:	66 83 f8 01          	cmp    $0x1,%ax
801060b3:	75 24                	jne    801060d9 <sys_open+0xdb>
801060b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801060b8:	85 c0                	test   %eax,%eax
801060ba:	74 1d                	je     801060d9 <sys_open+0xdb>
      iunlockput(ip);
801060bc:	83 ec 0c             	sub    $0xc,%esp
801060bf:	ff 75 f4             	pushl  -0xc(%ebp)
801060c2:	e8 e1 ba ff ff       	call   80101ba8 <iunlockput>
801060c7:	83 c4 10             	add    $0x10,%esp
      end_op();
801060ca:	e8 1c d6 ff ff       	call   801036eb <end_op>
      return -1;
801060cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801060d4:	e9 c0 00 00 00       	jmp    80106199 <sys_open+0x19b>
    }
  }

  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
801060d9:	e8 7d ae ff ff       	call   80100f5b <filealloc>
801060de:	89 45 f0             	mov    %eax,-0x10(%ebp)
801060e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801060e5:	74 17                	je     801060fe <sys_open+0x100>
801060e7:	83 ec 0c             	sub    $0xc,%esp
801060ea:	ff 75 f0             	pushl  -0x10(%ebp)
801060ed:	e8 37 f7 ff ff       	call   80105829 <fdalloc>
801060f2:	83 c4 10             	add    $0x10,%esp
801060f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
801060f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
801060fc:	79 2e                	jns    8010612c <sys_open+0x12e>
    if(f)
801060fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106102:	74 0e                	je     80106112 <sys_open+0x114>
      fileclose(f);
80106104:	83 ec 0c             	sub    $0xc,%esp
80106107:	ff 75 f0             	pushl  -0x10(%ebp)
8010610a:	e8 0a af ff ff       	call   80101019 <fileclose>
8010610f:	83 c4 10             	add    $0x10,%esp
    iunlockput(ip);
80106112:	83 ec 0c             	sub    $0xc,%esp
80106115:	ff 75 f4             	pushl  -0xc(%ebp)
80106118:	e8 8b ba ff ff       	call   80101ba8 <iunlockput>
8010611d:	83 c4 10             	add    $0x10,%esp
    end_op();
80106120:	e8 c6 d5 ff ff       	call   801036eb <end_op>
    return -1;
80106125:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010612a:	eb 6d                	jmp    80106199 <sys_open+0x19b>
  }
  iunlock(ip);
8010612c:	83 ec 0c             	sub    $0xc,%esp
8010612f:	ff 75 f4             	pushl  -0xc(%ebp)
80106132:	e8 0f b9 ff ff       	call   80101a46 <iunlock>
80106137:	83 c4 10             	add    $0x10,%esp
  end_op();
8010613a:	e8 ac d5 ff ff       	call   801036eb <end_op>

  f->type = FD_INODE;
8010613f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106142:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  f->ip = ip;
80106148:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010614b:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010614e:	89 50 10             	mov    %edx,0x10(%eax)
  f->off = 0;
80106151:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106154:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  f->readable = !(omode & O_WRONLY);
8010615b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010615e:	83 e0 01             	and    $0x1,%eax
80106161:	85 c0                	test   %eax,%eax
80106163:	0f 94 c0             	sete   %al
80106166:	89 c2                	mov    %eax,%edx
80106168:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010616b:	88 50 08             	mov    %dl,0x8(%eax)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
8010616e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106171:	83 e0 01             	and    $0x1,%eax
80106174:	85 c0                	test   %eax,%eax
80106176:	75 0a                	jne    80106182 <sys_open+0x184>
80106178:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010617b:	83 e0 02             	and    $0x2,%eax
8010617e:	85 c0                	test   %eax,%eax
80106180:	74 07                	je     80106189 <sys_open+0x18b>
80106182:	b8 01 00 00 00       	mov    $0x1,%eax
80106187:	eb 05                	jmp    8010618e <sys_open+0x190>
80106189:	b8 00 00 00 00       	mov    $0x0,%eax
8010618e:	89 c2                	mov    %eax,%edx
80106190:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106193:	88 50 09             	mov    %dl,0x9(%eax)
  return fd;
80106196:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
80106199:	c9                   	leave  
8010619a:	c3                   	ret    

8010619b <sys_mkdir>:

int
sys_mkdir(void)
{
8010619b:	55                   	push   %ebp
8010619c:	89 e5                	mov    %esp,%ebp
8010619e:	83 ec 18             	sub    $0x18,%esp
  char *path;
  struct inode *ip;

  begin_op();
801061a1:	e8 b9 d4 ff ff       	call   8010365f <begin_op>
  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
801061a6:	83 ec 08             	sub    $0x8,%esp
801061a9:	8d 45 f0             	lea    -0x10(%ebp),%eax
801061ac:	50                   	push   %eax
801061ad:	6a 00                	push   $0x0
801061af:	e8 49 f5 ff ff       	call   801056fd <argstr>
801061b4:	83 c4 10             	add    $0x10,%esp
801061b7:	85 c0                	test   %eax,%eax
801061b9:	78 1b                	js     801061d6 <sys_mkdir+0x3b>
801061bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
801061be:	6a 00                	push   $0x0
801061c0:	6a 00                	push   $0x0
801061c2:	6a 01                	push   $0x1
801061c4:	50                   	push   %eax
801061c5:	e8 62 fc ff ff       	call   80105e2c <create>
801061ca:	83 c4 10             	add    $0x10,%esp
801061cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
801061d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801061d4:	75 0c                	jne    801061e2 <sys_mkdir+0x47>
    end_op();
801061d6:	e8 10 d5 ff ff       	call   801036eb <end_op>
    return -1;
801061db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801061e0:	eb 18                	jmp    801061fa <sys_mkdir+0x5f>
  }
  iunlockput(ip);
801061e2:	83 ec 0c             	sub    $0xc,%esp
801061e5:	ff 75 f4             	pushl  -0xc(%ebp)
801061e8:	e8 bb b9 ff ff       	call   80101ba8 <iunlockput>
801061ed:	83 c4 10             	add    $0x10,%esp
  end_op();
801061f0:	e8 f6 d4 ff ff       	call   801036eb <end_op>
  return 0;
801061f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
801061fa:	c9                   	leave  
801061fb:	c3                   	ret    

801061fc <sys_mknod>:

int
sys_mknod(void)
{
801061fc:	55                   	push   %ebp
801061fd:	89 e5                	mov    %esp,%ebp
801061ff:	83 ec 28             	sub    $0x28,%esp
  struct inode *ip;
  char *path;
  int len;
  int major, minor;
  
  begin_op();
80106202:	e8 58 d4 ff ff       	call   8010365f <begin_op>
  if((len=argstr(0, &path)) < 0 ||
80106207:	83 ec 08             	sub    $0x8,%esp
8010620a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010620d:	50                   	push   %eax
8010620e:	6a 00                	push   $0x0
80106210:	e8 e8 f4 ff ff       	call   801056fd <argstr>
80106215:	83 c4 10             	add    $0x10,%esp
80106218:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010621b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010621f:	78 4f                	js     80106270 <sys_mknod+0x74>
     argint(1, &major) < 0 ||
80106221:	83 ec 08             	sub    $0x8,%esp
80106224:	8d 45 e8             	lea    -0x18(%ebp),%eax
80106227:	50                   	push   %eax
80106228:	6a 01                	push   $0x1
8010622a:	e8 49 f4 ff ff       	call   80105678 <argint>
8010622f:	83 c4 10             	add    $0x10,%esp
  char *path;
  int len;
  int major, minor;
  
  begin_op();
  if((len=argstr(0, &path)) < 0 ||
80106232:	85 c0                	test   %eax,%eax
80106234:	78 3a                	js     80106270 <sys_mknod+0x74>
     argint(1, &major) < 0 ||
     argint(2, &minor) < 0 ||
80106236:	83 ec 08             	sub    $0x8,%esp
80106239:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010623c:	50                   	push   %eax
8010623d:	6a 02                	push   $0x2
8010623f:	e8 34 f4 ff ff       	call   80105678 <argint>
80106244:	83 c4 10             	add    $0x10,%esp
  int len;
  int major, minor;
  
  begin_op();
  if((len=argstr(0, &path)) < 0 ||
     argint(1, &major) < 0 ||
80106247:	85 c0                	test   %eax,%eax
80106249:	78 25                	js     80106270 <sys_mknod+0x74>
     argint(2, &minor) < 0 ||
     (ip = create(path, T_DEV, major, minor)) == 0){
8010624b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010624e:	0f bf c8             	movswl %ax,%ecx
80106251:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106254:	0f bf d0             	movswl %ax,%edx
80106257:	8b 45 ec             	mov    -0x14(%ebp),%eax
  int major, minor;
  
  begin_op();
  if((len=argstr(0, &path)) < 0 ||
     argint(1, &major) < 0 ||
     argint(2, &minor) < 0 ||
8010625a:	51                   	push   %ecx
8010625b:	52                   	push   %edx
8010625c:	6a 03                	push   $0x3
8010625e:	50                   	push   %eax
8010625f:	e8 c8 fb ff ff       	call   80105e2c <create>
80106264:	83 c4 10             	add    $0x10,%esp
80106267:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010626a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010626e:	75 0c                	jne    8010627c <sys_mknod+0x80>
     (ip = create(path, T_DEV, major, minor)) == 0){
    end_op();
80106270:	e8 76 d4 ff ff       	call   801036eb <end_op>
    return -1;
80106275:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010627a:	eb 18                	jmp    80106294 <sys_mknod+0x98>
  }
  iunlockput(ip);
8010627c:	83 ec 0c             	sub    $0xc,%esp
8010627f:	ff 75 f0             	pushl  -0x10(%ebp)
80106282:	e8 21 b9 ff ff       	call   80101ba8 <iunlockput>
80106287:	83 c4 10             	add    $0x10,%esp
  end_op();
8010628a:	e8 5c d4 ff ff       	call   801036eb <end_op>
  return 0;
8010628f:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106294:	c9                   	leave  
80106295:	c3                   	ret    

80106296 <sys_chdir>:

int
sys_chdir(void)
{
80106296:	55                   	push   %ebp
80106297:	89 e5                	mov    %esp,%ebp
80106299:	83 ec 18             	sub    $0x18,%esp
  char *path;
  struct inode *ip;

  begin_op();
8010629c:	e8 be d3 ff ff       	call   8010365f <begin_op>
  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
801062a1:	83 ec 08             	sub    $0x8,%esp
801062a4:	8d 45 f0             	lea    -0x10(%ebp),%eax
801062a7:	50                   	push   %eax
801062a8:	6a 00                	push   $0x0
801062aa:	e8 4e f4 ff ff       	call   801056fd <argstr>
801062af:	83 c4 10             	add    $0x10,%esp
801062b2:	85 c0                	test   %eax,%eax
801062b4:	78 18                	js     801062ce <sys_chdir+0x38>
801062b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801062b9:	83 ec 0c             	sub    $0xc,%esp
801062bc:	50                   	push   %eax
801062bd:	e8 33 c3 ff ff       	call   801025f5 <namei>
801062c2:	83 c4 10             	add    $0x10,%esp
801062c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
801062c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801062cc:	75 0c                	jne    801062da <sys_chdir+0x44>
    end_op();
801062ce:	e8 18 d4 ff ff       	call   801036eb <end_op>
    return -1;
801062d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801062d8:	eb 6e                	jmp    80106348 <sys_chdir+0xb2>
  }
  ilock(ip);
801062da:	83 ec 0c             	sub    $0xc,%esp
801062dd:	ff 75 f4             	pushl  -0xc(%ebp)
801062e0:	e8 09 b6 ff ff       	call   801018ee <ilock>
801062e5:	83 c4 10             	add    $0x10,%esp
  if(ip->type != T_DIR){
801062e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801062eb:	0f b7 40 10          	movzwl 0x10(%eax),%eax
801062ef:	66 83 f8 01          	cmp    $0x1,%ax
801062f3:	74 1a                	je     8010630f <sys_chdir+0x79>
    iunlockput(ip);
801062f5:	83 ec 0c             	sub    $0xc,%esp
801062f8:	ff 75 f4             	pushl  -0xc(%ebp)
801062fb:	e8 a8 b8 ff ff       	call   80101ba8 <iunlockput>
80106300:	83 c4 10             	add    $0x10,%esp
    end_op();
80106303:	e8 e3 d3 ff ff       	call   801036eb <end_op>
    return -1;
80106308:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010630d:	eb 39                	jmp    80106348 <sys_chdir+0xb2>
  }
  iunlock(ip);
8010630f:	83 ec 0c             	sub    $0xc,%esp
80106312:	ff 75 f4             	pushl  -0xc(%ebp)
80106315:	e8 2c b7 ff ff       	call   80101a46 <iunlock>
8010631a:	83 c4 10             	add    $0x10,%esp
  iput(proc->cwd);
8010631d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106323:	8b 40 68             	mov    0x68(%eax),%eax
80106326:	83 ec 0c             	sub    $0xc,%esp
80106329:	50                   	push   %eax
8010632a:	e8 89 b7 ff ff       	call   80101ab8 <iput>
8010632f:	83 c4 10             	add    $0x10,%esp
  end_op();
80106332:	e8 b4 d3 ff ff       	call   801036eb <end_op>
  proc->cwd = ip;
80106337:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010633d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106340:	89 50 68             	mov    %edx,0x68(%eax)
  return 0;
80106343:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106348:	c9                   	leave  
80106349:	c3                   	ret    

8010634a <sys_exec>:

int
sys_exec(void)
{
8010634a:	55                   	push   %ebp
8010634b:	89 e5                	mov    %esp,%ebp
8010634d:	81 ec 98 00 00 00    	sub    $0x98,%esp
  char *path, *argv[MAXARG];
  int i;
  uint uargv, uarg;

  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
80106353:	83 ec 08             	sub    $0x8,%esp
80106356:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106359:	50                   	push   %eax
8010635a:	6a 00                	push   $0x0
8010635c:	e8 9c f3 ff ff       	call   801056fd <argstr>
80106361:	83 c4 10             	add    $0x10,%esp
80106364:	85 c0                	test   %eax,%eax
80106366:	78 18                	js     80106380 <sys_exec+0x36>
80106368:	83 ec 08             	sub    $0x8,%esp
8010636b:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
80106371:	50                   	push   %eax
80106372:	6a 01                	push   $0x1
80106374:	e8 ff f2 ff ff       	call   80105678 <argint>
80106379:	83 c4 10             	add    $0x10,%esp
8010637c:	85 c0                	test   %eax,%eax
8010637e:	79 0a                	jns    8010638a <sys_exec+0x40>
    return -1;
80106380:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106385:	e9 c6 00 00 00       	jmp    80106450 <sys_exec+0x106>
  }
  memset(argv, 0, sizeof(argv));
8010638a:	83 ec 04             	sub    $0x4,%esp
8010638d:	68 80 00 00 00       	push   $0x80
80106392:	6a 00                	push   $0x0
80106394:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
8010639a:	50                   	push   %eax
8010639b:	e8 b3 ef ff ff       	call   80105353 <memset>
801063a0:	83 c4 10             	add    $0x10,%esp
  for(i=0;; i++){
801063a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if(i >= NELEM(argv))
801063aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
801063ad:	83 f8 1f             	cmp    $0x1f,%eax
801063b0:	76 0a                	jbe    801063bc <sys_exec+0x72>
      return -1;
801063b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801063b7:	e9 94 00 00 00       	jmp    80106450 <sys_exec+0x106>
    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
801063bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801063bf:	c1 e0 02             	shl    $0x2,%eax
801063c2:	89 c2                	mov    %eax,%edx
801063c4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
801063ca:	01 c2                	add    %eax,%edx
801063cc:	83 ec 08             	sub    $0x8,%esp
801063cf:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
801063d5:	50                   	push   %eax
801063d6:	52                   	push   %edx
801063d7:	e8 00 f2 ff ff       	call   801055dc <fetchint>
801063dc:	83 c4 10             	add    $0x10,%esp
801063df:	85 c0                	test   %eax,%eax
801063e1:	79 07                	jns    801063ea <sys_exec+0xa0>
      return -1;
801063e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801063e8:	eb 66                	jmp    80106450 <sys_exec+0x106>
    if(uarg == 0){
801063ea:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
801063f0:	85 c0                	test   %eax,%eax
801063f2:	75 27                	jne    8010641b <sys_exec+0xd1>
      argv[i] = 0;
801063f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801063f7:	c7 84 85 70 ff ff ff 	movl   $0x0,-0x90(%ebp,%eax,4)
801063fe:	00 00 00 00 
      break;
80106402:	90                   	nop
    }
    if(fetchstr(uarg, &argv[i]) < 0)
      return -1;
  }
  return exec(path, argv);
80106403:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106406:	83 ec 08             	sub    $0x8,%esp
80106409:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
8010640f:	52                   	push   %edx
80106410:	50                   	push   %eax
80106411:	e8 23 a7 ff ff       	call   80100b39 <exec>
80106416:	83 c4 10             	add    $0x10,%esp
80106419:	eb 35                	jmp    80106450 <sys_exec+0x106>
      return -1;
    if(uarg == 0){
      argv[i] = 0;
      break;
    }
    if(fetchstr(uarg, &argv[i]) < 0)
8010641b:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
80106421:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106424:	c1 e2 02             	shl    $0x2,%edx
80106427:	01 c2                	add    %eax,%edx
80106429:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
8010642f:	83 ec 08             	sub    $0x8,%esp
80106432:	52                   	push   %edx
80106433:	50                   	push   %eax
80106434:	e8 dd f1 ff ff       	call   80105616 <fetchstr>
80106439:	83 c4 10             	add    $0x10,%esp
8010643c:	85 c0                	test   %eax,%eax
8010643e:	79 07                	jns    80106447 <sys_exec+0xfd>
      return -1;
80106440:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106445:	eb 09                	jmp    80106450 <sys_exec+0x106>

  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
    return -1;
  }
  memset(argv, 0, sizeof(argv));
  for(i=0;; i++){
80106447:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
      argv[i] = 0;
      break;
    }
    if(fetchstr(uarg, &argv[i]) < 0)
      return -1;
  }
8010644b:	e9 5a ff ff ff       	jmp    801063aa <sys_exec+0x60>
  return exec(path, argv);
}
80106450:	c9                   	leave  
80106451:	c3                   	ret    

80106452 <sys_pipe>:

int
sys_pipe(void)
{
80106452:	55                   	push   %ebp
80106453:	89 e5                	mov    %esp,%ebp
80106455:	83 ec 28             	sub    $0x28,%esp
  int *fd;
  struct file *rf, *wf;
  int fd0, fd1;

  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
80106458:	83 ec 04             	sub    $0x4,%esp
8010645b:	6a 08                	push   $0x8
8010645d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80106460:	50                   	push   %eax
80106461:	6a 00                	push   $0x0
80106463:	e8 38 f2 ff ff       	call   801056a0 <argptr>
80106468:	83 c4 10             	add    $0x10,%esp
8010646b:	85 c0                	test   %eax,%eax
8010646d:	79 0a                	jns    80106479 <sys_pipe+0x27>
    return -1;
8010646f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106474:	e9 af 00 00 00       	jmp    80106528 <sys_pipe+0xd6>
  if(pipealloc(&rf, &wf) < 0)
80106479:	83 ec 08             	sub    $0x8,%esp
8010647c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010647f:	50                   	push   %eax
80106480:	8d 45 e8             	lea    -0x18(%ebp),%eax
80106483:	50                   	push   %eax
80106484:	e8 be dc ff ff       	call   80104147 <pipealloc>
80106489:	83 c4 10             	add    $0x10,%esp
8010648c:	85 c0                	test   %eax,%eax
8010648e:	79 0a                	jns    8010649a <sys_pipe+0x48>
    return -1;
80106490:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106495:	e9 8e 00 00 00       	jmp    80106528 <sys_pipe+0xd6>
  fd0 = -1;
8010649a:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
801064a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
801064a4:	83 ec 0c             	sub    $0xc,%esp
801064a7:	50                   	push   %eax
801064a8:	e8 7c f3 ff ff       	call   80105829 <fdalloc>
801064ad:	83 c4 10             	add    $0x10,%esp
801064b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
801064b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801064b7:	78 18                	js     801064d1 <sys_pipe+0x7f>
801064b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801064bc:	83 ec 0c             	sub    $0xc,%esp
801064bf:	50                   	push   %eax
801064c0:	e8 64 f3 ff ff       	call   80105829 <fdalloc>
801064c5:	83 c4 10             	add    $0x10,%esp
801064c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
801064cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801064cf:	79 3f                	jns    80106510 <sys_pipe+0xbe>
    if(fd0 >= 0)
801064d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801064d5:	78 14                	js     801064eb <sys_pipe+0x99>
      proc->ofile[fd0] = 0;
801064d7:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801064dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
801064e0:	83 c2 08             	add    $0x8,%edx
801064e3:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
801064ea:	00 
    fileclose(rf);
801064eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
801064ee:	83 ec 0c             	sub    $0xc,%esp
801064f1:	50                   	push   %eax
801064f2:	e8 22 ab ff ff       	call   80101019 <fileclose>
801064f7:	83 c4 10             	add    $0x10,%esp
    fileclose(wf);
801064fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801064fd:	83 ec 0c             	sub    $0xc,%esp
80106500:	50                   	push   %eax
80106501:	e8 13 ab ff ff       	call   80101019 <fileclose>
80106506:	83 c4 10             	add    $0x10,%esp
    return -1;
80106509:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010650e:	eb 18                	jmp    80106528 <sys_pipe+0xd6>
  }
  fd[0] = fd0;
80106510:	8b 45 ec             	mov    -0x14(%ebp),%eax
80106513:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106516:	89 10                	mov    %edx,(%eax)
  fd[1] = fd1;
80106518:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010651b:	8d 50 04             	lea    0x4(%eax),%edx
8010651e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106521:	89 02                	mov    %eax,(%edx)
  return 0;
80106523:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106528:	c9                   	leave  
80106529:	c3                   	ret    

8010652a <sys_fork>:
#include "mmu.h"
#include "proc.h"

int
sys_fork(void)
{
8010652a:	55                   	push   %ebp
8010652b:	89 e5                	mov    %esp,%ebp
8010652d:	83 ec 08             	sub    $0x8,%esp
  return fork();
80106530:	e8 08 e3 ff ff       	call   8010483d <fork>
}
80106535:	c9                   	leave  
80106536:	c3                   	ret    

80106537 <sys_exit>:

int
sys_exit(void)
{
80106537:	55                   	push   %ebp
80106538:	89 e5                	mov    %esp,%ebp
8010653a:	83 ec 08             	sub    $0x8,%esp
  exit();
8010653d:	e8 8c e4 ff ff       	call   801049ce <exit>
  return 0;  // not reached
80106542:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106547:	c9                   	leave  
80106548:	c3                   	ret    

80106549 <sys_wait>:

int
sys_wait(void)
{
80106549:	55                   	push   %ebp
8010654a:	89 e5                	mov    %esp,%ebp
8010654c:	83 ec 08             	sub    $0x8,%esp
  return wait();
8010654f:	e8 b2 e5 ff ff       	call   80104b06 <wait>
}
80106554:	c9                   	leave  
80106555:	c3                   	ret    

80106556 <sys_kill>:

int
sys_kill(void)
{
80106556:	55                   	push   %ebp
80106557:	89 e5                	mov    %esp,%ebp
80106559:	83 ec 18             	sub    $0x18,%esp
  int pid;

  if(argint(0, &pid) < 0)
8010655c:	83 ec 08             	sub    $0x8,%esp
8010655f:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106562:	50                   	push   %eax
80106563:	6a 00                	push   $0x0
80106565:	e8 0e f1 ff ff       	call   80105678 <argint>
8010656a:	83 c4 10             	add    $0x10,%esp
8010656d:	85 c0                	test   %eax,%eax
8010656f:	79 07                	jns    80106578 <sys_kill+0x22>
    return -1;
80106571:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106576:	eb 0f                	jmp    80106587 <sys_kill+0x31>
  return kill(pid);
80106578:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010657b:	83 ec 0c             	sub    $0xc,%esp
8010657e:	50                   	push   %eax
8010657f:	e8 95 e9 ff ff       	call   80104f19 <kill>
80106584:	83 c4 10             	add    $0x10,%esp
}
80106587:	c9                   	leave  
80106588:	c3                   	ret    

80106589 <sys_getpid>:

int
sys_getpid(void)
{
80106589:	55                   	push   %ebp
8010658a:	89 e5                	mov    %esp,%ebp
  return proc->pid;
8010658c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106592:	8b 40 10             	mov    0x10(%eax),%eax
}
80106595:	5d                   	pop    %ebp
80106596:	c3                   	ret    

80106597 <sys_sbrk>:

int
sys_sbrk(void)
{
80106597:	55                   	push   %ebp
80106598:	89 e5                	mov    %esp,%ebp
8010659a:	83 ec 18             	sub    $0x18,%esp
  int addr;
  int n;

  if(argint(0, &n) < 0)
8010659d:	83 ec 08             	sub    $0x8,%esp
801065a0:	8d 45 f0             	lea    -0x10(%ebp),%eax
801065a3:	50                   	push   %eax
801065a4:	6a 00                	push   $0x0
801065a6:	e8 cd f0 ff ff       	call   80105678 <argint>
801065ab:	83 c4 10             	add    $0x10,%esp
801065ae:	85 c0                	test   %eax,%eax
801065b0:	79 07                	jns    801065b9 <sys_sbrk+0x22>
    return -1;
801065b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801065b7:	eb 28                	jmp    801065e1 <sys_sbrk+0x4a>
  addr = proc->sz;
801065b9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801065bf:	8b 00                	mov    (%eax),%eax
801065c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(growproc(n) < 0)
801065c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801065c7:	83 ec 0c             	sub    $0xc,%esp
801065ca:	50                   	push   %eax
801065cb:	e8 ca e1 ff ff       	call   8010479a <growproc>
801065d0:	83 c4 10             	add    $0x10,%esp
801065d3:	85 c0                	test   %eax,%eax
801065d5:	79 07                	jns    801065de <sys_sbrk+0x47>
    return -1;
801065d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801065dc:	eb 03                	jmp    801065e1 <sys_sbrk+0x4a>
  return addr;
801065de:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801065e1:	c9                   	leave  
801065e2:	c3                   	ret    

801065e3 <sys_sleep>:

int
sys_sleep(void)
{
801065e3:	55                   	push   %ebp
801065e4:	89 e5                	mov    %esp,%ebp
801065e6:	83 ec 18             	sub    $0x18,%esp
  int n;
  uint ticks0;
  
  if(argint(0, &n) < 0)
801065e9:	83 ec 08             	sub    $0x8,%esp
801065ec:	8d 45 f0             	lea    -0x10(%ebp),%eax
801065ef:	50                   	push   %eax
801065f0:	6a 00                	push   $0x0
801065f2:	e8 81 f0 ff ff       	call   80105678 <argint>
801065f7:	83 c4 10             	add    $0x10,%esp
801065fa:	85 c0                	test   %eax,%eax
801065fc:	79 07                	jns    80106605 <sys_sleep+0x22>
    return -1;
801065fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106603:	eb 77                	jmp    8010667c <sys_sleep+0x99>
  acquire(&tickslock);
80106605:	83 ec 0c             	sub    $0xc,%esp
80106608:	68 a0 c9 11 80       	push   $0x8011c9a0
8010660d:	e8 de ea ff ff       	call   801050f0 <acquire>
80106612:	83 c4 10             	add    $0x10,%esp
  ticks0 = ticks;
80106615:	a1 e0 d1 11 80       	mov    0x8011d1e0,%eax
8010661a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while(ticks - ticks0 < n){
8010661d:	eb 39                	jmp    80106658 <sys_sleep+0x75>
    if(proc->killed){
8010661f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106625:	8b 40 24             	mov    0x24(%eax),%eax
80106628:	85 c0                	test   %eax,%eax
8010662a:	74 17                	je     80106643 <sys_sleep+0x60>
      release(&tickslock);
8010662c:	83 ec 0c             	sub    $0xc,%esp
8010662f:	68 a0 c9 11 80       	push   $0x8011c9a0
80106634:	e8 1e eb ff ff       	call   80105157 <release>
80106639:	83 c4 10             	add    $0x10,%esp
      return -1;
8010663c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106641:	eb 39                	jmp    8010667c <sys_sleep+0x99>
    }
    sleep(&ticks, &tickslock);
80106643:	83 ec 08             	sub    $0x8,%esp
80106646:	68 a0 c9 11 80       	push   $0x8011c9a0
8010664b:	68 e0 d1 11 80       	push   $0x8011d1e0
80106650:	e8 a2 e7 ff ff       	call   80104df7 <sleep>
80106655:	83 c4 10             	add    $0x10,%esp
  
  if(argint(0, &n) < 0)
    return -1;
  acquire(&tickslock);
  ticks0 = ticks;
  while(ticks - ticks0 < n){
80106658:	a1 e0 d1 11 80       	mov    0x8011d1e0,%eax
8010665d:	2b 45 f4             	sub    -0xc(%ebp),%eax
80106660:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106663:	39 d0                	cmp    %edx,%eax
80106665:	72 b8                	jb     8010661f <sys_sleep+0x3c>
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
  }
  release(&tickslock);
80106667:	83 ec 0c             	sub    $0xc,%esp
8010666a:	68 a0 c9 11 80       	push   $0x8011c9a0
8010666f:	e8 e3 ea ff ff       	call   80105157 <release>
80106674:	83 c4 10             	add    $0x10,%esp
  return 0;
80106677:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010667c:	c9                   	leave  
8010667d:	c3                   	ret    

8010667e <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
int
sys_uptime(void)
{
8010667e:	55                   	push   %ebp
8010667f:	89 e5                	mov    %esp,%ebp
80106681:	83 ec 18             	sub    $0x18,%esp
  uint xticks;
  
  acquire(&tickslock);
80106684:	83 ec 0c             	sub    $0xc,%esp
80106687:	68 a0 c9 11 80       	push   $0x8011c9a0
8010668c:	e8 5f ea ff ff       	call   801050f0 <acquire>
80106691:	83 c4 10             	add    $0x10,%esp
  xticks = ticks;
80106694:	a1 e0 d1 11 80       	mov    0x8011d1e0,%eax
80106699:	89 45 f4             	mov    %eax,-0xc(%ebp)
  release(&tickslock);
8010669c:	83 ec 0c             	sub    $0xc,%esp
8010669f:	68 a0 c9 11 80       	push   $0x8011c9a0
801066a4:	e8 ae ea ff ff       	call   80105157 <release>
801066a9:	83 c4 10             	add    $0x10,%esp
  return xticks;
801066ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801066af:	c9                   	leave  
801066b0:	c3                   	ret    

801066b1 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
801066b1:	55                   	push   %ebp
801066b2:	89 e5                	mov    %esp,%ebp
801066b4:	83 ec 08             	sub    $0x8,%esp
801066b7:	8b 55 08             	mov    0x8(%ebp),%edx
801066ba:	8b 45 0c             	mov    0xc(%ebp),%eax
801066bd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
801066c1:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801066c4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
801066c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
801066cc:	ee                   	out    %al,(%dx)
}
801066cd:	90                   	nop
801066ce:	c9                   	leave  
801066cf:	c3                   	ret    

801066d0 <timerinit>:
#define TIMER_RATEGEN   0x04    // mode 2, rate generator
#define TIMER_16BIT     0x30    // r/w counter 16 bits, LSB first

void
timerinit(void)
{
801066d0:	55                   	push   %ebp
801066d1:	89 e5                	mov    %esp,%ebp
801066d3:	83 ec 08             	sub    $0x8,%esp
  // Interrupt 100 times/sec.
  outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
801066d6:	6a 34                	push   $0x34
801066d8:	6a 43                	push   $0x43
801066da:	e8 d2 ff ff ff       	call   801066b1 <outb>
801066df:	83 c4 08             	add    $0x8,%esp
  outb(IO_TIMER1, TIMER_DIV(100) % 256);
801066e2:	68 9c 00 00 00       	push   $0x9c
801066e7:	6a 40                	push   $0x40
801066e9:	e8 c3 ff ff ff       	call   801066b1 <outb>
801066ee:	83 c4 08             	add    $0x8,%esp
  outb(IO_TIMER1, TIMER_DIV(100) / 256);
801066f1:	6a 2e                	push   $0x2e
801066f3:	6a 40                	push   $0x40
801066f5:	e8 b7 ff ff ff       	call   801066b1 <outb>
801066fa:	83 c4 08             	add    $0x8,%esp
  picenable(IRQ_TIMER);
801066fd:	83 ec 0c             	sub    $0xc,%esp
80106700:	6a 00                	push   $0x0
80106702:	e8 2a d9 ff ff       	call   80104031 <picenable>
80106707:	83 c4 10             	add    $0x10,%esp
}
8010670a:	90                   	nop
8010670b:	c9                   	leave  
8010670c:	c3                   	ret    

8010670d <timerintr>:

int timerintr(uint tick) {
8010670d:	55                   	push   %ebp
8010670e:	89 e5                	mov    %esp,%ebp
80106710:	83 ec 38             	sub    $0x38,%esp
  message msg;
  msg.msg_type = M_TIMER;
80106713:	c7 45 cc 09 00 00 00 	movl   $0x9,-0x34(%ebp)
  msg.params[0] = tick;
8010671a:	8b 45 08             	mov    0x8(%ebp),%eax
8010671d:	89 45 d0             	mov    %eax,-0x30(%ebp)
  handleMessage(&msg);
80106720:	83 ec 0c             	sub    $0xc,%esp
80106723:	8d 45 cc             	lea    -0x34(%ebp),%eax
80106726:	50                   	push   %eax
80106727:	e8 3d 1f 00 00       	call   80108669 <handleMessage>
8010672c:	83 c4 10             	add    $0x10,%esp
  return 0;
8010672f:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106734:	c9                   	leave  
80106735:	c3                   	ret    

80106736 <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
80106736:	1e                   	push   %ds
  pushl %es
80106737:	06                   	push   %es
  pushl %fs
80106738:	0f a0                	push   %fs
  pushl %gs
8010673a:	0f a8                	push   %gs
  pushal
8010673c:	60                   	pusha  
  
  # Set up data and per-cpu segments.
  movw $(SEG_KDATA<<3), %ax
8010673d:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80106741:	8e d8                	mov    %eax,%ds
  movw %ax, %es
80106743:	8e c0                	mov    %eax,%es
  movw $(SEG_KCPU<<3), %ax
80106745:	66 b8 18 00          	mov    $0x18,%ax
  movw %ax, %fs
80106749:	8e e0                	mov    %eax,%fs
  movw %ax, %gs
8010674b:	8e e8                	mov    %eax,%gs

  # Call trap(tf), where tf=%esp
  pushl %esp
8010674d:	54                   	push   %esp
  call trap
8010674e:	e8 d7 01 00 00       	call   8010692a <trap>
  addl $4, %esp
80106753:	83 c4 04             	add    $0x4,%esp

80106756 <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
80106756:	61                   	popa   
  popl %gs
80106757:	0f a9                	pop    %gs
  popl %fs
80106759:	0f a1                	pop    %fs
  popl %es
8010675b:	07                   	pop    %es
  popl %ds
8010675c:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
8010675d:	83 c4 08             	add    $0x8,%esp
  iret
80106760:	cf                   	iret   

80106761 <lidt>:

struct gatedesc;

static inline void
lidt(struct gatedesc *p, int size)
{
80106761:	55                   	push   %ebp
80106762:	89 e5                	mov    %esp,%ebp
80106764:	83 ec 10             	sub    $0x10,%esp
  volatile ushort pd[3];

  pd[0] = size-1;
80106767:	8b 45 0c             	mov    0xc(%ebp),%eax
8010676a:	83 e8 01             	sub    $0x1,%eax
8010676d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  pd[1] = (uint)p;
80106771:	8b 45 08             	mov    0x8(%ebp),%eax
80106774:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
80106778:	8b 45 08             	mov    0x8(%ebp),%eax
8010677b:	c1 e8 10             	shr    $0x10,%eax
8010677e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

  asm volatile("lidt (%0)" : : "r" (pd));
80106782:	8d 45 fa             	lea    -0x6(%ebp),%eax
80106785:	0f 01 18             	lidtl  (%eax)
}
80106788:	90                   	nop
80106789:	c9                   	leave  
8010678a:	c3                   	ret    

8010678b <rcr2>:
  return result;
}

static inline uint
rcr2(void)
{
8010678b:	55                   	push   %ebp
8010678c:	89 e5                	mov    %esp,%ebp
8010678e:	83 ec 10             	sub    $0x10,%esp
  uint val;
  asm volatile("movl %%cr2,%0" : "=r" (val));
80106791:	0f 20 d0             	mov    %cr2,%eax
80106794:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return val;
80106797:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
8010679a:	c9                   	leave  
8010679b:	c3                   	ret    

8010679c <tvinit>:
struct spinlock tickslock;
uint ticks;

void
tvinit(void)
{
8010679c:	55                   	push   %ebp
8010679d:	89 e5                	mov    %esp,%ebp
8010679f:	83 ec 18             	sub    $0x18,%esp
  int i;

  for(i = 0; i < 256; i++)
801067a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801067a9:	e9 c3 00 00 00       	jmp    80106871 <tvinit+0xd5>
    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
801067ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067b1:	8b 04 85 b0 30 11 80 	mov    -0x7feecf50(,%eax,4),%eax
801067b8:	89 c2                	mov    %eax,%edx
801067ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067bd:	66 89 14 c5 e0 c9 11 	mov    %dx,-0x7fee3620(,%eax,8)
801067c4:	80 
801067c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067c8:	66 c7 04 c5 e2 c9 11 	movw   $0x8,-0x7fee361e(,%eax,8)
801067cf:	80 08 00 
801067d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067d5:	0f b6 14 c5 e4 c9 11 	movzbl -0x7fee361c(,%eax,8),%edx
801067dc:	80 
801067dd:	83 e2 e0             	and    $0xffffffe0,%edx
801067e0:	88 14 c5 e4 c9 11 80 	mov    %dl,-0x7fee361c(,%eax,8)
801067e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067ea:	0f b6 14 c5 e4 c9 11 	movzbl -0x7fee361c(,%eax,8),%edx
801067f1:	80 
801067f2:	83 e2 1f             	and    $0x1f,%edx
801067f5:	88 14 c5 e4 c9 11 80 	mov    %dl,-0x7fee361c(,%eax,8)
801067fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067ff:	0f b6 14 c5 e5 c9 11 	movzbl -0x7fee361b(,%eax,8),%edx
80106806:	80 
80106807:	83 e2 f0             	and    $0xfffffff0,%edx
8010680a:	83 ca 0e             	or     $0xe,%edx
8010680d:	88 14 c5 e5 c9 11 80 	mov    %dl,-0x7fee361b(,%eax,8)
80106814:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106817:	0f b6 14 c5 e5 c9 11 	movzbl -0x7fee361b(,%eax,8),%edx
8010681e:	80 
8010681f:	83 e2 ef             	and    $0xffffffef,%edx
80106822:	88 14 c5 e5 c9 11 80 	mov    %dl,-0x7fee361b(,%eax,8)
80106829:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010682c:	0f b6 14 c5 e5 c9 11 	movzbl -0x7fee361b(,%eax,8),%edx
80106833:	80 
80106834:	83 e2 9f             	and    $0xffffff9f,%edx
80106837:	88 14 c5 e5 c9 11 80 	mov    %dl,-0x7fee361b(,%eax,8)
8010683e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106841:	0f b6 14 c5 e5 c9 11 	movzbl -0x7fee361b(,%eax,8),%edx
80106848:	80 
80106849:	83 ca 80             	or     $0xffffff80,%edx
8010684c:	88 14 c5 e5 c9 11 80 	mov    %dl,-0x7fee361b(,%eax,8)
80106853:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106856:	8b 04 85 b0 30 11 80 	mov    -0x7feecf50(,%eax,4),%eax
8010685d:	c1 e8 10             	shr    $0x10,%eax
80106860:	89 c2                	mov    %eax,%edx
80106862:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106865:	66 89 14 c5 e6 c9 11 	mov    %dx,-0x7fee361a(,%eax,8)
8010686c:	80 
void
tvinit(void)
{
  int i;

  for(i = 0; i < 256; i++)
8010686d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80106871:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
80106878:	0f 8e 30 ff ff ff    	jle    801067ae <tvinit+0x12>
    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
8010687e:	a1 b0 31 11 80       	mov    0x801131b0,%eax
80106883:	66 a3 e0 cb 11 80    	mov    %ax,0x8011cbe0
80106889:	66 c7 05 e2 cb 11 80 	movw   $0x8,0x8011cbe2
80106890:	08 00 
80106892:	0f b6 05 e4 cb 11 80 	movzbl 0x8011cbe4,%eax
80106899:	83 e0 e0             	and    $0xffffffe0,%eax
8010689c:	a2 e4 cb 11 80       	mov    %al,0x8011cbe4
801068a1:	0f b6 05 e4 cb 11 80 	movzbl 0x8011cbe4,%eax
801068a8:	83 e0 1f             	and    $0x1f,%eax
801068ab:	a2 e4 cb 11 80       	mov    %al,0x8011cbe4
801068b0:	0f b6 05 e5 cb 11 80 	movzbl 0x8011cbe5,%eax
801068b7:	83 c8 0f             	or     $0xf,%eax
801068ba:	a2 e5 cb 11 80       	mov    %al,0x8011cbe5
801068bf:	0f b6 05 e5 cb 11 80 	movzbl 0x8011cbe5,%eax
801068c6:	83 e0 ef             	and    $0xffffffef,%eax
801068c9:	a2 e5 cb 11 80       	mov    %al,0x8011cbe5
801068ce:	0f b6 05 e5 cb 11 80 	movzbl 0x8011cbe5,%eax
801068d5:	83 c8 60             	or     $0x60,%eax
801068d8:	a2 e5 cb 11 80       	mov    %al,0x8011cbe5
801068dd:	0f b6 05 e5 cb 11 80 	movzbl 0x8011cbe5,%eax
801068e4:	83 c8 80             	or     $0xffffff80,%eax
801068e7:	a2 e5 cb 11 80       	mov    %al,0x8011cbe5
801068ec:	a1 b0 31 11 80       	mov    0x801131b0,%eax
801068f1:	c1 e8 10             	shr    $0x10,%eax
801068f4:	66 a3 e6 cb 11 80    	mov    %ax,0x8011cbe6

  initlock(&tickslock, "time");
801068fa:	83 ec 08             	sub    $0x8,%esp
801068fd:	68 cc c6 10 80       	push   $0x8010c6cc
80106902:	68 a0 c9 11 80       	push   $0x8011c9a0
80106907:	e8 c2 e7 ff ff       	call   801050ce <initlock>
8010690c:	83 c4 10             	add    $0x10,%esp
}
8010690f:	90                   	nop
80106910:	c9                   	leave  
80106911:	c3                   	ret    

80106912 <idtinit>:

void
idtinit(void)
{
80106912:	55                   	push   %ebp
80106913:	89 e5                	mov    %esp,%ebp
  lidt(idt, sizeof(idt));
80106915:	68 00 08 00 00       	push   $0x800
8010691a:	68 e0 c9 11 80       	push   $0x8011c9e0
8010691f:	e8 3d fe ff ff       	call   80106761 <lidt>
80106924:	83 c4 08             	add    $0x8,%esp
}
80106927:	90                   	nop
80106928:	c9                   	leave  
80106929:	c3                   	ret    

8010692a <trap>:

//PAGEBREAK: 41
void
trap(struct trapframe *tf)
{
8010692a:	55                   	push   %ebp
8010692b:	89 e5                	mov    %esp,%ebp
8010692d:	57                   	push   %edi
8010692e:	56                   	push   %esi
8010692f:	53                   	push   %ebx
80106930:	83 ec 1c             	sub    $0x1c,%esp
  if(tf->trapno == T_SYSCALL){
80106933:	8b 45 08             	mov    0x8(%ebp),%eax
80106936:	8b 40 30             	mov    0x30(%eax),%eax
80106939:	83 f8 40             	cmp    $0x40,%eax
8010693c:	75 3e                	jne    8010697c <trap+0x52>
    if(proc->killed)
8010693e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106944:	8b 40 24             	mov    0x24(%eax),%eax
80106947:	85 c0                	test   %eax,%eax
80106949:	74 05                	je     80106950 <trap+0x26>
      exit();
8010694b:	e8 7e e0 ff ff       	call   801049ce <exit>
    proc->tf = tf;
80106950:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106956:	8b 55 08             	mov    0x8(%ebp),%edx
80106959:	89 50 18             	mov    %edx,0x18(%eax)
    syscall();
8010695c:	e8 cd ed ff ff       	call   8010572e <syscall>
    if(proc->killed)
80106961:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106967:	8b 40 24             	mov    0x24(%eax),%eax
8010696a:	85 c0                	test   %eax,%eax
8010696c:	0f 84 47 02 00 00    	je     80106bb9 <trap+0x28f>
      exit();
80106972:	e8 57 e0 ff ff       	call   801049ce <exit>
    return;
80106977:	e9 3d 02 00 00       	jmp    80106bb9 <trap+0x28f>
  }

  switch(tf->trapno){
8010697c:	8b 45 08             	mov    0x8(%ebp),%eax
8010697f:	8b 40 30             	mov    0x30(%eax),%eax
80106982:	83 e8 20             	sub    $0x20,%eax
80106985:	83 f8 1f             	cmp    $0x1f,%eax
80106988:	0f 87 ec 00 00 00    	ja     80106a7a <trap+0x150>
8010698e:	8b 04 85 74 c7 10 80 	mov    -0x7fef388c(,%eax,4),%eax
80106995:	ff e0                	jmp    *%eax
  case T_IRQ0 + IRQ_TIMER:
    if(cpu->id == 0){
80106997:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010699d:	0f b6 00             	movzbl (%eax),%eax
801069a0:	84 c0                	test   %al,%al
801069a2:	75 4e                	jne    801069f2 <trap+0xc8>
      acquire(&tickslock);
801069a4:	83 ec 0c             	sub    $0xc,%esp
801069a7:	68 a0 c9 11 80       	push   $0x8011c9a0
801069ac:	e8 3f e7 ff ff       	call   801050f0 <acquire>
801069b1:	83 c4 10             	add    $0x10,%esp
      ticks++;
801069b4:	a1 e0 d1 11 80       	mov    0x8011d1e0,%eax
801069b9:	83 c0 01             	add    $0x1,%eax
801069bc:	a3 e0 d1 11 80       	mov    %eax,0x8011d1e0
      timerintr(ticks);
801069c1:	a1 e0 d1 11 80       	mov    0x8011d1e0,%eax
801069c6:	83 ec 0c             	sub    $0xc,%esp
801069c9:	50                   	push   %eax
801069ca:	e8 3e fd ff ff       	call   8010670d <timerintr>
801069cf:	83 c4 10             	add    $0x10,%esp
      wakeup(&ticks);
801069d2:	83 ec 0c             	sub    $0xc,%esp
801069d5:	68 e0 d1 11 80       	push   $0x8011d1e0
801069da:	e8 03 e5 ff ff       	call   80104ee2 <wakeup>
801069df:	83 c4 10             	add    $0x10,%esp
      release(&tickslock);
801069e2:	83 ec 0c             	sub    $0xc,%esp
801069e5:	68 a0 c9 11 80       	push   $0x8011c9a0
801069ea:	e8 68 e7 ff ff       	call   80105157 <release>
801069ef:	83 c4 10             	add    $0x10,%esp
    }
    lapiceoi();
801069f2:	e8 38 c7 ff ff       	call   8010312f <lapiceoi>
    break;
801069f7:	e9 37 01 00 00       	jmp    80106b33 <trap+0x209>
  case T_IRQ0 + IRQ_IDE:
    ideintr();
801069fc:	e8 c8 be ff ff       	call   801028c9 <ideintr>
    lapiceoi();
80106a01:	e8 29 c7 ff ff       	call   8010312f <lapiceoi>
    break;
80106a06:	e9 28 01 00 00       	jmp    80106b33 <trap+0x209>
  case T_IRQ0 + IRQ_IDE+1:
    // Bochs generates spurious IDE1 interrupts.
    break;
  case T_IRQ0 + IRQ_KBD:
    kbdintr();
80106a0b:	e8 0c c5 ff ff       	call   80102f1c <kbdintr>
    lapiceoi();
80106a10:	e8 1a c7 ff ff       	call   8010312f <lapiceoi>
    break;
80106a15:	e9 19 01 00 00       	jmp    80106b33 <trap+0x209>
  case T_IRQ0 + IRQ_MOUSE:
    mouseintr(ticks);
80106a1a:	a1 e0 d1 11 80       	mov    0x8011d1e0,%eax
80106a1f:	83 ec 0c             	sub    $0xc,%esp
80106a22:	50                   	push   %eax
80106a23:	e8 28 20 00 00       	call   80108a50 <mouseintr>
80106a28:	83 c4 10             	add    $0x10,%esp
    lapiceoi();
80106a2b:	e8 ff c6 ff ff       	call   8010312f <lapiceoi>
    break;
80106a30:	e9 fe 00 00 00       	jmp    80106b33 <trap+0x209>
  case T_IRQ0 + IRQ_COM1:
    uartintr();
80106a35:	e8 60 03 00 00       	call   80106d9a <uartintr>
    lapiceoi();
80106a3a:	e8 f0 c6 ff ff       	call   8010312f <lapiceoi>
    break;
80106a3f:	e9 ef 00 00 00       	jmp    80106b33 <trap+0x209>
  case T_IRQ0 + 7:
  case T_IRQ0 + IRQ_SPURIOUS:
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
80106a44:	8b 45 08             	mov    0x8(%ebp),%eax
80106a47:	8b 48 38             	mov    0x38(%eax),%ecx
            cpu->id, tf->cs, tf->eip);
80106a4a:	8b 45 08             	mov    0x8(%ebp),%eax
80106a4d:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
    uartintr();
    lapiceoi();
    break;
  case T_IRQ0 + 7:
  case T_IRQ0 + IRQ_SPURIOUS:
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
80106a51:	0f b7 d0             	movzwl %ax,%edx
            cpu->id, tf->cs, tf->eip);
80106a54:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80106a5a:	0f b6 00             	movzbl (%eax),%eax
    uartintr();
    lapiceoi();
    break;
  case T_IRQ0 + 7:
  case T_IRQ0 + IRQ_SPURIOUS:
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
80106a5d:	0f b6 c0             	movzbl %al,%eax
80106a60:	51                   	push   %ecx
80106a61:	52                   	push   %edx
80106a62:	50                   	push   %eax
80106a63:	68 d4 c6 10 80       	push   $0x8010c6d4
80106a68:	e8 59 99 ff ff       	call   801003c6 <cprintf>
80106a6d:	83 c4 10             	add    $0x10,%esp
            cpu->id, tf->cs, tf->eip);
    lapiceoi();
80106a70:	e8 ba c6 ff ff       	call   8010312f <lapiceoi>
    break;
80106a75:	e9 b9 00 00 00       	jmp    80106b33 <trap+0x209>

  //PAGEBREAK: 13
  default:
    if(proc == 0 || (tf->cs&3) == 0){
80106a7a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106a80:	85 c0                	test   %eax,%eax
80106a82:	74 11                	je     80106a95 <trap+0x16b>
80106a84:	8b 45 08             	mov    0x8(%ebp),%eax
80106a87:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80106a8b:	0f b7 c0             	movzwl %ax,%eax
80106a8e:	83 e0 03             	and    $0x3,%eax
80106a91:	85 c0                	test   %eax,%eax
80106a93:	75 40                	jne    80106ad5 <trap+0x1ab>
      // In kernel, it must be our mistake.
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
80106a95:	e8 f1 fc ff ff       	call   8010678b <rcr2>
80106a9a:	89 c3                	mov    %eax,%ebx
80106a9c:	8b 45 08             	mov    0x8(%ebp),%eax
80106a9f:	8b 48 38             	mov    0x38(%eax),%ecx
              tf->trapno, cpu->id, tf->eip, rcr2());
80106aa2:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80106aa8:	0f b6 00             	movzbl (%eax),%eax

  //PAGEBREAK: 13
  default:
    if(proc == 0 || (tf->cs&3) == 0){
      // In kernel, it must be our mistake.
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
80106aab:	0f b6 d0             	movzbl %al,%edx
80106aae:	8b 45 08             	mov    0x8(%ebp),%eax
80106ab1:	8b 40 30             	mov    0x30(%eax),%eax
80106ab4:	83 ec 0c             	sub    $0xc,%esp
80106ab7:	53                   	push   %ebx
80106ab8:	51                   	push   %ecx
80106ab9:	52                   	push   %edx
80106aba:	50                   	push   %eax
80106abb:	68 f8 c6 10 80       	push   $0x8010c6f8
80106ac0:	e8 01 99 ff ff       	call   801003c6 <cprintf>
80106ac5:	83 c4 20             	add    $0x20,%esp
              tf->trapno, cpu->id, tf->eip, rcr2());
      panic("trap");
80106ac8:	83 ec 0c             	sub    $0xc,%esp
80106acb:	68 2a c7 10 80       	push   $0x8010c72a
80106ad0:	e8 91 9a ff ff       	call   80100566 <panic>
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
80106ad5:	e8 b1 fc ff ff       	call   8010678b <rcr2>
80106ada:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80106add:	8b 45 08             	mov    0x8(%ebp),%eax
80106ae0:	8b 70 38             	mov    0x38(%eax),%esi
            "eip 0x%x addr 0x%x--kill proc\n",
            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip,
80106ae3:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80106ae9:	0f b6 00             	movzbl (%eax),%eax
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
              tf->trapno, cpu->id, tf->eip, rcr2());
      panic("trap");
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
80106aec:	0f b6 d8             	movzbl %al,%ebx
80106aef:	8b 45 08             	mov    0x8(%ebp),%eax
80106af2:	8b 48 34             	mov    0x34(%eax),%ecx
80106af5:	8b 45 08             	mov    0x8(%ebp),%eax
80106af8:	8b 50 30             	mov    0x30(%eax),%edx
            "eip 0x%x addr 0x%x--kill proc\n",
            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip,
80106afb:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b01:	8d 78 6c             	lea    0x6c(%eax),%edi
80106b04:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
              tf->trapno, cpu->id, tf->eip, rcr2());
      panic("trap");
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
80106b0a:	8b 40 10             	mov    0x10(%eax),%eax
80106b0d:	ff 75 e4             	pushl  -0x1c(%ebp)
80106b10:	56                   	push   %esi
80106b11:	53                   	push   %ebx
80106b12:	51                   	push   %ecx
80106b13:	52                   	push   %edx
80106b14:	57                   	push   %edi
80106b15:	50                   	push   %eax
80106b16:	68 30 c7 10 80       	push   $0x8010c730
80106b1b:	e8 a6 98 ff ff       	call   801003c6 <cprintf>
80106b20:	83 c4 20             	add    $0x20,%esp
            "eip 0x%x addr 0x%x--kill proc\n",
            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip,
            rcr2());
    proc->killed = 1;
80106b23:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b29:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
80106b30:	eb 01                	jmp    80106b33 <trap+0x209>
    ideintr();
    lapiceoi();
    break;
  case T_IRQ0 + IRQ_IDE+1:
    // Bochs generates spurious IDE1 interrupts.
    break;
80106b32:	90                   	nop
  }

  // Force process exit if it has been killed and is in user space.
  // (If it is still executing in the kernel, let it keep running
  // until it gets to the regular system call return.)
  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
80106b33:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b39:	85 c0                	test   %eax,%eax
80106b3b:	74 24                	je     80106b61 <trap+0x237>
80106b3d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b43:	8b 40 24             	mov    0x24(%eax),%eax
80106b46:	85 c0                	test   %eax,%eax
80106b48:	74 17                	je     80106b61 <trap+0x237>
80106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
80106b4d:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80106b51:	0f b7 c0             	movzwl %ax,%eax
80106b54:	83 e0 03             	and    $0x3,%eax
80106b57:	83 f8 03             	cmp    $0x3,%eax
80106b5a:	75 05                	jne    80106b61 <trap+0x237>
    exit();
80106b5c:	e8 6d de ff ff       	call   801049ce <exit>

  // Force process to give up CPU on clock tick.
  // If interrupts were on while locks held, would need to check nlock.
  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
80106b61:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b67:	85 c0                	test   %eax,%eax
80106b69:	74 1e                	je     80106b89 <trap+0x25f>
80106b6b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b71:	8b 40 0c             	mov    0xc(%eax),%eax
80106b74:	83 f8 04             	cmp    $0x4,%eax
80106b77:	75 10                	jne    80106b89 <trap+0x25f>
80106b79:	8b 45 08             	mov    0x8(%ebp),%eax
80106b7c:	8b 40 30             	mov    0x30(%eax),%eax
80106b7f:	83 f8 20             	cmp    $0x20,%eax
80106b82:	75 05                	jne    80106b89 <trap+0x25f>
    yield();
80106b84:	e8 02 e2 ff ff       	call   80104d8b <yield>

  // Check if the process has been killed since we yielded
  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
80106b89:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b8f:	85 c0                	test   %eax,%eax
80106b91:	74 27                	je     80106bba <trap+0x290>
80106b93:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106b99:	8b 40 24             	mov    0x24(%eax),%eax
80106b9c:	85 c0                	test   %eax,%eax
80106b9e:	74 1a                	je     80106bba <trap+0x290>
80106ba0:	8b 45 08             	mov    0x8(%ebp),%eax
80106ba3:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80106ba7:	0f b7 c0             	movzwl %ax,%eax
80106baa:	83 e0 03             	and    $0x3,%eax
80106bad:	83 f8 03             	cmp    $0x3,%eax
80106bb0:	75 08                	jne    80106bba <trap+0x290>
    exit();
80106bb2:	e8 17 de ff ff       	call   801049ce <exit>
80106bb7:	eb 01                	jmp    80106bba <trap+0x290>
      exit();
    proc->tf = tf;
    syscall();
    if(proc->killed)
      exit();
    return;
80106bb9:	90                   	nop
    yield();

  // Check if the process has been killed since we yielded
  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
    exit();
}
80106bba:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106bbd:	5b                   	pop    %ebx
80106bbe:	5e                   	pop    %esi
80106bbf:	5f                   	pop    %edi
80106bc0:	5d                   	pop    %ebp
80106bc1:	c3                   	ret    

80106bc2 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80106bc2:	55                   	push   %ebp
80106bc3:	89 e5                	mov    %esp,%ebp
80106bc5:	83 ec 14             	sub    $0x14,%esp
80106bc8:	8b 45 08             	mov    0x8(%ebp),%eax
80106bcb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80106bcf:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80106bd3:	89 c2                	mov    %eax,%edx
80106bd5:	ec                   	in     (%dx),%al
80106bd6:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80106bd9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80106bdd:	c9                   	leave  
80106bde:	c3                   	ret    

80106bdf <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80106bdf:	55                   	push   %ebp
80106be0:	89 e5                	mov    %esp,%ebp
80106be2:	83 ec 08             	sub    $0x8,%esp
80106be5:	8b 55 08             	mov    0x8(%ebp),%edx
80106be8:	8b 45 0c             	mov    0xc(%ebp),%eax
80106beb:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
80106bef:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80106bf2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80106bf6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80106bfa:	ee                   	out    %al,(%dx)
}
80106bfb:	90                   	nop
80106bfc:	c9                   	leave  
80106bfd:	c3                   	ret    

80106bfe <uartinit>:

static int uart;    // is there a uart?

void
uartinit(void)
{
80106bfe:	55                   	push   %ebp
80106bff:	89 e5                	mov    %esp,%ebp
80106c01:	83 ec 18             	sub    $0x18,%esp
  char *p;

  // Turn off the FIFO
  outb(COM1+2, 0);
80106c04:	6a 00                	push   $0x0
80106c06:	68 fa 03 00 00       	push   $0x3fa
80106c0b:	e8 cf ff ff ff       	call   80106bdf <outb>
80106c10:	83 c4 08             	add    $0x8,%esp
  
  // 9600 baud, 8 data bits, 1 stop bit, parity off.
  outb(COM1+3, 0x80);    // Unlock divisor
80106c13:	68 80 00 00 00       	push   $0x80
80106c18:	68 fb 03 00 00       	push   $0x3fb
80106c1d:	e8 bd ff ff ff       	call   80106bdf <outb>
80106c22:	83 c4 08             	add    $0x8,%esp
  outb(COM1+0, 115200/9600);
80106c25:	6a 0c                	push   $0xc
80106c27:	68 f8 03 00 00       	push   $0x3f8
80106c2c:	e8 ae ff ff ff       	call   80106bdf <outb>
80106c31:	83 c4 08             	add    $0x8,%esp
  outb(COM1+1, 0);
80106c34:	6a 00                	push   $0x0
80106c36:	68 f9 03 00 00       	push   $0x3f9
80106c3b:	e8 9f ff ff ff       	call   80106bdf <outb>
80106c40:	83 c4 08             	add    $0x8,%esp
  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
80106c43:	6a 03                	push   $0x3
80106c45:	68 fb 03 00 00       	push   $0x3fb
80106c4a:	e8 90 ff ff ff       	call   80106bdf <outb>
80106c4f:	83 c4 08             	add    $0x8,%esp
  outb(COM1+4, 0);
80106c52:	6a 00                	push   $0x0
80106c54:	68 fc 03 00 00       	push   $0x3fc
80106c59:	e8 81 ff ff ff       	call   80106bdf <outb>
80106c5e:	83 c4 08             	add    $0x8,%esp
  outb(COM1+1, 0x01);    // Enable receive interrupts.
80106c61:	6a 01                	push   $0x1
80106c63:	68 f9 03 00 00       	push   $0x3f9
80106c68:	e8 72 ff ff ff       	call   80106bdf <outb>
80106c6d:	83 c4 08             	add    $0x8,%esp

  // If status is 0xFF, no serial port.
  if(inb(COM1+5) == 0xFF)
80106c70:	68 fd 03 00 00       	push   $0x3fd
80106c75:	e8 48 ff ff ff       	call   80106bc2 <inb>
80106c7a:	83 c4 04             	add    $0x4,%esp
80106c7d:	3c ff                	cmp    $0xff,%al
80106c7f:	74 6e                	je     80106cef <uartinit+0xf1>
    return;
  uart = 1;
80106c81:	c7 05 a4 36 11 80 01 	movl   $0x1,0x801136a4
80106c88:	00 00 00 

  // Acknowledge pre-existing interrupt conditions;
  // enable interrupts.
  inb(COM1+2);
80106c8b:	68 fa 03 00 00       	push   $0x3fa
80106c90:	e8 2d ff ff ff       	call   80106bc2 <inb>
80106c95:	83 c4 04             	add    $0x4,%esp
  inb(COM1+0);
80106c98:	68 f8 03 00 00       	push   $0x3f8
80106c9d:	e8 20 ff ff ff       	call   80106bc2 <inb>
80106ca2:	83 c4 04             	add    $0x4,%esp
  picenable(IRQ_COM1);
80106ca5:	83 ec 0c             	sub    $0xc,%esp
80106ca8:	6a 04                	push   $0x4
80106caa:	e8 82 d3 ff ff       	call   80104031 <picenable>
80106caf:	83 c4 10             	add    $0x10,%esp
  ioapicenable(IRQ_COM1, 0);
80106cb2:	83 ec 08             	sub    $0x8,%esp
80106cb5:	6a 00                	push   $0x0
80106cb7:	6a 04                	push   $0x4
80106cb9:	e8 ad be ff ff       	call   80102b6b <ioapicenable>
80106cbe:	83 c4 10             	add    $0x10,%esp
  
  // Announce that we're here.
  for(p="xv6...\n"; *p; p++)
80106cc1:	c7 45 f4 f4 c7 10 80 	movl   $0x8010c7f4,-0xc(%ebp)
80106cc8:	eb 19                	jmp    80106ce3 <uartinit+0xe5>
    uartputc(*p);
80106cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106ccd:	0f b6 00             	movzbl (%eax),%eax
80106cd0:	0f be c0             	movsbl %al,%eax
80106cd3:	83 ec 0c             	sub    $0xc,%esp
80106cd6:	50                   	push   %eax
80106cd7:	e8 16 00 00 00       	call   80106cf2 <uartputc>
80106cdc:	83 c4 10             	add    $0x10,%esp
  inb(COM1+0);
  picenable(IRQ_COM1);
  ioapicenable(IRQ_COM1, 0);
  
  // Announce that we're here.
  for(p="xv6...\n"; *p; p++)
80106cdf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80106ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106ce6:	0f b6 00             	movzbl (%eax),%eax
80106ce9:	84 c0                	test   %al,%al
80106ceb:	75 dd                	jne    80106cca <uartinit+0xcc>
80106ced:	eb 01                	jmp    80106cf0 <uartinit+0xf2>
  outb(COM1+4, 0);
  outb(COM1+1, 0x01);    // Enable receive interrupts.

  // If status is 0xFF, no serial port.
  if(inb(COM1+5) == 0xFF)
    return;
80106cef:	90                   	nop
  ioapicenable(IRQ_COM1, 0);
  
  // Announce that we're here.
  for(p="xv6...\n"; *p; p++)
    uartputc(*p);
}
80106cf0:	c9                   	leave  
80106cf1:	c3                   	ret    

80106cf2 <uartputc>:

void
uartputc(int c)
{
80106cf2:	55                   	push   %ebp
80106cf3:	89 e5                	mov    %esp,%ebp
80106cf5:	83 ec 18             	sub    $0x18,%esp
  int i;

  if(!uart)
80106cf8:	a1 a4 36 11 80       	mov    0x801136a4,%eax
80106cfd:	85 c0                	test   %eax,%eax
80106cff:	74 53                	je     80106d54 <uartputc+0x62>
    return;
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
80106d01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80106d08:	eb 11                	jmp    80106d1b <uartputc+0x29>
    microdelay(10);
80106d0a:	83 ec 0c             	sub    $0xc,%esp
80106d0d:	6a 0a                	push   $0xa
80106d0f:	e8 36 c4 ff ff       	call   8010314a <microdelay>
80106d14:	83 c4 10             	add    $0x10,%esp
{
  int i;

  if(!uart)
    return;
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
80106d17:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80106d1b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
80106d1f:	7f 1a                	jg     80106d3b <uartputc+0x49>
80106d21:	83 ec 0c             	sub    $0xc,%esp
80106d24:	68 fd 03 00 00       	push   $0x3fd
80106d29:	e8 94 fe ff ff       	call   80106bc2 <inb>
80106d2e:	83 c4 10             	add    $0x10,%esp
80106d31:	0f b6 c0             	movzbl %al,%eax
80106d34:	83 e0 20             	and    $0x20,%eax
80106d37:	85 c0                	test   %eax,%eax
80106d39:	74 cf                	je     80106d0a <uartputc+0x18>
    microdelay(10);
  outb(COM1+0, c);
80106d3b:	8b 45 08             	mov    0x8(%ebp),%eax
80106d3e:	0f b6 c0             	movzbl %al,%eax
80106d41:	83 ec 08             	sub    $0x8,%esp
80106d44:	50                   	push   %eax
80106d45:	68 f8 03 00 00       	push   $0x3f8
80106d4a:	e8 90 fe ff ff       	call   80106bdf <outb>
80106d4f:	83 c4 10             	add    $0x10,%esp
80106d52:	eb 01                	jmp    80106d55 <uartputc+0x63>
uartputc(int c)
{
  int i;

  if(!uart)
    return;
80106d54:	90                   	nop
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
    microdelay(10);
  outb(COM1+0, c);
}
80106d55:	c9                   	leave  
80106d56:	c3                   	ret    

80106d57 <uartgetc>:

static int
uartgetc(void)
{
80106d57:	55                   	push   %ebp
80106d58:	89 e5                	mov    %esp,%ebp
  if(!uart)
80106d5a:	a1 a4 36 11 80       	mov    0x801136a4,%eax
80106d5f:	85 c0                	test   %eax,%eax
80106d61:	75 07                	jne    80106d6a <uartgetc+0x13>
    return -1;
80106d63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106d68:	eb 2e                	jmp    80106d98 <uartgetc+0x41>
  if(!(inb(COM1+5) & 0x01))
80106d6a:	68 fd 03 00 00       	push   $0x3fd
80106d6f:	e8 4e fe ff ff       	call   80106bc2 <inb>
80106d74:	83 c4 04             	add    $0x4,%esp
80106d77:	0f b6 c0             	movzbl %al,%eax
80106d7a:	83 e0 01             	and    $0x1,%eax
80106d7d:	85 c0                	test   %eax,%eax
80106d7f:	75 07                	jne    80106d88 <uartgetc+0x31>
    return -1;
80106d81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106d86:	eb 10                	jmp    80106d98 <uartgetc+0x41>
  return inb(COM1+0);
80106d88:	68 f8 03 00 00       	push   $0x3f8
80106d8d:	e8 30 fe ff ff       	call   80106bc2 <inb>
80106d92:	83 c4 04             	add    $0x4,%esp
80106d95:	0f b6 c0             	movzbl %al,%eax
}
80106d98:	c9                   	leave  
80106d99:	c3                   	ret    

80106d9a <uartintr>:

void
uartintr(void)
{
80106d9a:	55                   	push   %ebp
80106d9b:	89 e5                	mov    %esp,%ebp
80106d9d:	83 ec 08             	sub    $0x8,%esp
  consoleintr(uartgetc);
80106da0:	83 ec 0c             	sub    $0xc,%esp
80106da3:	68 57 6d 10 80       	push   $0x80106d57
80106da8:	e8 4c 9a ff ff       	call   801007f9 <consoleintr>
80106dad:	83 c4 10             	add    $0x10,%esp
}
80106db0:	90                   	nop
80106db1:	c9                   	leave  
80106db2:	c3                   	ret    

80106db3 <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
80106db3:	6a 00                	push   $0x0
  pushl $0
80106db5:	6a 00                	push   $0x0
  jmp alltraps
80106db7:	e9 7a f9 ff ff       	jmp    80106736 <alltraps>

80106dbc <vector1>:
.globl vector1
vector1:
  pushl $0
80106dbc:	6a 00                	push   $0x0
  pushl $1
80106dbe:	6a 01                	push   $0x1
  jmp alltraps
80106dc0:	e9 71 f9 ff ff       	jmp    80106736 <alltraps>

80106dc5 <vector2>:
.globl vector2
vector2:
  pushl $0
80106dc5:	6a 00                	push   $0x0
  pushl $2
80106dc7:	6a 02                	push   $0x2
  jmp alltraps
80106dc9:	e9 68 f9 ff ff       	jmp    80106736 <alltraps>

80106dce <vector3>:
.globl vector3
vector3:
  pushl $0
80106dce:	6a 00                	push   $0x0
  pushl $3
80106dd0:	6a 03                	push   $0x3
  jmp alltraps
80106dd2:	e9 5f f9 ff ff       	jmp    80106736 <alltraps>

80106dd7 <vector4>:
.globl vector4
vector4:
  pushl $0
80106dd7:	6a 00                	push   $0x0
  pushl $4
80106dd9:	6a 04                	push   $0x4
  jmp alltraps
80106ddb:	e9 56 f9 ff ff       	jmp    80106736 <alltraps>

80106de0 <vector5>:
.globl vector5
vector5:
  pushl $0
80106de0:	6a 00                	push   $0x0
  pushl $5
80106de2:	6a 05                	push   $0x5
  jmp alltraps
80106de4:	e9 4d f9 ff ff       	jmp    80106736 <alltraps>

80106de9 <vector6>:
.globl vector6
vector6:
  pushl $0
80106de9:	6a 00                	push   $0x0
  pushl $6
80106deb:	6a 06                	push   $0x6
  jmp alltraps
80106ded:	e9 44 f9 ff ff       	jmp    80106736 <alltraps>

80106df2 <vector7>:
.globl vector7
vector7:
  pushl $0
80106df2:	6a 00                	push   $0x0
  pushl $7
80106df4:	6a 07                	push   $0x7
  jmp alltraps
80106df6:	e9 3b f9 ff ff       	jmp    80106736 <alltraps>

80106dfb <vector8>:
.globl vector8
vector8:
  pushl $8
80106dfb:	6a 08                	push   $0x8
  jmp alltraps
80106dfd:	e9 34 f9 ff ff       	jmp    80106736 <alltraps>

80106e02 <vector9>:
.globl vector9
vector9:
  pushl $0
80106e02:	6a 00                	push   $0x0
  pushl $9
80106e04:	6a 09                	push   $0x9
  jmp alltraps
80106e06:	e9 2b f9 ff ff       	jmp    80106736 <alltraps>

80106e0b <vector10>:
.globl vector10
vector10:
  pushl $10
80106e0b:	6a 0a                	push   $0xa
  jmp alltraps
80106e0d:	e9 24 f9 ff ff       	jmp    80106736 <alltraps>

80106e12 <vector11>:
.globl vector11
vector11:
  pushl $11
80106e12:	6a 0b                	push   $0xb
  jmp alltraps
80106e14:	e9 1d f9 ff ff       	jmp    80106736 <alltraps>

80106e19 <vector12>:
.globl vector12
vector12:
  pushl $12
80106e19:	6a 0c                	push   $0xc
  jmp alltraps
80106e1b:	e9 16 f9 ff ff       	jmp    80106736 <alltraps>

80106e20 <vector13>:
.globl vector13
vector13:
  pushl $13
80106e20:	6a 0d                	push   $0xd
  jmp alltraps
80106e22:	e9 0f f9 ff ff       	jmp    80106736 <alltraps>

80106e27 <vector14>:
.globl vector14
vector14:
  pushl $14
80106e27:	6a 0e                	push   $0xe
  jmp alltraps
80106e29:	e9 08 f9 ff ff       	jmp    80106736 <alltraps>

80106e2e <vector15>:
.globl vector15
vector15:
  pushl $0
80106e2e:	6a 00                	push   $0x0
  pushl $15
80106e30:	6a 0f                	push   $0xf
  jmp alltraps
80106e32:	e9 ff f8 ff ff       	jmp    80106736 <alltraps>

80106e37 <vector16>:
.globl vector16
vector16:
  pushl $0
80106e37:	6a 00                	push   $0x0
  pushl $16
80106e39:	6a 10                	push   $0x10
  jmp alltraps
80106e3b:	e9 f6 f8 ff ff       	jmp    80106736 <alltraps>

80106e40 <vector17>:
.globl vector17
vector17:
  pushl $17
80106e40:	6a 11                	push   $0x11
  jmp alltraps
80106e42:	e9 ef f8 ff ff       	jmp    80106736 <alltraps>

80106e47 <vector18>:
.globl vector18
vector18:
  pushl $0
80106e47:	6a 00                	push   $0x0
  pushl $18
80106e49:	6a 12                	push   $0x12
  jmp alltraps
80106e4b:	e9 e6 f8 ff ff       	jmp    80106736 <alltraps>

80106e50 <vector19>:
.globl vector19
vector19:
  pushl $0
80106e50:	6a 00                	push   $0x0
  pushl $19
80106e52:	6a 13                	push   $0x13
  jmp alltraps
80106e54:	e9 dd f8 ff ff       	jmp    80106736 <alltraps>

80106e59 <vector20>:
.globl vector20
vector20:
  pushl $0
80106e59:	6a 00                	push   $0x0
  pushl $20
80106e5b:	6a 14                	push   $0x14
  jmp alltraps
80106e5d:	e9 d4 f8 ff ff       	jmp    80106736 <alltraps>

80106e62 <vector21>:
.globl vector21
vector21:
  pushl $0
80106e62:	6a 00                	push   $0x0
  pushl $21
80106e64:	6a 15                	push   $0x15
  jmp alltraps
80106e66:	e9 cb f8 ff ff       	jmp    80106736 <alltraps>

80106e6b <vector22>:
.globl vector22
vector22:
  pushl $0
80106e6b:	6a 00                	push   $0x0
  pushl $22
80106e6d:	6a 16                	push   $0x16
  jmp alltraps
80106e6f:	e9 c2 f8 ff ff       	jmp    80106736 <alltraps>

80106e74 <vector23>:
.globl vector23
vector23:
  pushl $0
80106e74:	6a 00                	push   $0x0
  pushl $23
80106e76:	6a 17                	push   $0x17
  jmp alltraps
80106e78:	e9 b9 f8 ff ff       	jmp    80106736 <alltraps>

80106e7d <vector24>:
.globl vector24
vector24:
  pushl $0
80106e7d:	6a 00                	push   $0x0
  pushl $24
80106e7f:	6a 18                	push   $0x18
  jmp alltraps
80106e81:	e9 b0 f8 ff ff       	jmp    80106736 <alltraps>

80106e86 <vector25>:
.globl vector25
vector25:
  pushl $0
80106e86:	6a 00                	push   $0x0
  pushl $25
80106e88:	6a 19                	push   $0x19
  jmp alltraps
80106e8a:	e9 a7 f8 ff ff       	jmp    80106736 <alltraps>

80106e8f <vector26>:
.globl vector26
vector26:
  pushl $0
80106e8f:	6a 00                	push   $0x0
  pushl $26
80106e91:	6a 1a                	push   $0x1a
  jmp alltraps
80106e93:	e9 9e f8 ff ff       	jmp    80106736 <alltraps>

80106e98 <vector27>:
.globl vector27
vector27:
  pushl $0
80106e98:	6a 00                	push   $0x0
  pushl $27
80106e9a:	6a 1b                	push   $0x1b
  jmp alltraps
80106e9c:	e9 95 f8 ff ff       	jmp    80106736 <alltraps>

80106ea1 <vector28>:
.globl vector28
vector28:
  pushl $0
80106ea1:	6a 00                	push   $0x0
  pushl $28
80106ea3:	6a 1c                	push   $0x1c
  jmp alltraps
80106ea5:	e9 8c f8 ff ff       	jmp    80106736 <alltraps>

80106eaa <vector29>:
.globl vector29
vector29:
  pushl $0
80106eaa:	6a 00                	push   $0x0
  pushl $29
80106eac:	6a 1d                	push   $0x1d
  jmp alltraps
80106eae:	e9 83 f8 ff ff       	jmp    80106736 <alltraps>

80106eb3 <vector30>:
.globl vector30
vector30:
  pushl $0
80106eb3:	6a 00                	push   $0x0
  pushl $30
80106eb5:	6a 1e                	push   $0x1e
  jmp alltraps
80106eb7:	e9 7a f8 ff ff       	jmp    80106736 <alltraps>

80106ebc <vector31>:
.globl vector31
vector31:
  pushl $0
80106ebc:	6a 00                	push   $0x0
  pushl $31
80106ebe:	6a 1f                	push   $0x1f
  jmp alltraps
80106ec0:	e9 71 f8 ff ff       	jmp    80106736 <alltraps>

80106ec5 <vector32>:
.globl vector32
vector32:
  pushl $0
80106ec5:	6a 00                	push   $0x0
  pushl $32
80106ec7:	6a 20                	push   $0x20
  jmp alltraps
80106ec9:	e9 68 f8 ff ff       	jmp    80106736 <alltraps>

80106ece <vector33>:
.globl vector33
vector33:
  pushl $0
80106ece:	6a 00                	push   $0x0
  pushl $33
80106ed0:	6a 21                	push   $0x21
  jmp alltraps
80106ed2:	e9 5f f8 ff ff       	jmp    80106736 <alltraps>

80106ed7 <vector34>:
.globl vector34
vector34:
  pushl $0
80106ed7:	6a 00                	push   $0x0
  pushl $34
80106ed9:	6a 22                	push   $0x22
  jmp alltraps
80106edb:	e9 56 f8 ff ff       	jmp    80106736 <alltraps>

80106ee0 <vector35>:
.globl vector35
vector35:
  pushl $0
80106ee0:	6a 00                	push   $0x0
  pushl $35
80106ee2:	6a 23                	push   $0x23
  jmp alltraps
80106ee4:	e9 4d f8 ff ff       	jmp    80106736 <alltraps>

80106ee9 <vector36>:
.globl vector36
vector36:
  pushl $0
80106ee9:	6a 00                	push   $0x0
  pushl $36
80106eeb:	6a 24                	push   $0x24
  jmp alltraps
80106eed:	e9 44 f8 ff ff       	jmp    80106736 <alltraps>

80106ef2 <vector37>:
.globl vector37
vector37:
  pushl $0
80106ef2:	6a 00                	push   $0x0
  pushl $37
80106ef4:	6a 25                	push   $0x25
  jmp alltraps
80106ef6:	e9 3b f8 ff ff       	jmp    80106736 <alltraps>

80106efb <vector38>:
.globl vector38
vector38:
  pushl $0
80106efb:	6a 00                	push   $0x0
  pushl $38
80106efd:	6a 26                	push   $0x26
  jmp alltraps
80106eff:	e9 32 f8 ff ff       	jmp    80106736 <alltraps>

80106f04 <vector39>:
.globl vector39
vector39:
  pushl $0
80106f04:	6a 00                	push   $0x0
  pushl $39
80106f06:	6a 27                	push   $0x27
  jmp alltraps
80106f08:	e9 29 f8 ff ff       	jmp    80106736 <alltraps>

80106f0d <vector40>:
.globl vector40
vector40:
  pushl $0
80106f0d:	6a 00                	push   $0x0
  pushl $40
80106f0f:	6a 28                	push   $0x28
  jmp alltraps
80106f11:	e9 20 f8 ff ff       	jmp    80106736 <alltraps>

80106f16 <vector41>:
.globl vector41
vector41:
  pushl $0
80106f16:	6a 00                	push   $0x0
  pushl $41
80106f18:	6a 29                	push   $0x29
  jmp alltraps
80106f1a:	e9 17 f8 ff ff       	jmp    80106736 <alltraps>

80106f1f <vector42>:
.globl vector42
vector42:
  pushl $0
80106f1f:	6a 00                	push   $0x0
  pushl $42
80106f21:	6a 2a                	push   $0x2a
  jmp alltraps
80106f23:	e9 0e f8 ff ff       	jmp    80106736 <alltraps>

80106f28 <vector43>:
.globl vector43
vector43:
  pushl $0
80106f28:	6a 00                	push   $0x0
  pushl $43
80106f2a:	6a 2b                	push   $0x2b
  jmp alltraps
80106f2c:	e9 05 f8 ff ff       	jmp    80106736 <alltraps>

80106f31 <vector44>:
.globl vector44
vector44:
  pushl $0
80106f31:	6a 00                	push   $0x0
  pushl $44
80106f33:	6a 2c                	push   $0x2c
  jmp alltraps
80106f35:	e9 fc f7 ff ff       	jmp    80106736 <alltraps>

80106f3a <vector45>:
.globl vector45
vector45:
  pushl $0
80106f3a:	6a 00                	push   $0x0
  pushl $45
80106f3c:	6a 2d                	push   $0x2d
  jmp alltraps
80106f3e:	e9 f3 f7 ff ff       	jmp    80106736 <alltraps>

80106f43 <vector46>:
.globl vector46
vector46:
  pushl $0
80106f43:	6a 00                	push   $0x0
  pushl $46
80106f45:	6a 2e                	push   $0x2e
  jmp alltraps
80106f47:	e9 ea f7 ff ff       	jmp    80106736 <alltraps>

80106f4c <vector47>:
.globl vector47
vector47:
  pushl $0
80106f4c:	6a 00                	push   $0x0
  pushl $47
80106f4e:	6a 2f                	push   $0x2f
  jmp alltraps
80106f50:	e9 e1 f7 ff ff       	jmp    80106736 <alltraps>

80106f55 <vector48>:
.globl vector48
vector48:
  pushl $0
80106f55:	6a 00                	push   $0x0
  pushl $48
80106f57:	6a 30                	push   $0x30
  jmp alltraps
80106f59:	e9 d8 f7 ff ff       	jmp    80106736 <alltraps>

80106f5e <vector49>:
.globl vector49
vector49:
  pushl $0
80106f5e:	6a 00                	push   $0x0
  pushl $49
80106f60:	6a 31                	push   $0x31
  jmp alltraps
80106f62:	e9 cf f7 ff ff       	jmp    80106736 <alltraps>

80106f67 <vector50>:
.globl vector50
vector50:
  pushl $0
80106f67:	6a 00                	push   $0x0
  pushl $50
80106f69:	6a 32                	push   $0x32
  jmp alltraps
80106f6b:	e9 c6 f7 ff ff       	jmp    80106736 <alltraps>

80106f70 <vector51>:
.globl vector51
vector51:
  pushl $0
80106f70:	6a 00                	push   $0x0
  pushl $51
80106f72:	6a 33                	push   $0x33
  jmp alltraps
80106f74:	e9 bd f7 ff ff       	jmp    80106736 <alltraps>

80106f79 <vector52>:
.globl vector52
vector52:
  pushl $0
80106f79:	6a 00                	push   $0x0
  pushl $52
80106f7b:	6a 34                	push   $0x34
  jmp alltraps
80106f7d:	e9 b4 f7 ff ff       	jmp    80106736 <alltraps>

80106f82 <vector53>:
.globl vector53
vector53:
  pushl $0
80106f82:	6a 00                	push   $0x0
  pushl $53
80106f84:	6a 35                	push   $0x35
  jmp alltraps
80106f86:	e9 ab f7 ff ff       	jmp    80106736 <alltraps>

80106f8b <vector54>:
.globl vector54
vector54:
  pushl $0
80106f8b:	6a 00                	push   $0x0
  pushl $54
80106f8d:	6a 36                	push   $0x36
  jmp alltraps
80106f8f:	e9 a2 f7 ff ff       	jmp    80106736 <alltraps>

80106f94 <vector55>:
.globl vector55
vector55:
  pushl $0
80106f94:	6a 00                	push   $0x0
  pushl $55
80106f96:	6a 37                	push   $0x37
  jmp alltraps
80106f98:	e9 99 f7 ff ff       	jmp    80106736 <alltraps>

80106f9d <vector56>:
.globl vector56
vector56:
  pushl $0
80106f9d:	6a 00                	push   $0x0
  pushl $56
80106f9f:	6a 38                	push   $0x38
  jmp alltraps
80106fa1:	e9 90 f7 ff ff       	jmp    80106736 <alltraps>

80106fa6 <vector57>:
.globl vector57
vector57:
  pushl $0
80106fa6:	6a 00                	push   $0x0
  pushl $57
80106fa8:	6a 39                	push   $0x39
  jmp alltraps
80106faa:	e9 87 f7 ff ff       	jmp    80106736 <alltraps>

80106faf <vector58>:
.globl vector58
vector58:
  pushl $0
80106faf:	6a 00                	push   $0x0
  pushl $58
80106fb1:	6a 3a                	push   $0x3a
  jmp alltraps
80106fb3:	e9 7e f7 ff ff       	jmp    80106736 <alltraps>

80106fb8 <vector59>:
.globl vector59
vector59:
  pushl $0
80106fb8:	6a 00                	push   $0x0
  pushl $59
80106fba:	6a 3b                	push   $0x3b
  jmp alltraps
80106fbc:	e9 75 f7 ff ff       	jmp    80106736 <alltraps>

80106fc1 <vector60>:
.globl vector60
vector60:
  pushl $0
80106fc1:	6a 00                	push   $0x0
  pushl $60
80106fc3:	6a 3c                	push   $0x3c
  jmp alltraps
80106fc5:	e9 6c f7 ff ff       	jmp    80106736 <alltraps>

80106fca <vector61>:
.globl vector61
vector61:
  pushl $0
80106fca:	6a 00                	push   $0x0
  pushl $61
80106fcc:	6a 3d                	push   $0x3d
  jmp alltraps
80106fce:	e9 63 f7 ff ff       	jmp    80106736 <alltraps>

80106fd3 <vector62>:
.globl vector62
vector62:
  pushl $0
80106fd3:	6a 00                	push   $0x0
  pushl $62
80106fd5:	6a 3e                	push   $0x3e
  jmp alltraps
80106fd7:	e9 5a f7 ff ff       	jmp    80106736 <alltraps>

80106fdc <vector63>:
.globl vector63
vector63:
  pushl $0
80106fdc:	6a 00                	push   $0x0
  pushl $63
80106fde:	6a 3f                	push   $0x3f
  jmp alltraps
80106fe0:	e9 51 f7 ff ff       	jmp    80106736 <alltraps>

80106fe5 <vector64>:
.globl vector64
vector64:
  pushl $0
80106fe5:	6a 00                	push   $0x0
  pushl $64
80106fe7:	6a 40                	push   $0x40
  jmp alltraps
80106fe9:	e9 48 f7 ff ff       	jmp    80106736 <alltraps>

80106fee <vector65>:
.globl vector65
vector65:
  pushl $0
80106fee:	6a 00                	push   $0x0
  pushl $65
80106ff0:	6a 41                	push   $0x41
  jmp alltraps
80106ff2:	e9 3f f7 ff ff       	jmp    80106736 <alltraps>

80106ff7 <vector66>:
.globl vector66
vector66:
  pushl $0
80106ff7:	6a 00                	push   $0x0
  pushl $66
80106ff9:	6a 42                	push   $0x42
  jmp alltraps
80106ffb:	e9 36 f7 ff ff       	jmp    80106736 <alltraps>

80107000 <vector67>:
.globl vector67
vector67:
  pushl $0
80107000:	6a 00                	push   $0x0
  pushl $67
80107002:	6a 43                	push   $0x43
  jmp alltraps
80107004:	e9 2d f7 ff ff       	jmp    80106736 <alltraps>

80107009 <vector68>:
.globl vector68
vector68:
  pushl $0
80107009:	6a 00                	push   $0x0
  pushl $68
8010700b:	6a 44                	push   $0x44
  jmp alltraps
8010700d:	e9 24 f7 ff ff       	jmp    80106736 <alltraps>

80107012 <vector69>:
.globl vector69
vector69:
  pushl $0
80107012:	6a 00                	push   $0x0
  pushl $69
80107014:	6a 45                	push   $0x45
  jmp alltraps
80107016:	e9 1b f7 ff ff       	jmp    80106736 <alltraps>

8010701b <vector70>:
.globl vector70
vector70:
  pushl $0
8010701b:	6a 00                	push   $0x0
  pushl $70
8010701d:	6a 46                	push   $0x46
  jmp alltraps
8010701f:	e9 12 f7 ff ff       	jmp    80106736 <alltraps>

80107024 <vector71>:
.globl vector71
vector71:
  pushl $0
80107024:	6a 00                	push   $0x0
  pushl $71
80107026:	6a 47                	push   $0x47
  jmp alltraps
80107028:	e9 09 f7 ff ff       	jmp    80106736 <alltraps>

8010702d <vector72>:
.globl vector72
vector72:
  pushl $0
8010702d:	6a 00                	push   $0x0
  pushl $72
8010702f:	6a 48                	push   $0x48
  jmp alltraps
80107031:	e9 00 f7 ff ff       	jmp    80106736 <alltraps>

80107036 <vector73>:
.globl vector73
vector73:
  pushl $0
80107036:	6a 00                	push   $0x0
  pushl $73
80107038:	6a 49                	push   $0x49
  jmp alltraps
8010703a:	e9 f7 f6 ff ff       	jmp    80106736 <alltraps>

8010703f <vector74>:
.globl vector74
vector74:
  pushl $0
8010703f:	6a 00                	push   $0x0
  pushl $74
80107041:	6a 4a                	push   $0x4a
  jmp alltraps
80107043:	e9 ee f6 ff ff       	jmp    80106736 <alltraps>

80107048 <vector75>:
.globl vector75
vector75:
  pushl $0
80107048:	6a 00                	push   $0x0
  pushl $75
8010704a:	6a 4b                	push   $0x4b
  jmp alltraps
8010704c:	e9 e5 f6 ff ff       	jmp    80106736 <alltraps>

80107051 <vector76>:
.globl vector76
vector76:
  pushl $0
80107051:	6a 00                	push   $0x0
  pushl $76
80107053:	6a 4c                	push   $0x4c
  jmp alltraps
80107055:	e9 dc f6 ff ff       	jmp    80106736 <alltraps>

8010705a <vector77>:
.globl vector77
vector77:
  pushl $0
8010705a:	6a 00                	push   $0x0
  pushl $77
8010705c:	6a 4d                	push   $0x4d
  jmp alltraps
8010705e:	e9 d3 f6 ff ff       	jmp    80106736 <alltraps>

80107063 <vector78>:
.globl vector78
vector78:
  pushl $0
80107063:	6a 00                	push   $0x0
  pushl $78
80107065:	6a 4e                	push   $0x4e
  jmp alltraps
80107067:	e9 ca f6 ff ff       	jmp    80106736 <alltraps>

8010706c <vector79>:
.globl vector79
vector79:
  pushl $0
8010706c:	6a 00                	push   $0x0
  pushl $79
8010706e:	6a 4f                	push   $0x4f
  jmp alltraps
80107070:	e9 c1 f6 ff ff       	jmp    80106736 <alltraps>

80107075 <vector80>:
.globl vector80
vector80:
  pushl $0
80107075:	6a 00                	push   $0x0
  pushl $80
80107077:	6a 50                	push   $0x50
  jmp alltraps
80107079:	e9 b8 f6 ff ff       	jmp    80106736 <alltraps>

8010707e <vector81>:
.globl vector81
vector81:
  pushl $0
8010707e:	6a 00                	push   $0x0
  pushl $81
80107080:	6a 51                	push   $0x51
  jmp alltraps
80107082:	e9 af f6 ff ff       	jmp    80106736 <alltraps>

80107087 <vector82>:
.globl vector82
vector82:
  pushl $0
80107087:	6a 00                	push   $0x0
  pushl $82
80107089:	6a 52                	push   $0x52
  jmp alltraps
8010708b:	e9 a6 f6 ff ff       	jmp    80106736 <alltraps>

80107090 <vector83>:
.globl vector83
vector83:
  pushl $0
80107090:	6a 00                	push   $0x0
  pushl $83
80107092:	6a 53                	push   $0x53
  jmp alltraps
80107094:	e9 9d f6 ff ff       	jmp    80106736 <alltraps>

80107099 <vector84>:
.globl vector84
vector84:
  pushl $0
80107099:	6a 00                	push   $0x0
  pushl $84
8010709b:	6a 54                	push   $0x54
  jmp alltraps
8010709d:	e9 94 f6 ff ff       	jmp    80106736 <alltraps>

801070a2 <vector85>:
.globl vector85
vector85:
  pushl $0
801070a2:	6a 00                	push   $0x0
  pushl $85
801070a4:	6a 55                	push   $0x55
  jmp alltraps
801070a6:	e9 8b f6 ff ff       	jmp    80106736 <alltraps>

801070ab <vector86>:
.globl vector86
vector86:
  pushl $0
801070ab:	6a 00                	push   $0x0
  pushl $86
801070ad:	6a 56                	push   $0x56
  jmp alltraps
801070af:	e9 82 f6 ff ff       	jmp    80106736 <alltraps>

801070b4 <vector87>:
.globl vector87
vector87:
  pushl $0
801070b4:	6a 00                	push   $0x0
  pushl $87
801070b6:	6a 57                	push   $0x57
  jmp alltraps
801070b8:	e9 79 f6 ff ff       	jmp    80106736 <alltraps>

801070bd <vector88>:
.globl vector88
vector88:
  pushl $0
801070bd:	6a 00                	push   $0x0
  pushl $88
801070bf:	6a 58                	push   $0x58
  jmp alltraps
801070c1:	e9 70 f6 ff ff       	jmp    80106736 <alltraps>

801070c6 <vector89>:
.globl vector89
vector89:
  pushl $0
801070c6:	6a 00                	push   $0x0
  pushl $89
801070c8:	6a 59                	push   $0x59
  jmp alltraps
801070ca:	e9 67 f6 ff ff       	jmp    80106736 <alltraps>

801070cf <vector90>:
.globl vector90
vector90:
  pushl $0
801070cf:	6a 00                	push   $0x0
  pushl $90
801070d1:	6a 5a                	push   $0x5a
  jmp alltraps
801070d3:	e9 5e f6 ff ff       	jmp    80106736 <alltraps>

801070d8 <vector91>:
.globl vector91
vector91:
  pushl $0
801070d8:	6a 00                	push   $0x0
  pushl $91
801070da:	6a 5b                	push   $0x5b
  jmp alltraps
801070dc:	e9 55 f6 ff ff       	jmp    80106736 <alltraps>

801070e1 <vector92>:
.globl vector92
vector92:
  pushl $0
801070e1:	6a 00                	push   $0x0
  pushl $92
801070e3:	6a 5c                	push   $0x5c
  jmp alltraps
801070e5:	e9 4c f6 ff ff       	jmp    80106736 <alltraps>

801070ea <vector93>:
.globl vector93
vector93:
  pushl $0
801070ea:	6a 00                	push   $0x0
  pushl $93
801070ec:	6a 5d                	push   $0x5d
  jmp alltraps
801070ee:	e9 43 f6 ff ff       	jmp    80106736 <alltraps>

801070f3 <vector94>:
.globl vector94
vector94:
  pushl $0
801070f3:	6a 00                	push   $0x0
  pushl $94
801070f5:	6a 5e                	push   $0x5e
  jmp alltraps
801070f7:	e9 3a f6 ff ff       	jmp    80106736 <alltraps>

801070fc <vector95>:
.globl vector95
vector95:
  pushl $0
801070fc:	6a 00                	push   $0x0
  pushl $95
801070fe:	6a 5f                	push   $0x5f
  jmp alltraps
80107100:	e9 31 f6 ff ff       	jmp    80106736 <alltraps>

80107105 <vector96>:
.globl vector96
vector96:
  pushl $0
80107105:	6a 00                	push   $0x0
  pushl $96
80107107:	6a 60                	push   $0x60
  jmp alltraps
80107109:	e9 28 f6 ff ff       	jmp    80106736 <alltraps>

8010710e <vector97>:
.globl vector97
vector97:
  pushl $0
8010710e:	6a 00                	push   $0x0
  pushl $97
80107110:	6a 61                	push   $0x61
  jmp alltraps
80107112:	e9 1f f6 ff ff       	jmp    80106736 <alltraps>

80107117 <vector98>:
.globl vector98
vector98:
  pushl $0
80107117:	6a 00                	push   $0x0
  pushl $98
80107119:	6a 62                	push   $0x62
  jmp alltraps
8010711b:	e9 16 f6 ff ff       	jmp    80106736 <alltraps>

80107120 <vector99>:
.globl vector99
vector99:
  pushl $0
80107120:	6a 00                	push   $0x0
  pushl $99
80107122:	6a 63                	push   $0x63
  jmp alltraps
80107124:	e9 0d f6 ff ff       	jmp    80106736 <alltraps>

80107129 <vector100>:
.globl vector100
vector100:
  pushl $0
80107129:	6a 00                	push   $0x0
  pushl $100
8010712b:	6a 64                	push   $0x64
  jmp alltraps
8010712d:	e9 04 f6 ff ff       	jmp    80106736 <alltraps>

80107132 <vector101>:
.globl vector101
vector101:
  pushl $0
80107132:	6a 00                	push   $0x0
  pushl $101
80107134:	6a 65                	push   $0x65
  jmp alltraps
80107136:	e9 fb f5 ff ff       	jmp    80106736 <alltraps>

8010713b <vector102>:
.globl vector102
vector102:
  pushl $0
8010713b:	6a 00                	push   $0x0
  pushl $102
8010713d:	6a 66                	push   $0x66
  jmp alltraps
8010713f:	e9 f2 f5 ff ff       	jmp    80106736 <alltraps>

80107144 <vector103>:
.globl vector103
vector103:
  pushl $0
80107144:	6a 00                	push   $0x0
  pushl $103
80107146:	6a 67                	push   $0x67
  jmp alltraps
80107148:	e9 e9 f5 ff ff       	jmp    80106736 <alltraps>

8010714d <vector104>:
.globl vector104
vector104:
  pushl $0
8010714d:	6a 00                	push   $0x0
  pushl $104
8010714f:	6a 68                	push   $0x68
  jmp alltraps
80107151:	e9 e0 f5 ff ff       	jmp    80106736 <alltraps>

80107156 <vector105>:
.globl vector105
vector105:
  pushl $0
80107156:	6a 00                	push   $0x0
  pushl $105
80107158:	6a 69                	push   $0x69
  jmp alltraps
8010715a:	e9 d7 f5 ff ff       	jmp    80106736 <alltraps>

8010715f <vector106>:
.globl vector106
vector106:
  pushl $0
8010715f:	6a 00                	push   $0x0
  pushl $106
80107161:	6a 6a                	push   $0x6a
  jmp alltraps
80107163:	e9 ce f5 ff ff       	jmp    80106736 <alltraps>

80107168 <vector107>:
.globl vector107
vector107:
  pushl $0
80107168:	6a 00                	push   $0x0
  pushl $107
8010716a:	6a 6b                	push   $0x6b
  jmp alltraps
8010716c:	e9 c5 f5 ff ff       	jmp    80106736 <alltraps>

80107171 <vector108>:
.globl vector108
vector108:
  pushl $0
80107171:	6a 00                	push   $0x0
  pushl $108
80107173:	6a 6c                	push   $0x6c
  jmp alltraps
80107175:	e9 bc f5 ff ff       	jmp    80106736 <alltraps>

8010717a <vector109>:
.globl vector109
vector109:
  pushl $0
8010717a:	6a 00                	push   $0x0
  pushl $109
8010717c:	6a 6d                	push   $0x6d
  jmp alltraps
8010717e:	e9 b3 f5 ff ff       	jmp    80106736 <alltraps>

80107183 <vector110>:
.globl vector110
vector110:
  pushl $0
80107183:	6a 00                	push   $0x0
  pushl $110
80107185:	6a 6e                	push   $0x6e
  jmp alltraps
80107187:	e9 aa f5 ff ff       	jmp    80106736 <alltraps>

8010718c <vector111>:
.globl vector111
vector111:
  pushl $0
8010718c:	6a 00                	push   $0x0
  pushl $111
8010718e:	6a 6f                	push   $0x6f
  jmp alltraps
80107190:	e9 a1 f5 ff ff       	jmp    80106736 <alltraps>

80107195 <vector112>:
.globl vector112
vector112:
  pushl $0
80107195:	6a 00                	push   $0x0
  pushl $112
80107197:	6a 70                	push   $0x70
  jmp alltraps
80107199:	e9 98 f5 ff ff       	jmp    80106736 <alltraps>

8010719e <vector113>:
.globl vector113
vector113:
  pushl $0
8010719e:	6a 00                	push   $0x0
  pushl $113
801071a0:	6a 71                	push   $0x71
  jmp alltraps
801071a2:	e9 8f f5 ff ff       	jmp    80106736 <alltraps>

801071a7 <vector114>:
.globl vector114
vector114:
  pushl $0
801071a7:	6a 00                	push   $0x0
  pushl $114
801071a9:	6a 72                	push   $0x72
  jmp alltraps
801071ab:	e9 86 f5 ff ff       	jmp    80106736 <alltraps>

801071b0 <vector115>:
.globl vector115
vector115:
  pushl $0
801071b0:	6a 00                	push   $0x0
  pushl $115
801071b2:	6a 73                	push   $0x73
  jmp alltraps
801071b4:	e9 7d f5 ff ff       	jmp    80106736 <alltraps>

801071b9 <vector116>:
.globl vector116
vector116:
  pushl $0
801071b9:	6a 00                	push   $0x0
  pushl $116
801071bb:	6a 74                	push   $0x74
  jmp alltraps
801071bd:	e9 74 f5 ff ff       	jmp    80106736 <alltraps>

801071c2 <vector117>:
.globl vector117
vector117:
  pushl $0
801071c2:	6a 00                	push   $0x0
  pushl $117
801071c4:	6a 75                	push   $0x75
  jmp alltraps
801071c6:	e9 6b f5 ff ff       	jmp    80106736 <alltraps>

801071cb <vector118>:
.globl vector118
vector118:
  pushl $0
801071cb:	6a 00                	push   $0x0
  pushl $118
801071cd:	6a 76                	push   $0x76
  jmp alltraps
801071cf:	e9 62 f5 ff ff       	jmp    80106736 <alltraps>

801071d4 <vector119>:
.globl vector119
vector119:
  pushl $0
801071d4:	6a 00                	push   $0x0
  pushl $119
801071d6:	6a 77                	push   $0x77
  jmp alltraps
801071d8:	e9 59 f5 ff ff       	jmp    80106736 <alltraps>

801071dd <vector120>:
.globl vector120
vector120:
  pushl $0
801071dd:	6a 00                	push   $0x0
  pushl $120
801071df:	6a 78                	push   $0x78
  jmp alltraps
801071e1:	e9 50 f5 ff ff       	jmp    80106736 <alltraps>

801071e6 <vector121>:
.globl vector121
vector121:
  pushl $0
801071e6:	6a 00                	push   $0x0
  pushl $121
801071e8:	6a 79                	push   $0x79
  jmp alltraps
801071ea:	e9 47 f5 ff ff       	jmp    80106736 <alltraps>

801071ef <vector122>:
.globl vector122
vector122:
  pushl $0
801071ef:	6a 00                	push   $0x0
  pushl $122
801071f1:	6a 7a                	push   $0x7a
  jmp alltraps
801071f3:	e9 3e f5 ff ff       	jmp    80106736 <alltraps>

801071f8 <vector123>:
.globl vector123
vector123:
  pushl $0
801071f8:	6a 00                	push   $0x0
  pushl $123
801071fa:	6a 7b                	push   $0x7b
  jmp alltraps
801071fc:	e9 35 f5 ff ff       	jmp    80106736 <alltraps>

80107201 <vector124>:
.globl vector124
vector124:
  pushl $0
80107201:	6a 00                	push   $0x0
  pushl $124
80107203:	6a 7c                	push   $0x7c
  jmp alltraps
80107205:	e9 2c f5 ff ff       	jmp    80106736 <alltraps>

8010720a <vector125>:
.globl vector125
vector125:
  pushl $0
8010720a:	6a 00                	push   $0x0
  pushl $125
8010720c:	6a 7d                	push   $0x7d
  jmp alltraps
8010720e:	e9 23 f5 ff ff       	jmp    80106736 <alltraps>

80107213 <vector126>:
.globl vector126
vector126:
  pushl $0
80107213:	6a 00                	push   $0x0
  pushl $126
80107215:	6a 7e                	push   $0x7e
  jmp alltraps
80107217:	e9 1a f5 ff ff       	jmp    80106736 <alltraps>

8010721c <vector127>:
.globl vector127
vector127:
  pushl $0
8010721c:	6a 00                	push   $0x0
  pushl $127
8010721e:	6a 7f                	push   $0x7f
  jmp alltraps
80107220:	e9 11 f5 ff ff       	jmp    80106736 <alltraps>

80107225 <vector128>:
.globl vector128
vector128:
  pushl $0
80107225:	6a 00                	push   $0x0
  pushl $128
80107227:	68 80 00 00 00       	push   $0x80
  jmp alltraps
8010722c:	e9 05 f5 ff ff       	jmp    80106736 <alltraps>

80107231 <vector129>:
.globl vector129
vector129:
  pushl $0
80107231:	6a 00                	push   $0x0
  pushl $129
80107233:	68 81 00 00 00       	push   $0x81
  jmp alltraps
80107238:	e9 f9 f4 ff ff       	jmp    80106736 <alltraps>

8010723d <vector130>:
.globl vector130
vector130:
  pushl $0
8010723d:	6a 00                	push   $0x0
  pushl $130
8010723f:	68 82 00 00 00       	push   $0x82
  jmp alltraps
80107244:	e9 ed f4 ff ff       	jmp    80106736 <alltraps>

80107249 <vector131>:
.globl vector131
vector131:
  pushl $0
80107249:	6a 00                	push   $0x0
  pushl $131
8010724b:	68 83 00 00 00       	push   $0x83
  jmp alltraps
80107250:	e9 e1 f4 ff ff       	jmp    80106736 <alltraps>

80107255 <vector132>:
.globl vector132
vector132:
  pushl $0
80107255:	6a 00                	push   $0x0
  pushl $132
80107257:	68 84 00 00 00       	push   $0x84
  jmp alltraps
8010725c:	e9 d5 f4 ff ff       	jmp    80106736 <alltraps>

80107261 <vector133>:
.globl vector133
vector133:
  pushl $0
80107261:	6a 00                	push   $0x0
  pushl $133
80107263:	68 85 00 00 00       	push   $0x85
  jmp alltraps
80107268:	e9 c9 f4 ff ff       	jmp    80106736 <alltraps>

8010726d <vector134>:
.globl vector134
vector134:
  pushl $0
8010726d:	6a 00                	push   $0x0
  pushl $134
8010726f:	68 86 00 00 00       	push   $0x86
  jmp alltraps
80107274:	e9 bd f4 ff ff       	jmp    80106736 <alltraps>

80107279 <vector135>:
.globl vector135
vector135:
  pushl $0
80107279:	6a 00                	push   $0x0
  pushl $135
8010727b:	68 87 00 00 00       	push   $0x87
  jmp alltraps
80107280:	e9 b1 f4 ff ff       	jmp    80106736 <alltraps>

80107285 <vector136>:
.globl vector136
vector136:
  pushl $0
80107285:	6a 00                	push   $0x0
  pushl $136
80107287:	68 88 00 00 00       	push   $0x88
  jmp alltraps
8010728c:	e9 a5 f4 ff ff       	jmp    80106736 <alltraps>

80107291 <vector137>:
.globl vector137
vector137:
  pushl $0
80107291:	6a 00                	push   $0x0
  pushl $137
80107293:	68 89 00 00 00       	push   $0x89
  jmp alltraps
80107298:	e9 99 f4 ff ff       	jmp    80106736 <alltraps>

8010729d <vector138>:
.globl vector138
vector138:
  pushl $0
8010729d:	6a 00                	push   $0x0
  pushl $138
8010729f:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
801072a4:	e9 8d f4 ff ff       	jmp    80106736 <alltraps>

801072a9 <vector139>:
.globl vector139
vector139:
  pushl $0
801072a9:	6a 00                	push   $0x0
  pushl $139
801072ab:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
801072b0:	e9 81 f4 ff ff       	jmp    80106736 <alltraps>

801072b5 <vector140>:
.globl vector140
vector140:
  pushl $0
801072b5:	6a 00                	push   $0x0
  pushl $140
801072b7:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
801072bc:	e9 75 f4 ff ff       	jmp    80106736 <alltraps>

801072c1 <vector141>:
.globl vector141
vector141:
  pushl $0
801072c1:	6a 00                	push   $0x0
  pushl $141
801072c3:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
801072c8:	e9 69 f4 ff ff       	jmp    80106736 <alltraps>

801072cd <vector142>:
.globl vector142
vector142:
  pushl $0
801072cd:	6a 00                	push   $0x0
  pushl $142
801072cf:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
801072d4:	e9 5d f4 ff ff       	jmp    80106736 <alltraps>

801072d9 <vector143>:
.globl vector143
vector143:
  pushl $0
801072d9:	6a 00                	push   $0x0
  pushl $143
801072db:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
801072e0:	e9 51 f4 ff ff       	jmp    80106736 <alltraps>

801072e5 <vector144>:
.globl vector144
vector144:
  pushl $0
801072e5:	6a 00                	push   $0x0
  pushl $144
801072e7:	68 90 00 00 00       	push   $0x90
  jmp alltraps
801072ec:	e9 45 f4 ff ff       	jmp    80106736 <alltraps>

801072f1 <vector145>:
.globl vector145
vector145:
  pushl $0
801072f1:	6a 00                	push   $0x0
  pushl $145
801072f3:	68 91 00 00 00       	push   $0x91
  jmp alltraps
801072f8:	e9 39 f4 ff ff       	jmp    80106736 <alltraps>

801072fd <vector146>:
.globl vector146
vector146:
  pushl $0
801072fd:	6a 00                	push   $0x0
  pushl $146
801072ff:	68 92 00 00 00       	push   $0x92
  jmp alltraps
80107304:	e9 2d f4 ff ff       	jmp    80106736 <alltraps>

80107309 <vector147>:
.globl vector147
vector147:
  pushl $0
80107309:	6a 00                	push   $0x0
  pushl $147
8010730b:	68 93 00 00 00       	push   $0x93
  jmp alltraps
80107310:	e9 21 f4 ff ff       	jmp    80106736 <alltraps>

80107315 <vector148>:
.globl vector148
vector148:
  pushl $0
80107315:	6a 00                	push   $0x0
  pushl $148
80107317:	68 94 00 00 00       	push   $0x94
  jmp alltraps
8010731c:	e9 15 f4 ff ff       	jmp    80106736 <alltraps>

80107321 <vector149>:
.globl vector149
vector149:
  pushl $0
80107321:	6a 00                	push   $0x0
  pushl $149
80107323:	68 95 00 00 00       	push   $0x95
  jmp alltraps
80107328:	e9 09 f4 ff ff       	jmp    80106736 <alltraps>

8010732d <vector150>:
.globl vector150
vector150:
  pushl $0
8010732d:	6a 00                	push   $0x0
  pushl $150
8010732f:	68 96 00 00 00       	push   $0x96
  jmp alltraps
80107334:	e9 fd f3 ff ff       	jmp    80106736 <alltraps>

80107339 <vector151>:
.globl vector151
vector151:
  pushl $0
80107339:	6a 00                	push   $0x0
  pushl $151
8010733b:	68 97 00 00 00       	push   $0x97
  jmp alltraps
80107340:	e9 f1 f3 ff ff       	jmp    80106736 <alltraps>

80107345 <vector152>:
.globl vector152
vector152:
  pushl $0
80107345:	6a 00                	push   $0x0
  pushl $152
80107347:	68 98 00 00 00       	push   $0x98
  jmp alltraps
8010734c:	e9 e5 f3 ff ff       	jmp    80106736 <alltraps>

80107351 <vector153>:
.globl vector153
vector153:
  pushl $0
80107351:	6a 00                	push   $0x0
  pushl $153
80107353:	68 99 00 00 00       	push   $0x99
  jmp alltraps
80107358:	e9 d9 f3 ff ff       	jmp    80106736 <alltraps>

8010735d <vector154>:
.globl vector154
vector154:
  pushl $0
8010735d:	6a 00                	push   $0x0
  pushl $154
8010735f:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
80107364:	e9 cd f3 ff ff       	jmp    80106736 <alltraps>

80107369 <vector155>:
.globl vector155
vector155:
  pushl $0
80107369:	6a 00                	push   $0x0
  pushl $155
8010736b:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
80107370:	e9 c1 f3 ff ff       	jmp    80106736 <alltraps>

80107375 <vector156>:
.globl vector156
vector156:
  pushl $0
80107375:	6a 00                	push   $0x0
  pushl $156
80107377:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
8010737c:	e9 b5 f3 ff ff       	jmp    80106736 <alltraps>

80107381 <vector157>:
.globl vector157
vector157:
  pushl $0
80107381:	6a 00                	push   $0x0
  pushl $157
80107383:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
80107388:	e9 a9 f3 ff ff       	jmp    80106736 <alltraps>

8010738d <vector158>:
.globl vector158
vector158:
  pushl $0
8010738d:	6a 00                	push   $0x0
  pushl $158
8010738f:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
80107394:	e9 9d f3 ff ff       	jmp    80106736 <alltraps>

80107399 <vector159>:
.globl vector159
vector159:
  pushl $0
80107399:	6a 00                	push   $0x0
  pushl $159
8010739b:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
801073a0:	e9 91 f3 ff ff       	jmp    80106736 <alltraps>

801073a5 <vector160>:
.globl vector160
vector160:
  pushl $0
801073a5:	6a 00                	push   $0x0
  pushl $160
801073a7:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
801073ac:	e9 85 f3 ff ff       	jmp    80106736 <alltraps>

801073b1 <vector161>:
.globl vector161
vector161:
  pushl $0
801073b1:	6a 00                	push   $0x0
  pushl $161
801073b3:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
801073b8:	e9 79 f3 ff ff       	jmp    80106736 <alltraps>

801073bd <vector162>:
.globl vector162
vector162:
  pushl $0
801073bd:	6a 00                	push   $0x0
  pushl $162
801073bf:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
801073c4:	e9 6d f3 ff ff       	jmp    80106736 <alltraps>

801073c9 <vector163>:
.globl vector163
vector163:
  pushl $0
801073c9:	6a 00                	push   $0x0
  pushl $163
801073cb:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
801073d0:	e9 61 f3 ff ff       	jmp    80106736 <alltraps>

801073d5 <vector164>:
.globl vector164
vector164:
  pushl $0
801073d5:	6a 00                	push   $0x0
  pushl $164
801073d7:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
801073dc:	e9 55 f3 ff ff       	jmp    80106736 <alltraps>

801073e1 <vector165>:
.globl vector165
vector165:
  pushl $0
801073e1:	6a 00                	push   $0x0
  pushl $165
801073e3:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
801073e8:	e9 49 f3 ff ff       	jmp    80106736 <alltraps>

801073ed <vector166>:
.globl vector166
vector166:
  pushl $0
801073ed:	6a 00                	push   $0x0
  pushl $166
801073ef:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
801073f4:	e9 3d f3 ff ff       	jmp    80106736 <alltraps>

801073f9 <vector167>:
.globl vector167
vector167:
  pushl $0
801073f9:	6a 00                	push   $0x0
  pushl $167
801073fb:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
80107400:	e9 31 f3 ff ff       	jmp    80106736 <alltraps>

80107405 <vector168>:
.globl vector168
vector168:
  pushl $0
80107405:	6a 00                	push   $0x0
  pushl $168
80107407:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
8010740c:	e9 25 f3 ff ff       	jmp    80106736 <alltraps>

80107411 <vector169>:
.globl vector169
vector169:
  pushl $0
80107411:	6a 00                	push   $0x0
  pushl $169
80107413:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
80107418:	e9 19 f3 ff ff       	jmp    80106736 <alltraps>

8010741d <vector170>:
.globl vector170
vector170:
  pushl $0
8010741d:	6a 00                	push   $0x0
  pushl $170
8010741f:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
80107424:	e9 0d f3 ff ff       	jmp    80106736 <alltraps>

80107429 <vector171>:
.globl vector171
vector171:
  pushl $0
80107429:	6a 00                	push   $0x0
  pushl $171
8010742b:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
80107430:	e9 01 f3 ff ff       	jmp    80106736 <alltraps>

80107435 <vector172>:
.globl vector172
vector172:
  pushl $0
80107435:	6a 00                	push   $0x0
  pushl $172
80107437:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
8010743c:	e9 f5 f2 ff ff       	jmp    80106736 <alltraps>

80107441 <vector173>:
.globl vector173
vector173:
  pushl $0
80107441:	6a 00                	push   $0x0
  pushl $173
80107443:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
80107448:	e9 e9 f2 ff ff       	jmp    80106736 <alltraps>

8010744d <vector174>:
.globl vector174
vector174:
  pushl $0
8010744d:	6a 00                	push   $0x0
  pushl $174
8010744f:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
80107454:	e9 dd f2 ff ff       	jmp    80106736 <alltraps>

80107459 <vector175>:
.globl vector175
vector175:
  pushl $0
80107459:	6a 00                	push   $0x0
  pushl $175
8010745b:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
80107460:	e9 d1 f2 ff ff       	jmp    80106736 <alltraps>

80107465 <vector176>:
.globl vector176
vector176:
  pushl $0
80107465:	6a 00                	push   $0x0
  pushl $176
80107467:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
8010746c:	e9 c5 f2 ff ff       	jmp    80106736 <alltraps>

80107471 <vector177>:
.globl vector177
vector177:
  pushl $0
80107471:	6a 00                	push   $0x0
  pushl $177
80107473:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
80107478:	e9 b9 f2 ff ff       	jmp    80106736 <alltraps>

8010747d <vector178>:
.globl vector178
vector178:
  pushl $0
8010747d:	6a 00                	push   $0x0
  pushl $178
8010747f:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
80107484:	e9 ad f2 ff ff       	jmp    80106736 <alltraps>

80107489 <vector179>:
.globl vector179
vector179:
  pushl $0
80107489:	6a 00                	push   $0x0
  pushl $179
8010748b:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
80107490:	e9 a1 f2 ff ff       	jmp    80106736 <alltraps>

80107495 <vector180>:
.globl vector180
vector180:
  pushl $0
80107495:	6a 00                	push   $0x0
  pushl $180
80107497:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
8010749c:	e9 95 f2 ff ff       	jmp    80106736 <alltraps>

801074a1 <vector181>:
.globl vector181
vector181:
  pushl $0
801074a1:	6a 00                	push   $0x0
  pushl $181
801074a3:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
801074a8:	e9 89 f2 ff ff       	jmp    80106736 <alltraps>

801074ad <vector182>:
.globl vector182
vector182:
  pushl $0
801074ad:	6a 00                	push   $0x0
  pushl $182
801074af:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
801074b4:	e9 7d f2 ff ff       	jmp    80106736 <alltraps>

801074b9 <vector183>:
.globl vector183
vector183:
  pushl $0
801074b9:	6a 00                	push   $0x0
  pushl $183
801074bb:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
801074c0:	e9 71 f2 ff ff       	jmp    80106736 <alltraps>

801074c5 <vector184>:
.globl vector184
vector184:
  pushl $0
801074c5:	6a 00                	push   $0x0
  pushl $184
801074c7:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
801074cc:	e9 65 f2 ff ff       	jmp    80106736 <alltraps>

801074d1 <vector185>:
.globl vector185
vector185:
  pushl $0
801074d1:	6a 00                	push   $0x0
  pushl $185
801074d3:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
801074d8:	e9 59 f2 ff ff       	jmp    80106736 <alltraps>

801074dd <vector186>:
.globl vector186
vector186:
  pushl $0
801074dd:	6a 00                	push   $0x0
  pushl $186
801074df:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
801074e4:	e9 4d f2 ff ff       	jmp    80106736 <alltraps>

801074e9 <vector187>:
.globl vector187
vector187:
  pushl $0
801074e9:	6a 00                	push   $0x0
  pushl $187
801074eb:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
801074f0:	e9 41 f2 ff ff       	jmp    80106736 <alltraps>

801074f5 <vector188>:
.globl vector188
vector188:
  pushl $0
801074f5:	6a 00                	push   $0x0
  pushl $188
801074f7:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
801074fc:	e9 35 f2 ff ff       	jmp    80106736 <alltraps>

80107501 <vector189>:
.globl vector189
vector189:
  pushl $0
80107501:	6a 00                	push   $0x0
  pushl $189
80107503:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
80107508:	e9 29 f2 ff ff       	jmp    80106736 <alltraps>

8010750d <vector190>:
.globl vector190
vector190:
  pushl $0
8010750d:	6a 00                	push   $0x0
  pushl $190
8010750f:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
80107514:	e9 1d f2 ff ff       	jmp    80106736 <alltraps>

80107519 <vector191>:
.globl vector191
vector191:
  pushl $0
80107519:	6a 00                	push   $0x0
  pushl $191
8010751b:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
80107520:	e9 11 f2 ff ff       	jmp    80106736 <alltraps>

80107525 <vector192>:
.globl vector192
vector192:
  pushl $0
80107525:	6a 00                	push   $0x0
  pushl $192
80107527:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
8010752c:	e9 05 f2 ff ff       	jmp    80106736 <alltraps>

80107531 <vector193>:
.globl vector193
vector193:
  pushl $0
80107531:	6a 00                	push   $0x0
  pushl $193
80107533:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
80107538:	e9 f9 f1 ff ff       	jmp    80106736 <alltraps>

8010753d <vector194>:
.globl vector194
vector194:
  pushl $0
8010753d:	6a 00                	push   $0x0
  pushl $194
8010753f:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
80107544:	e9 ed f1 ff ff       	jmp    80106736 <alltraps>

80107549 <vector195>:
.globl vector195
vector195:
  pushl $0
80107549:	6a 00                	push   $0x0
  pushl $195
8010754b:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
80107550:	e9 e1 f1 ff ff       	jmp    80106736 <alltraps>

80107555 <vector196>:
.globl vector196
vector196:
  pushl $0
80107555:	6a 00                	push   $0x0
  pushl $196
80107557:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
8010755c:	e9 d5 f1 ff ff       	jmp    80106736 <alltraps>

80107561 <vector197>:
.globl vector197
vector197:
  pushl $0
80107561:	6a 00                	push   $0x0
  pushl $197
80107563:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
80107568:	e9 c9 f1 ff ff       	jmp    80106736 <alltraps>

8010756d <vector198>:
.globl vector198
vector198:
  pushl $0
8010756d:	6a 00                	push   $0x0
  pushl $198
8010756f:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
80107574:	e9 bd f1 ff ff       	jmp    80106736 <alltraps>

80107579 <vector199>:
.globl vector199
vector199:
  pushl $0
80107579:	6a 00                	push   $0x0
  pushl $199
8010757b:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
80107580:	e9 b1 f1 ff ff       	jmp    80106736 <alltraps>

80107585 <vector200>:
.globl vector200
vector200:
  pushl $0
80107585:	6a 00                	push   $0x0
  pushl $200
80107587:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
8010758c:	e9 a5 f1 ff ff       	jmp    80106736 <alltraps>

80107591 <vector201>:
.globl vector201
vector201:
  pushl $0
80107591:	6a 00                	push   $0x0
  pushl $201
80107593:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
80107598:	e9 99 f1 ff ff       	jmp    80106736 <alltraps>

8010759d <vector202>:
.globl vector202
vector202:
  pushl $0
8010759d:	6a 00                	push   $0x0
  pushl $202
8010759f:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
801075a4:	e9 8d f1 ff ff       	jmp    80106736 <alltraps>

801075a9 <vector203>:
.globl vector203
vector203:
  pushl $0
801075a9:	6a 00                	push   $0x0
  pushl $203
801075ab:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
801075b0:	e9 81 f1 ff ff       	jmp    80106736 <alltraps>

801075b5 <vector204>:
.globl vector204
vector204:
  pushl $0
801075b5:	6a 00                	push   $0x0
  pushl $204
801075b7:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
801075bc:	e9 75 f1 ff ff       	jmp    80106736 <alltraps>

801075c1 <vector205>:
.globl vector205
vector205:
  pushl $0
801075c1:	6a 00                	push   $0x0
  pushl $205
801075c3:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
801075c8:	e9 69 f1 ff ff       	jmp    80106736 <alltraps>

801075cd <vector206>:
.globl vector206
vector206:
  pushl $0
801075cd:	6a 00                	push   $0x0
  pushl $206
801075cf:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
801075d4:	e9 5d f1 ff ff       	jmp    80106736 <alltraps>

801075d9 <vector207>:
.globl vector207
vector207:
  pushl $0
801075d9:	6a 00                	push   $0x0
  pushl $207
801075db:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
801075e0:	e9 51 f1 ff ff       	jmp    80106736 <alltraps>

801075e5 <vector208>:
.globl vector208
vector208:
  pushl $0
801075e5:	6a 00                	push   $0x0
  pushl $208
801075e7:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
801075ec:	e9 45 f1 ff ff       	jmp    80106736 <alltraps>

801075f1 <vector209>:
.globl vector209
vector209:
  pushl $0
801075f1:	6a 00                	push   $0x0
  pushl $209
801075f3:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
801075f8:	e9 39 f1 ff ff       	jmp    80106736 <alltraps>

801075fd <vector210>:
.globl vector210
vector210:
  pushl $0
801075fd:	6a 00                	push   $0x0
  pushl $210
801075ff:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
80107604:	e9 2d f1 ff ff       	jmp    80106736 <alltraps>

80107609 <vector211>:
.globl vector211
vector211:
  pushl $0
80107609:	6a 00                	push   $0x0
  pushl $211
8010760b:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
80107610:	e9 21 f1 ff ff       	jmp    80106736 <alltraps>

80107615 <vector212>:
.globl vector212
vector212:
  pushl $0
80107615:	6a 00                	push   $0x0
  pushl $212
80107617:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
8010761c:	e9 15 f1 ff ff       	jmp    80106736 <alltraps>

80107621 <vector213>:
.globl vector213
vector213:
  pushl $0
80107621:	6a 00                	push   $0x0
  pushl $213
80107623:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
80107628:	e9 09 f1 ff ff       	jmp    80106736 <alltraps>

8010762d <vector214>:
.globl vector214
vector214:
  pushl $0
8010762d:	6a 00                	push   $0x0
  pushl $214
8010762f:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
80107634:	e9 fd f0 ff ff       	jmp    80106736 <alltraps>

80107639 <vector215>:
.globl vector215
vector215:
  pushl $0
80107639:	6a 00                	push   $0x0
  pushl $215
8010763b:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
80107640:	e9 f1 f0 ff ff       	jmp    80106736 <alltraps>

80107645 <vector216>:
.globl vector216
vector216:
  pushl $0
80107645:	6a 00                	push   $0x0
  pushl $216
80107647:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
8010764c:	e9 e5 f0 ff ff       	jmp    80106736 <alltraps>

80107651 <vector217>:
.globl vector217
vector217:
  pushl $0
80107651:	6a 00                	push   $0x0
  pushl $217
80107653:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
80107658:	e9 d9 f0 ff ff       	jmp    80106736 <alltraps>

8010765d <vector218>:
.globl vector218
vector218:
  pushl $0
8010765d:	6a 00                	push   $0x0
  pushl $218
8010765f:	68 da 00 00 00       	push   $0xda
  jmp alltraps
80107664:	e9 cd f0 ff ff       	jmp    80106736 <alltraps>

80107669 <vector219>:
.globl vector219
vector219:
  pushl $0
80107669:	6a 00                	push   $0x0
  pushl $219
8010766b:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
80107670:	e9 c1 f0 ff ff       	jmp    80106736 <alltraps>

80107675 <vector220>:
.globl vector220
vector220:
  pushl $0
80107675:	6a 00                	push   $0x0
  pushl $220
80107677:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
8010767c:	e9 b5 f0 ff ff       	jmp    80106736 <alltraps>

80107681 <vector221>:
.globl vector221
vector221:
  pushl $0
80107681:	6a 00                	push   $0x0
  pushl $221
80107683:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
80107688:	e9 a9 f0 ff ff       	jmp    80106736 <alltraps>

8010768d <vector222>:
.globl vector222
vector222:
  pushl $0
8010768d:	6a 00                	push   $0x0
  pushl $222
8010768f:	68 de 00 00 00       	push   $0xde
  jmp alltraps
80107694:	e9 9d f0 ff ff       	jmp    80106736 <alltraps>

80107699 <vector223>:
.globl vector223
vector223:
  pushl $0
80107699:	6a 00                	push   $0x0
  pushl $223
8010769b:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
801076a0:	e9 91 f0 ff ff       	jmp    80106736 <alltraps>

801076a5 <vector224>:
.globl vector224
vector224:
  pushl $0
801076a5:	6a 00                	push   $0x0
  pushl $224
801076a7:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
801076ac:	e9 85 f0 ff ff       	jmp    80106736 <alltraps>

801076b1 <vector225>:
.globl vector225
vector225:
  pushl $0
801076b1:	6a 00                	push   $0x0
  pushl $225
801076b3:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
801076b8:	e9 79 f0 ff ff       	jmp    80106736 <alltraps>

801076bd <vector226>:
.globl vector226
vector226:
  pushl $0
801076bd:	6a 00                	push   $0x0
  pushl $226
801076bf:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
801076c4:	e9 6d f0 ff ff       	jmp    80106736 <alltraps>

801076c9 <vector227>:
.globl vector227
vector227:
  pushl $0
801076c9:	6a 00                	push   $0x0
  pushl $227
801076cb:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
801076d0:	e9 61 f0 ff ff       	jmp    80106736 <alltraps>

801076d5 <vector228>:
.globl vector228
vector228:
  pushl $0
801076d5:	6a 00                	push   $0x0
  pushl $228
801076d7:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
801076dc:	e9 55 f0 ff ff       	jmp    80106736 <alltraps>

801076e1 <vector229>:
.globl vector229
vector229:
  pushl $0
801076e1:	6a 00                	push   $0x0
  pushl $229
801076e3:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
801076e8:	e9 49 f0 ff ff       	jmp    80106736 <alltraps>

801076ed <vector230>:
.globl vector230
vector230:
  pushl $0
801076ed:	6a 00                	push   $0x0
  pushl $230
801076ef:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
801076f4:	e9 3d f0 ff ff       	jmp    80106736 <alltraps>

801076f9 <vector231>:
.globl vector231
vector231:
  pushl $0
801076f9:	6a 00                	push   $0x0
  pushl $231
801076fb:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
80107700:	e9 31 f0 ff ff       	jmp    80106736 <alltraps>

80107705 <vector232>:
.globl vector232
vector232:
  pushl $0
80107705:	6a 00                	push   $0x0
  pushl $232
80107707:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
8010770c:	e9 25 f0 ff ff       	jmp    80106736 <alltraps>

80107711 <vector233>:
.globl vector233
vector233:
  pushl $0
80107711:	6a 00                	push   $0x0
  pushl $233
80107713:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
80107718:	e9 19 f0 ff ff       	jmp    80106736 <alltraps>

8010771d <vector234>:
.globl vector234
vector234:
  pushl $0
8010771d:	6a 00                	push   $0x0
  pushl $234
8010771f:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
80107724:	e9 0d f0 ff ff       	jmp    80106736 <alltraps>

80107729 <vector235>:
.globl vector235
vector235:
  pushl $0
80107729:	6a 00                	push   $0x0
  pushl $235
8010772b:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
80107730:	e9 01 f0 ff ff       	jmp    80106736 <alltraps>

80107735 <vector236>:
.globl vector236
vector236:
  pushl $0
80107735:	6a 00                	push   $0x0
  pushl $236
80107737:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
8010773c:	e9 f5 ef ff ff       	jmp    80106736 <alltraps>

80107741 <vector237>:
.globl vector237
vector237:
  pushl $0
80107741:	6a 00                	push   $0x0
  pushl $237
80107743:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
80107748:	e9 e9 ef ff ff       	jmp    80106736 <alltraps>

8010774d <vector238>:
.globl vector238
vector238:
  pushl $0
8010774d:	6a 00                	push   $0x0
  pushl $238
8010774f:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
80107754:	e9 dd ef ff ff       	jmp    80106736 <alltraps>

80107759 <vector239>:
.globl vector239
vector239:
  pushl $0
80107759:	6a 00                	push   $0x0
  pushl $239
8010775b:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
80107760:	e9 d1 ef ff ff       	jmp    80106736 <alltraps>

80107765 <vector240>:
.globl vector240
vector240:
  pushl $0
80107765:	6a 00                	push   $0x0
  pushl $240
80107767:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
8010776c:	e9 c5 ef ff ff       	jmp    80106736 <alltraps>

80107771 <vector241>:
.globl vector241
vector241:
  pushl $0
80107771:	6a 00                	push   $0x0
  pushl $241
80107773:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
80107778:	e9 b9 ef ff ff       	jmp    80106736 <alltraps>

8010777d <vector242>:
.globl vector242
vector242:
  pushl $0
8010777d:	6a 00                	push   $0x0
  pushl $242
8010777f:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
80107784:	e9 ad ef ff ff       	jmp    80106736 <alltraps>

80107789 <vector243>:
.globl vector243
vector243:
  pushl $0
80107789:	6a 00                	push   $0x0
  pushl $243
8010778b:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
80107790:	e9 a1 ef ff ff       	jmp    80106736 <alltraps>

80107795 <vector244>:
.globl vector244
vector244:
  pushl $0
80107795:	6a 00                	push   $0x0
  pushl $244
80107797:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
8010779c:	e9 95 ef ff ff       	jmp    80106736 <alltraps>

801077a1 <vector245>:
.globl vector245
vector245:
  pushl $0
801077a1:	6a 00                	push   $0x0
  pushl $245
801077a3:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
801077a8:	e9 89 ef ff ff       	jmp    80106736 <alltraps>

801077ad <vector246>:
.globl vector246
vector246:
  pushl $0
801077ad:	6a 00                	push   $0x0
  pushl $246
801077af:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
801077b4:	e9 7d ef ff ff       	jmp    80106736 <alltraps>

801077b9 <vector247>:
.globl vector247
vector247:
  pushl $0
801077b9:	6a 00                	push   $0x0
  pushl $247
801077bb:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
801077c0:	e9 71 ef ff ff       	jmp    80106736 <alltraps>

801077c5 <vector248>:
.globl vector248
vector248:
  pushl $0
801077c5:	6a 00                	push   $0x0
  pushl $248
801077c7:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
801077cc:	e9 65 ef ff ff       	jmp    80106736 <alltraps>

801077d1 <vector249>:
.globl vector249
vector249:
  pushl $0
801077d1:	6a 00                	push   $0x0
  pushl $249
801077d3:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
801077d8:	e9 59 ef ff ff       	jmp    80106736 <alltraps>

801077dd <vector250>:
.globl vector250
vector250:
  pushl $0
801077dd:	6a 00                	push   $0x0
  pushl $250
801077df:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
801077e4:	e9 4d ef ff ff       	jmp    80106736 <alltraps>

801077e9 <vector251>:
.globl vector251
vector251:
  pushl $0
801077e9:	6a 00                	push   $0x0
  pushl $251
801077eb:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
801077f0:	e9 41 ef ff ff       	jmp    80106736 <alltraps>

801077f5 <vector252>:
.globl vector252
vector252:
  pushl $0
801077f5:	6a 00                	push   $0x0
  pushl $252
801077f7:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
801077fc:	e9 35 ef ff ff       	jmp    80106736 <alltraps>

80107801 <vector253>:
.globl vector253
vector253:
  pushl $0
80107801:	6a 00                	push   $0x0
  pushl $253
80107803:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
80107808:	e9 29 ef ff ff       	jmp    80106736 <alltraps>

8010780d <vector254>:
.globl vector254
vector254:
  pushl $0
8010780d:	6a 00                	push   $0x0
  pushl $254
8010780f:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
80107814:	e9 1d ef ff ff       	jmp    80106736 <alltraps>

80107819 <vector255>:
.globl vector255
vector255:
  pushl $0
80107819:	6a 00                	push   $0x0
  pushl $255
8010781b:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80107820:	e9 11 ef ff ff       	jmp    80106736 <alltraps>

80107825 <lgdt>:

struct segdesc;

static inline void
lgdt(struct segdesc *p, int size)
{
80107825:	55                   	push   %ebp
80107826:	89 e5                	mov    %esp,%ebp
80107828:	83 ec 10             	sub    $0x10,%esp
  volatile ushort pd[3];

  pd[0] = size-1;
8010782b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010782e:	83 e8 01             	sub    $0x1,%eax
80107831:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  pd[1] = (uint)p;
80107835:	8b 45 08             	mov    0x8(%ebp),%eax
80107838:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
8010783c:	8b 45 08             	mov    0x8(%ebp),%eax
8010783f:	c1 e8 10             	shr    $0x10,%eax
80107842:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

  asm volatile("lgdt (%0)" : : "r" (pd));
80107846:	8d 45 fa             	lea    -0x6(%ebp),%eax
80107849:	0f 01 10             	lgdtl  (%eax)
}
8010784c:	90                   	nop
8010784d:	c9                   	leave  
8010784e:	c3                   	ret    

8010784f <ltr>:
  asm volatile("lidt (%0)" : : "r" (pd));
}

static inline void
ltr(ushort sel)
{
8010784f:	55                   	push   %ebp
80107850:	89 e5                	mov    %esp,%ebp
80107852:	83 ec 04             	sub    $0x4,%esp
80107855:	8b 45 08             	mov    0x8(%ebp),%eax
80107858:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  asm volatile("ltr %0" : : "r" (sel));
8010785c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
80107860:	0f 00 d8             	ltr    %ax
}
80107863:	90                   	nop
80107864:	c9                   	leave  
80107865:	c3                   	ret    

80107866 <loadgs>:
  return eflags;
}

static inline void
loadgs(ushort v)
{
80107866:	55                   	push   %ebp
80107867:	89 e5                	mov    %esp,%ebp
80107869:	83 ec 04             	sub    $0x4,%esp
8010786c:	8b 45 08             	mov    0x8(%ebp),%eax
8010786f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  asm volatile("movw %0, %%gs" : : "r" (v));
80107873:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
80107877:	8e e8                	mov    %eax,%gs
}
80107879:	90                   	nop
8010787a:	c9                   	leave  
8010787b:	c3                   	ret    

8010787c <lcr3>:
  return val;
}

static inline void
lcr3(uint val) 
{
8010787c:	55                   	push   %ebp
8010787d:	89 e5                	mov    %esp,%ebp
  asm volatile("movl %0,%%cr3" : : "r" (val));
8010787f:	8b 45 08             	mov    0x8(%ebp),%eax
80107882:	0f 22 d8             	mov    %eax,%cr3
}
80107885:	90                   	nop
80107886:	5d                   	pop    %ebp
80107887:	c3                   	ret    

80107888 <v2p>:
#define KERNBASE 0x80000000         // First kernel virtual address
#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked

#ifndef __ASSEMBLER__

static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }
80107888:	55                   	push   %ebp
80107889:	89 e5                	mov    %esp,%ebp
8010788b:	8b 45 08             	mov    0x8(%ebp),%eax
8010788e:	05 00 00 00 80       	add    $0x80000000,%eax
80107893:	5d                   	pop    %ebp
80107894:	c3                   	ret    

80107895 <p2v>:
static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
80107895:	55                   	push   %ebp
80107896:	89 e5                	mov    %esp,%ebp
80107898:	8b 45 08             	mov    0x8(%ebp),%eax
8010789b:	05 00 00 00 80       	add    $0x80000000,%eax
801078a0:	5d                   	pop    %ebp
801078a1:	c3                   	ret    

801078a2 <seginit>:

// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seginit(void)
{
801078a2:	55                   	push   %ebp
801078a3:	89 e5                	mov    %esp,%ebp
801078a5:	53                   	push   %ebx
801078a6:	83 ec 14             	sub    $0x14,%esp

  // Map "logical" addresses to virtual addresses using identity map.
  // Cannot share a CODE descriptor for both kernel and user
  // because it would have to have DPL_USR, but the CPU forbids
  // an interrupt from CPL=0 to DPL=3.
  c = &cpus[cpunum()];
801078a9:	e8 28 b8 ff ff       	call   801030d6 <cpunum>
801078ae:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
801078b4:	05 60 a4 11 80       	add    $0x8011a460,%eax
801078b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
801078bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078bf:	66 c7 40 78 ff ff    	movw   $0xffff,0x78(%eax)
801078c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078c8:	66 c7 40 7a 00 00    	movw   $0x0,0x7a(%eax)
801078ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078d1:	c6 40 7c 00          	movb   $0x0,0x7c(%eax)
801078d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078d8:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
801078dc:	83 e2 f0             	and    $0xfffffff0,%edx
801078df:	83 ca 0a             	or     $0xa,%edx
801078e2:	88 50 7d             	mov    %dl,0x7d(%eax)
801078e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078e8:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
801078ec:	83 ca 10             	or     $0x10,%edx
801078ef:	88 50 7d             	mov    %dl,0x7d(%eax)
801078f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078f5:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
801078f9:	83 e2 9f             	and    $0xffffff9f,%edx
801078fc:	88 50 7d             	mov    %dl,0x7d(%eax)
801078ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107902:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
80107906:	83 ca 80             	or     $0xffffff80,%edx
80107909:	88 50 7d             	mov    %dl,0x7d(%eax)
8010790c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010790f:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
80107913:	83 ca 0f             	or     $0xf,%edx
80107916:	88 50 7e             	mov    %dl,0x7e(%eax)
80107919:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010791c:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
80107920:	83 e2 ef             	and    $0xffffffef,%edx
80107923:	88 50 7e             	mov    %dl,0x7e(%eax)
80107926:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107929:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
8010792d:	83 e2 df             	and    $0xffffffdf,%edx
80107930:	88 50 7e             	mov    %dl,0x7e(%eax)
80107933:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107936:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
8010793a:	83 ca 40             	or     $0x40,%edx
8010793d:	88 50 7e             	mov    %dl,0x7e(%eax)
80107940:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107943:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
80107947:	83 ca 80             	or     $0xffffff80,%edx
8010794a:	88 50 7e             	mov    %dl,0x7e(%eax)
8010794d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107950:	c6 40 7f 00          	movb   $0x0,0x7f(%eax)
  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
80107954:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107957:	66 c7 80 80 00 00 00 	movw   $0xffff,0x80(%eax)
8010795e:	ff ff 
80107960:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107963:	66 c7 80 82 00 00 00 	movw   $0x0,0x82(%eax)
8010796a:	00 00 
8010796c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010796f:	c6 80 84 00 00 00 00 	movb   $0x0,0x84(%eax)
80107976:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107979:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
80107980:	83 e2 f0             	and    $0xfffffff0,%edx
80107983:	83 ca 02             	or     $0x2,%edx
80107986:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
8010798c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010798f:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
80107996:	83 ca 10             	or     $0x10,%edx
80107999:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
8010799f:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079a2:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
801079a9:	83 e2 9f             	and    $0xffffff9f,%edx
801079ac:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
801079b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079b5:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
801079bc:	83 ca 80             	or     $0xffffff80,%edx
801079bf:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
801079c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079c8:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
801079cf:	83 ca 0f             	or     $0xf,%edx
801079d2:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801079d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079db:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
801079e2:	83 e2 ef             	and    $0xffffffef,%edx
801079e5:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801079eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079ee:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
801079f5:	83 e2 df             	and    $0xffffffdf,%edx
801079f8:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801079fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a01:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
80107a08:	83 ca 40             	or     $0x40,%edx
80107a0b:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
80107a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a14:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
80107a1b:	83 ca 80             	or     $0xffffff80,%edx
80107a1e:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
80107a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a27:	c6 80 87 00 00 00 00 	movb   $0x0,0x87(%eax)
  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
80107a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a31:	66 c7 80 90 00 00 00 	movw   $0xffff,0x90(%eax)
80107a38:	ff ff 
80107a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a3d:	66 c7 80 92 00 00 00 	movw   $0x0,0x92(%eax)
80107a44:	00 00 
80107a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a49:	c6 80 94 00 00 00 00 	movb   $0x0,0x94(%eax)
80107a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a53:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
80107a5a:	83 e2 f0             	and    $0xfffffff0,%edx
80107a5d:	83 ca 0a             	or     $0xa,%edx
80107a60:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80107a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a69:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
80107a70:	83 ca 10             	or     $0x10,%edx
80107a73:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80107a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a7c:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
80107a83:	83 ca 60             	or     $0x60,%edx
80107a86:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80107a8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a8f:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
80107a96:	83 ca 80             	or     $0xffffff80,%edx
80107a99:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80107a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107aa2:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
80107aa9:	83 ca 0f             	or     $0xf,%edx
80107aac:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80107ab2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ab5:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
80107abc:	83 e2 ef             	and    $0xffffffef,%edx
80107abf:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80107ac5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ac8:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
80107acf:	83 e2 df             	and    $0xffffffdf,%edx
80107ad2:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107adb:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
80107ae2:	83 ca 40             	or     $0x40,%edx
80107ae5:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80107aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107aee:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
80107af5:	83 ca 80             	or     $0xffffff80,%edx
80107af8:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80107afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b01:	c6 80 97 00 00 00 00 	movb   $0x0,0x97(%eax)
  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
80107b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b0b:	66 c7 80 98 00 00 00 	movw   $0xffff,0x98(%eax)
80107b12:	ff ff 
80107b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b17:	66 c7 80 9a 00 00 00 	movw   $0x0,0x9a(%eax)
80107b1e:	00 00 
80107b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b23:	c6 80 9c 00 00 00 00 	movb   $0x0,0x9c(%eax)
80107b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b2d:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
80107b34:	83 e2 f0             	and    $0xfffffff0,%edx
80107b37:	83 ca 02             	or     $0x2,%edx
80107b3a:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b43:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
80107b4a:	83 ca 10             	or     $0x10,%edx
80107b4d:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b56:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
80107b5d:	83 ca 60             	or     $0x60,%edx
80107b60:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b69:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
80107b70:	83 ca 80             	or     $0xffffff80,%edx
80107b73:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b7c:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
80107b83:	83 ca 0f             	or     $0xf,%edx
80107b86:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b8f:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
80107b96:	83 e2 ef             	and    $0xffffffef,%edx
80107b99:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ba2:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
80107ba9:	83 e2 df             	and    $0xffffffdf,%edx
80107bac:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107bb5:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
80107bbc:	83 ca 40             	or     $0x40,%edx
80107bbf:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107bc8:	0f b6 90 9e 00 00 00 	movzbl 0x9e(%eax),%edx
80107bcf:	83 ca 80             	or     $0xffffff80,%edx
80107bd2:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107bdb:	c6 80 9f 00 00 00 00 	movb   $0x0,0x9f(%eax)

  // Map cpu, and curproc
  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
80107be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107be5:	05 b4 00 00 00       	add    $0xb4,%eax
80107bea:	89 c3                	mov    %eax,%ebx
80107bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107bef:	05 b4 00 00 00       	add    $0xb4,%eax
80107bf4:	c1 e8 10             	shr    $0x10,%eax
80107bf7:	89 c2                	mov    %eax,%edx
80107bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107bfc:	05 b4 00 00 00       	add    $0xb4,%eax
80107c01:	c1 e8 18             	shr    $0x18,%eax
80107c04:	89 c1                	mov    %eax,%ecx
80107c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c09:	66 c7 80 88 00 00 00 	movw   $0x0,0x88(%eax)
80107c10:	00 00 
80107c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c15:	66 89 98 8a 00 00 00 	mov    %bx,0x8a(%eax)
80107c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c1f:	88 90 8c 00 00 00    	mov    %dl,0x8c(%eax)
80107c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c28:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
80107c2f:	83 e2 f0             	and    $0xfffffff0,%edx
80107c32:	83 ca 02             	or     $0x2,%edx
80107c35:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c3e:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
80107c45:	83 ca 10             	or     $0x10,%edx
80107c48:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c51:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
80107c58:	83 e2 9f             	and    $0xffffff9f,%edx
80107c5b:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c64:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
80107c6b:	83 ca 80             	or     $0xffffff80,%edx
80107c6e:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c77:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
80107c7e:	83 e2 f0             	and    $0xfffffff0,%edx
80107c81:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c8a:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
80107c91:	83 e2 ef             	and    $0xffffffef,%edx
80107c94:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c9d:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
80107ca4:	83 e2 df             	and    $0xffffffdf,%edx
80107ca7:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107cad:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107cb0:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
80107cb7:	83 ca 40             	or     $0x40,%edx
80107cba:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107cc3:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
80107cca:	83 ca 80             	or     $0xffffff80,%edx
80107ccd:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107cd6:	88 88 8f 00 00 00    	mov    %cl,0x8f(%eax)

  lgdt(c->gdt, sizeof(c->gdt));
80107cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107cdf:	83 c0 70             	add    $0x70,%eax
80107ce2:	83 ec 08             	sub    $0x8,%esp
80107ce5:	6a 38                	push   $0x38
80107ce7:	50                   	push   %eax
80107ce8:	e8 38 fb ff ff       	call   80107825 <lgdt>
80107ced:	83 c4 10             	add    $0x10,%esp
  loadgs(SEG_KCPU << 3);
80107cf0:	83 ec 0c             	sub    $0xc,%esp
80107cf3:	6a 18                	push   $0x18
80107cf5:	e8 6c fb ff ff       	call   80107866 <loadgs>
80107cfa:	83 c4 10             	add    $0x10,%esp
  
  // Initialize cpu-local storage.
  cpu = c;
80107cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107d00:	65 a3 00 00 00 00    	mov    %eax,%gs:0x0
  proc = 0;
80107d06:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
80107d0d:	00 00 00 00 
}
80107d11:	90                   	nop
80107d12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107d15:	c9                   	leave  
80107d16:	c3                   	ret    

80107d17 <walkpgdir>:
// Return the address of the PTE in page table pgdir
// that corresponds to virtual address va.  If alloc!=0,
// create any required page table pages.
static pte_t *
walkpgdir(pde_t *pgdir, const void *va, int alloc)
{
80107d17:	55                   	push   %ebp
80107d18:	89 e5                	mov    %esp,%ebp
80107d1a:	83 ec 18             	sub    $0x18,%esp
  pde_t *pde;
  pte_t *pgtab;

  pde = &pgdir[PDX(va)];
80107d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
80107d20:	c1 e8 16             	shr    $0x16,%eax
80107d23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80107d2a:	8b 45 08             	mov    0x8(%ebp),%eax
80107d2d:	01 d0                	add    %edx,%eax
80107d2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(*pde & PTE_P){
80107d32:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107d35:	8b 00                	mov    (%eax),%eax
80107d37:	83 e0 01             	and    $0x1,%eax
80107d3a:	85 c0                	test   %eax,%eax
80107d3c:	74 18                	je     80107d56 <walkpgdir+0x3f>
    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
80107d3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107d41:	8b 00                	mov    (%eax),%eax
80107d43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107d48:	50                   	push   %eax
80107d49:	e8 47 fb ff ff       	call   80107895 <p2v>
80107d4e:	83 c4 04             	add    $0x4,%esp
80107d51:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107d54:	eb 48                	jmp    80107d9e <walkpgdir+0x87>
  } else {
    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
80107d56:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80107d5a:	74 0e                	je     80107d6a <walkpgdir+0x53>
80107d5c:	e8 96 af ff ff       	call   80102cf7 <kalloc>
80107d61:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107d64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107d68:	75 07                	jne    80107d71 <walkpgdir+0x5a>
      return 0;
80107d6a:	b8 00 00 00 00       	mov    $0x0,%eax
80107d6f:	eb 44                	jmp    80107db5 <walkpgdir+0x9e>
    // Make sure all those PTE_P bits are zero.
    memset(pgtab, 0, PGSIZE);
80107d71:	83 ec 04             	sub    $0x4,%esp
80107d74:	68 00 10 00 00       	push   $0x1000
80107d79:	6a 00                	push   $0x0
80107d7b:	ff 75 f4             	pushl  -0xc(%ebp)
80107d7e:	e8 d0 d5 ff ff       	call   80105353 <memset>
80107d83:	83 c4 10             	add    $0x10,%esp
    // The permissions here are overly generous, but they can
    // be further restricted by the permissions in the page table 
    // entries, if necessary.
    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
80107d86:	83 ec 0c             	sub    $0xc,%esp
80107d89:	ff 75 f4             	pushl  -0xc(%ebp)
80107d8c:	e8 f7 fa ff ff       	call   80107888 <v2p>
80107d91:	83 c4 10             	add    $0x10,%esp
80107d94:	83 c8 07             	or     $0x7,%eax
80107d97:	89 c2                	mov    %eax,%edx
80107d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107d9c:	89 10                	mov    %edx,(%eax)
  }
  return &pgtab[PTX(va)];
80107d9e:	8b 45 0c             	mov    0xc(%ebp),%eax
80107da1:	c1 e8 0c             	shr    $0xc,%eax
80107da4:	25 ff 03 00 00       	and    $0x3ff,%eax
80107da9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80107db0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107db3:	01 d0                	add    %edx,%eax
}
80107db5:	c9                   	leave  
80107db6:	c3                   	ret    

80107db7 <mappages>:
// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned.
static int
mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
{
80107db7:	55                   	push   %ebp
80107db8:	89 e5                	mov    %esp,%ebp
80107dba:	83 ec 18             	sub    $0x18,%esp
  char *a, *last;
  pte_t *pte;
  
  a = (char*)PGROUNDDOWN((uint)va);
80107dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
80107dc0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
80107dc8:	8b 55 0c             	mov    0xc(%ebp),%edx
80107dcb:	8b 45 10             	mov    0x10(%ebp),%eax
80107dce:	01 d0                	add    %edx,%eax
80107dd0:	83 e8 01             	sub    $0x1,%eax
80107dd3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107dd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for(;;){
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
80107ddb:	83 ec 04             	sub    $0x4,%esp
80107dde:	6a 01                	push   $0x1
80107de0:	ff 75 f4             	pushl  -0xc(%ebp)
80107de3:	ff 75 08             	pushl  0x8(%ebp)
80107de6:	e8 2c ff ff ff       	call   80107d17 <walkpgdir>
80107deb:	83 c4 10             	add    $0x10,%esp
80107dee:	89 45 ec             	mov    %eax,-0x14(%ebp)
80107df1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80107df5:	75 07                	jne    80107dfe <mappages+0x47>
      return -1;
80107df7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107dfc:	eb 47                	jmp    80107e45 <mappages+0x8e>
    if(*pte & PTE_P)
80107dfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
80107e01:	8b 00                	mov    (%eax),%eax
80107e03:	83 e0 01             	and    $0x1,%eax
80107e06:	85 c0                	test   %eax,%eax
80107e08:	74 0d                	je     80107e17 <mappages+0x60>
      panic("remap");
80107e0a:	83 ec 0c             	sub    $0xc,%esp
80107e0d:	68 fc c7 10 80       	push   $0x8010c7fc
80107e12:	e8 4f 87 ff ff       	call   80100566 <panic>
    *pte = pa | perm | PTE_P;
80107e17:	8b 45 18             	mov    0x18(%ebp),%eax
80107e1a:	0b 45 14             	or     0x14(%ebp),%eax
80107e1d:	83 c8 01             	or     $0x1,%eax
80107e20:	89 c2                	mov    %eax,%edx
80107e22:	8b 45 ec             	mov    -0x14(%ebp),%eax
80107e25:	89 10                	mov    %edx,(%eax)
    if(a == last)
80107e27:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107e2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80107e2d:	74 10                	je     80107e3f <mappages+0x88>
      break;
    a += PGSIZE;
80107e2f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    pa += PGSIZE;
80107e36:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
  }
80107e3d:	eb 9c                	jmp    80107ddb <mappages+0x24>
      return -1;
    if(*pte & PTE_P)
      panic("remap");
    *pte = pa | perm | PTE_P;
    if(a == last)
      break;
80107e3f:	90                   	nop
    a += PGSIZE;
    pa += PGSIZE;
  }
  return 0;
80107e40:	b8 00 00 00 00       	mov    $0x0,%eax
}
80107e45:	c9                   	leave  
80107e46:	c3                   	ret    

80107e47 <setupkvm>:
};

// Set up kernel part of a page table.
pde_t*
setupkvm(void)
{
80107e47:	55                   	push   %ebp
80107e48:	89 e5                	mov    %esp,%ebp
80107e4a:	53                   	push   %ebx
80107e4b:	83 ec 14             	sub    $0x14,%esp
  pde_t *pgdir;
  struct kmap *k;

  if((pgdir = (pde_t*)kalloc()) == 0)
80107e4e:	e8 a4 ae ff ff       	call   80102cf7 <kalloc>
80107e53:	89 45 f0             	mov    %eax,-0x10(%ebp)
80107e56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80107e5a:	75 0a                	jne    80107e66 <setupkvm+0x1f>
    return 0;
80107e5c:	b8 00 00 00 00       	mov    $0x0,%eax
80107e61:	e9 8e 00 00 00       	jmp    80107ef4 <setupkvm+0xad>
  memset(pgdir, 0, PGSIZE);
80107e66:	83 ec 04             	sub    $0x4,%esp
80107e69:	68 00 10 00 00       	push   $0x1000
80107e6e:	6a 00                	push   $0x0
80107e70:	ff 75 f0             	pushl  -0x10(%ebp)
80107e73:	e8 db d4 ff ff       	call   80105353 <memset>
80107e78:	83 c4 10             	add    $0x10,%esp
  if (p2v(PHYSTOP) > (void*)DEVSPACE)
80107e7b:	83 ec 0c             	sub    $0xc,%esp
80107e7e:	68 00 00 00 0e       	push   $0xe000000
80107e83:	e8 0d fa ff ff       	call   80107895 <p2v>
80107e88:	83 c4 10             	add    $0x10,%esp
80107e8b:	3d 00 00 00 fc       	cmp    $0xfc000000,%eax
80107e90:	76 0d                	jbe    80107e9f <setupkvm+0x58>
    panic("PHYSTOP too high");
80107e92:	83 ec 0c             	sub    $0xc,%esp
80107e95:	68 02 c8 10 80       	push   $0x8010c802
80107e9a:	e8 c7 86 ff ff       	call   80100566 <panic>
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80107e9f:	c7 45 f4 c0 34 11 80 	movl   $0x801134c0,-0xc(%ebp)
80107ea6:	eb 40                	jmp    80107ee8 <setupkvm+0xa1>
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
80107ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107eab:	8b 48 0c             	mov    0xc(%eax),%ecx
                (uint)k->phys_start, k->perm) < 0)
80107eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107eb1:	8b 50 04             	mov    0x4(%eax),%edx
    return 0;
  memset(pgdir, 0, PGSIZE);
  if (p2v(PHYSTOP) > (void*)DEVSPACE)
    panic("PHYSTOP too high");
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
80107eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107eb7:	8b 58 08             	mov    0x8(%eax),%ebx
80107eba:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ebd:	8b 40 04             	mov    0x4(%eax),%eax
80107ec0:	29 c3                	sub    %eax,%ebx
80107ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ec5:	8b 00                	mov    (%eax),%eax
80107ec7:	83 ec 0c             	sub    $0xc,%esp
80107eca:	51                   	push   %ecx
80107ecb:	52                   	push   %edx
80107ecc:	53                   	push   %ebx
80107ecd:	50                   	push   %eax
80107ece:	ff 75 f0             	pushl  -0x10(%ebp)
80107ed1:	e8 e1 fe ff ff       	call   80107db7 <mappages>
80107ed6:	83 c4 20             	add    $0x20,%esp
80107ed9:	85 c0                	test   %eax,%eax
80107edb:	79 07                	jns    80107ee4 <setupkvm+0x9d>
                (uint)k->phys_start, k->perm) < 0)
      return 0;
80107edd:	b8 00 00 00 00       	mov    $0x0,%eax
80107ee2:	eb 10                	jmp    80107ef4 <setupkvm+0xad>
  if((pgdir = (pde_t*)kalloc()) == 0)
    return 0;
  memset(pgdir, 0, PGSIZE);
  if (p2v(PHYSTOP) > (void*)DEVSPACE)
    panic("PHYSTOP too high");
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80107ee4:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
80107ee8:	81 7d f4 00 35 11 80 	cmpl   $0x80113500,-0xc(%ebp)
80107eef:	72 b7                	jb     80107ea8 <setupkvm+0x61>
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
                (uint)k->phys_start, k->perm) < 0)
      return 0;
  return pgdir;
80107ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80107ef4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107ef7:	c9                   	leave  
80107ef8:	c3                   	ret    

80107ef9 <kvmalloc>:

// Allocate one page table for the machine for the kernel address
// space for scheduler processes.
void
kvmalloc(void)
{
80107ef9:	55                   	push   %ebp
80107efa:	89 e5                	mov    %esp,%ebp
80107efc:	83 ec 08             	sub    $0x8,%esp
  kpgdir = setupkvm();
80107eff:	e8 43 ff ff ff       	call   80107e47 <setupkvm>
80107f04:	a3 38 d2 11 80       	mov    %eax,0x8011d238
  switchkvm();
80107f09:	e8 03 00 00 00       	call   80107f11 <switchkvm>
}
80107f0e:	90                   	nop
80107f0f:	c9                   	leave  
80107f10:	c3                   	ret    

80107f11 <switchkvm>:

// Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void
switchkvm(void)
{
80107f11:	55                   	push   %ebp
80107f12:	89 e5                	mov    %esp,%ebp
  lcr3(v2p(kpgdir));   // switch to the kernel page table
80107f14:	a1 38 d2 11 80       	mov    0x8011d238,%eax
80107f19:	50                   	push   %eax
80107f1a:	e8 69 f9 ff ff       	call   80107888 <v2p>
80107f1f:	83 c4 04             	add    $0x4,%esp
80107f22:	50                   	push   %eax
80107f23:	e8 54 f9 ff ff       	call   8010787c <lcr3>
80107f28:	83 c4 04             	add    $0x4,%esp
}
80107f2b:	90                   	nop
80107f2c:	c9                   	leave  
80107f2d:	c3                   	ret    

80107f2e <switchuvm>:

// Switch TSS and h/w page table to correspond to process p.
void
switchuvm(struct proc *p)
{
80107f2e:	55                   	push   %ebp
80107f2f:	89 e5                	mov    %esp,%ebp
80107f31:	56                   	push   %esi
80107f32:	53                   	push   %ebx
  pushcli();
80107f33:	e8 15 d3 ff ff       	call   8010524d <pushcli>
  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
80107f38:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80107f3e:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80107f45:	83 c2 08             	add    $0x8,%edx
80107f48:	89 d6                	mov    %edx,%esi
80107f4a:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80107f51:	83 c2 08             	add    $0x8,%edx
80107f54:	c1 ea 10             	shr    $0x10,%edx
80107f57:	89 d3                	mov    %edx,%ebx
80107f59:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80107f60:	83 c2 08             	add    $0x8,%edx
80107f63:	c1 ea 18             	shr    $0x18,%edx
80107f66:	89 d1                	mov    %edx,%ecx
80107f68:	66 c7 80 a0 00 00 00 	movw   $0x67,0xa0(%eax)
80107f6f:	67 00 
80107f71:	66 89 b0 a2 00 00 00 	mov    %si,0xa2(%eax)
80107f78:	88 98 a4 00 00 00    	mov    %bl,0xa4(%eax)
80107f7e:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
80107f85:	83 e2 f0             	and    $0xfffffff0,%edx
80107f88:	83 ca 09             	or     $0x9,%edx
80107f8b:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107f91:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
80107f98:	83 ca 10             	or     $0x10,%edx
80107f9b:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107fa1:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
80107fa8:	83 e2 9f             	and    $0xffffff9f,%edx
80107fab:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107fb1:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
80107fb8:	83 ca 80             	or     $0xffffff80,%edx
80107fbb:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107fc1:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
80107fc8:	83 e2 f0             	and    $0xfffffff0,%edx
80107fcb:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107fd1:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
80107fd8:	83 e2 ef             	and    $0xffffffef,%edx
80107fdb:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107fe1:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
80107fe8:	83 e2 df             	and    $0xffffffdf,%edx
80107feb:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107ff1:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
80107ff8:	83 ca 40             	or     $0x40,%edx
80107ffb:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80108001:	0f b6 90 a6 00 00 00 	movzbl 0xa6(%eax),%edx
80108008:	83 e2 7f             	and    $0x7f,%edx
8010800b:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80108011:	88 88 a7 00 00 00    	mov    %cl,0xa7(%eax)
  cpu->gdt[SEG_TSS].s = 0;
80108017:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010801d:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%eax),%edx
80108024:	83 e2 ef             	and    $0xffffffef,%edx
80108027:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
  cpu->ts.ss0 = SEG_KDATA << 3;
8010802d:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80108033:	66 c7 40 10 10 00    	movw   $0x10,0x10(%eax)
  cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
80108039:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010803f:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
80108046:	8b 52 08             	mov    0x8(%edx),%edx
80108049:	81 c2 00 10 00 00    	add    $0x1000,%edx
8010804f:	89 50 0c             	mov    %edx,0xc(%eax)
  ltr(SEG_TSS << 3);
80108052:	83 ec 0c             	sub    $0xc,%esp
80108055:	6a 30                	push   $0x30
80108057:	e8 f3 f7 ff ff       	call   8010784f <ltr>
8010805c:	83 c4 10             	add    $0x10,%esp
  if(p->pgdir == 0)
8010805f:	8b 45 08             	mov    0x8(%ebp),%eax
80108062:	8b 40 04             	mov    0x4(%eax),%eax
80108065:	85 c0                	test   %eax,%eax
80108067:	75 0d                	jne    80108076 <switchuvm+0x148>
    panic("switchuvm: no pgdir");
80108069:	83 ec 0c             	sub    $0xc,%esp
8010806c:	68 13 c8 10 80       	push   $0x8010c813
80108071:	e8 f0 84 ff ff       	call   80100566 <panic>
  lcr3(v2p(p->pgdir));  // switch to new address space
80108076:	8b 45 08             	mov    0x8(%ebp),%eax
80108079:	8b 40 04             	mov    0x4(%eax),%eax
8010807c:	83 ec 0c             	sub    $0xc,%esp
8010807f:	50                   	push   %eax
80108080:	e8 03 f8 ff ff       	call   80107888 <v2p>
80108085:	83 c4 10             	add    $0x10,%esp
80108088:	83 ec 0c             	sub    $0xc,%esp
8010808b:	50                   	push   %eax
8010808c:	e8 eb f7 ff ff       	call   8010787c <lcr3>
80108091:	83 c4 10             	add    $0x10,%esp
  popcli();
80108094:	e8 f9 d1 ff ff       	call   80105292 <popcli>
}
80108099:	90                   	nop
8010809a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010809d:	5b                   	pop    %ebx
8010809e:	5e                   	pop    %esi
8010809f:	5d                   	pop    %ebp
801080a0:	c3                   	ret    

801080a1 <inituvm>:

// Load the initcode into address 0 of pgdir.
// sz must be less than a page.
void
inituvm(pde_t *pgdir, char *init, uint sz)
{
801080a1:	55                   	push   %ebp
801080a2:	89 e5                	mov    %esp,%ebp
801080a4:	83 ec 18             	sub    $0x18,%esp
  char *mem;
  
  if(sz >= PGSIZE)
801080a7:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
801080ae:	76 0d                	jbe    801080bd <inituvm+0x1c>
    panic("inituvm: more than a page");
801080b0:	83 ec 0c             	sub    $0xc,%esp
801080b3:	68 27 c8 10 80       	push   $0x8010c827
801080b8:	e8 a9 84 ff ff       	call   80100566 <panic>
  mem = kalloc();
801080bd:	e8 35 ac ff ff       	call   80102cf7 <kalloc>
801080c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  memset(mem, 0, PGSIZE);
801080c5:	83 ec 04             	sub    $0x4,%esp
801080c8:	68 00 10 00 00       	push   $0x1000
801080cd:	6a 00                	push   $0x0
801080cf:	ff 75 f4             	pushl  -0xc(%ebp)
801080d2:	e8 7c d2 ff ff       	call   80105353 <memset>
801080d7:	83 c4 10             	add    $0x10,%esp
  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
801080da:	83 ec 0c             	sub    $0xc,%esp
801080dd:	ff 75 f4             	pushl  -0xc(%ebp)
801080e0:	e8 a3 f7 ff ff       	call   80107888 <v2p>
801080e5:	83 c4 10             	add    $0x10,%esp
801080e8:	83 ec 0c             	sub    $0xc,%esp
801080eb:	6a 06                	push   $0x6
801080ed:	50                   	push   %eax
801080ee:	68 00 10 00 00       	push   $0x1000
801080f3:	6a 00                	push   $0x0
801080f5:	ff 75 08             	pushl  0x8(%ebp)
801080f8:	e8 ba fc ff ff       	call   80107db7 <mappages>
801080fd:	83 c4 20             	add    $0x20,%esp
  memmove(mem, init, sz);
80108100:	83 ec 04             	sub    $0x4,%esp
80108103:	ff 75 10             	pushl  0x10(%ebp)
80108106:	ff 75 0c             	pushl  0xc(%ebp)
80108109:	ff 75 f4             	pushl  -0xc(%ebp)
8010810c:	e8 01 d3 ff ff       	call   80105412 <memmove>
80108111:	83 c4 10             	add    $0x10,%esp
}
80108114:	90                   	nop
80108115:	c9                   	leave  
80108116:	c3                   	ret    

80108117 <loaduvm>:

// Load a program segment into pgdir.  addr must be page-aligned
// and the pages from addr to addr+sz must already be mapped.
int
loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
{
80108117:	55                   	push   %ebp
80108118:	89 e5                	mov    %esp,%ebp
8010811a:	53                   	push   %ebx
8010811b:	83 ec 14             	sub    $0x14,%esp
  uint i, pa, n;
  pte_t *pte;

  if((uint) addr % PGSIZE != 0)
8010811e:	8b 45 0c             	mov    0xc(%ebp),%eax
80108121:	25 ff 0f 00 00       	and    $0xfff,%eax
80108126:	85 c0                	test   %eax,%eax
80108128:	74 0d                	je     80108137 <loaduvm+0x20>
    panic("loaduvm: addr must be page aligned");
8010812a:	83 ec 0c             	sub    $0xc,%esp
8010812d:	68 44 c8 10 80       	push   $0x8010c844
80108132:	e8 2f 84 ff ff       	call   80100566 <panic>
  for(i = 0; i < sz; i += PGSIZE){
80108137:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010813e:	e9 95 00 00 00       	jmp    801081d8 <loaduvm+0xc1>
    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
80108143:	8b 55 0c             	mov    0xc(%ebp),%edx
80108146:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108149:	01 d0                	add    %edx,%eax
8010814b:	83 ec 04             	sub    $0x4,%esp
8010814e:	6a 00                	push   $0x0
80108150:	50                   	push   %eax
80108151:	ff 75 08             	pushl  0x8(%ebp)
80108154:	e8 be fb ff ff       	call   80107d17 <walkpgdir>
80108159:	83 c4 10             	add    $0x10,%esp
8010815c:	89 45 ec             	mov    %eax,-0x14(%ebp)
8010815f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80108163:	75 0d                	jne    80108172 <loaduvm+0x5b>
      panic("loaduvm: address should exist");
80108165:	83 ec 0c             	sub    $0xc,%esp
80108168:	68 67 c8 10 80       	push   $0x8010c867
8010816d:	e8 f4 83 ff ff       	call   80100566 <panic>
    pa = PTE_ADDR(*pte);
80108172:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108175:	8b 00                	mov    (%eax),%eax
80108177:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010817c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(sz - i < PGSIZE)
8010817f:	8b 45 18             	mov    0x18(%ebp),%eax
80108182:	2b 45 f4             	sub    -0xc(%ebp),%eax
80108185:	3d ff 0f 00 00       	cmp    $0xfff,%eax
8010818a:	77 0b                	ja     80108197 <loaduvm+0x80>
      n = sz - i;
8010818c:	8b 45 18             	mov    0x18(%ebp),%eax
8010818f:	2b 45 f4             	sub    -0xc(%ebp),%eax
80108192:	89 45 f0             	mov    %eax,-0x10(%ebp)
80108195:	eb 07                	jmp    8010819e <loaduvm+0x87>
    else
      n = PGSIZE;
80108197:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    if(readi(ip, p2v(pa), offset+i, n) != n)
8010819e:	8b 55 14             	mov    0x14(%ebp),%edx
801081a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081a4:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
801081a7:	83 ec 0c             	sub    $0xc,%esp
801081aa:	ff 75 e8             	pushl  -0x18(%ebp)
801081ad:	e8 e3 f6 ff ff       	call   80107895 <p2v>
801081b2:	83 c4 10             	add    $0x10,%esp
801081b5:	ff 75 f0             	pushl  -0x10(%ebp)
801081b8:	53                   	push   %ebx
801081b9:	50                   	push   %eax
801081ba:	ff 75 10             	pushl  0x10(%ebp)
801081bd:	e8 e3 9d ff ff       	call   80101fa5 <readi>
801081c2:	83 c4 10             	add    $0x10,%esp
801081c5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
801081c8:	74 07                	je     801081d1 <loaduvm+0xba>
      return -1;
801081ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801081cf:	eb 18                	jmp    801081e9 <loaduvm+0xd2>
  uint i, pa, n;
  pte_t *pte;

  if((uint) addr % PGSIZE != 0)
    panic("loaduvm: addr must be page aligned");
  for(i = 0; i < sz; i += PGSIZE){
801081d1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
801081d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081db:	3b 45 18             	cmp    0x18(%ebp),%eax
801081de:	0f 82 5f ff ff ff    	jb     80108143 <loaduvm+0x2c>
    else
      n = PGSIZE;
    if(readi(ip, p2v(pa), offset+i, n) != n)
      return -1;
  }
  return 0;
801081e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
801081e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801081ec:	c9                   	leave  
801081ed:	c3                   	ret    

801081ee <allocuvm>:

// Allocate page tables and physical memory to grow process from oldsz to
// newsz, which need not be page aligned.  Returns new size or 0 on error.
int
allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
{
801081ee:	55                   	push   %ebp
801081ef:	89 e5                	mov    %esp,%ebp
801081f1:	83 ec 18             	sub    $0x18,%esp
  char *mem;
  uint a;

  if(newsz >= KERNBASE)
801081f4:	8b 45 10             	mov    0x10(%ebp),%eax
801081f7:	85 c0                	test   %eax,%eax
801081f9:	79 0a                	jns    80108205 <allocuvm+0x17>
    return 0;
801081fb:	b8 00 00 00 00       	mov    $0x0,%eax
80108200:	e9 b0 00 00 00       	jmp    801082b5 <allocuvm+0xc7>
  if(newsz < oldsz)
80108205:	8b 45 10             	mov    0x10(%ebp),%eax
80108208:	3b 45 0c             	cmp    0xc(%ebp),%eax
8010820b:	73 08                	jae    80108215 <allocuvm+0x27>
    return oldsz;
8010820d:	8b 45 0c             	mov    0xc(%ebp),%eax
80108210:	e9 a0 00 00 00       	jmp    801082b5 <allocuvm+0xc7>

  a = PGROUNDUP(oldsz);
80108215:	8b 45 0c             	mov    0xc(%ebp),%eax
80108218:	05 ff 0f 00 00       	add    $0xfff,%eax
8010821d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108222:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for(; a < newsz; a += PGSIZE){
80108225:	eb 7f                	jmp    801082a6 <allocuvm+0xb8>
    mem = kalloc();
80108227:	e8 cb aa ff ff       	call   80102cf7 <kalloc>
8010822c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mem == 0){
8010822f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80108233:	75 2b                	jne    80108260 <allocuvm+0x72>
      cprintf("allocuvm out of memory\n");
80108235:	83 ec 0c             	sub    $0xc,%esp
80108238:	68 85 c8 10 80       	push   $0x8010c885
8010823d:	e8 84 81 ff ff       	call   801003c6 <cprintf>
80108242:	83 c4 10             	add    $0x10,%esp
      deallocuvm(pgdir, newsz, oldsz);
80108245:	83 ec 04             	sub    $0x4,%esp
80108248:	ff 75 0c             	pushl  0xc(%ebp)
8010824b:	ff 75 10             	pushl  0x10(%ebp)
8010824e:	ff 75 08             	pushl  0x8(%ebp)
80108251:	e8 61 00 00 00       	call   801082b7 <deallocuvm>
80108256:	83 c4 10             	add    $0x10,%esp
      return 0;
80108259:	b8 00 00 00 00       	mov    $0x0,%eax
8010825e:	eb 55                	jmp    801082b5 <allocuvm+0xc7>
    }
    memset(mem, 0, PGSIZE);
80108260:	83 ec 04             	sub    $0x4,%esp
80108263:	68 00 10 00 00       	push   $0x1000
80108268:	6a 00                	push   $0x0
8010826a:	ff 75 f0             	pushl  -0x10(%ebp)
8010826d:	e8 e1 d0 ff ff       	call   80105353 <memset>
80108272:	83 c4 10             	add    $0x10,%esp
    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
80108275:	83 ec 0c             	sub    $0xc,%esp
80108278:	ff 75 f0             	pushl  -0x10(%ebp)
8010827b:	e8 08 f6 ff ff       	call   80107888 <v2p>
80108280:	83 c4 10             	add    $0x10,%esp
80108283:	89 c2                	mov    %eax,%edx
80108285:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108288:	83 ec 0c             	sub    $0xc,%esp
8010828b:	6a 06                	push   $0x6
8010828d:	52                   	push   %edx
8010828e:	68 00 10 00 00       	push   $0x1000
80108293:	50                   	push   %eax
80108294:	ff 75 08             	pushl  0x8(%ebp)
80108297:	e8 1b fb ff ff       	call   80107db7 <mappages>
8010829c:	83 c4 20             	add    $0x20,%esp
    return 0;
  if(newsz < oldsz)
    return oldsz;

  a = PGROUNDUP(oldsz);
  for(; a < newsz; a += PGSIZE){
8010829f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
801082a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082a9:	3b 45 10             	cmp    0x10(%ebp),%eax
801082ac:	0f 82 75 ff ff ff    	jb     80108227 <allocuvm+0x39>
      return 0;
    }
    memset(mem, 0, PGSIZE);
    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
  }
  return newsz;
801082b2:	8b 45 10             	mov    0x10(%ebp),%eax
}
801082b5:	c9                   	leave  
801082b6:	c3                   	ret    

801082b7 <deallocuvm>:
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
{
801082b7:	55                   	push   %ebp
801082b8:	89 e5                	mov    %esp,%ebp
801082ba:	83 ec 18             	sub    $0x18,%esp
  pte_t *pte;
  uint a, pa;

  if(newsz >= oldsz)
801082bd:	8b 45 10             	mov    0x10(%ebp),%eax
801082c0:	3b 45 0c             	cmp    0xc(%ebp),%eax
801082c3:	72 08                	jb     801082cd <deallocuvm+0x16>
    return oldsz;
801082c5:	8b 45 0c             	mov    0xc(%ebp),%eax
801082c8:	e9 a5 00 00 00       	jmp    80108372 <deallocuvm+0xbb>

  a = PGROUNDUP(newsz);
801082cd:	8b 45 10             	mov    0x10(%ebp),%eax
801082d0:	05 ff 0f 00 00       	add    $0xfff,%eax
801082d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801082da:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for(; a  < oldsz; a += PGSIZE){
801082dd:	e9 81 00 00 00       	jmp    80108363 <deallocuvm+0xac>
    pte = walkpgdir(pgdir, (char*)a, 0);
801082e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082e5:	83 ec 04             	sub    $0x4,%esp
801082e8:	6a 00                	push   $0x0
801082ea:	50                   	push   %eax
801082eb:	ff 75 08             	pushl  0x8(%ebp)
801082ee:	e8 24 fa ff ff       	call   80107d17 <walkpgdir>
801082f3:	83 c4 10             	add    $0x10,%esp
801082f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(!pte)
801082f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801082fd:	75 09                	jne    80108308 <deallocuvm+0x51>
      a += (NPTENTRIES - 1) * PGSIZE;
801082ff:	81 45 f4 00 f0 3f 00 	addl   $0x3ff000,-0xc(%ebp)
80108306:	eb 54                	jmp    8010835c <deallocuvm+0xa5>
    else if((*pte & PTE_P) != 0){
80108308:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010830b:	8b 00                	mov    (%eax),%eax
8010830d:	83 e0 01             	and    $0x1,%eax
80108310:	85 c0                	test   %eax,%eax
80108312:	74 48                	je     8010835c <deallocuvm+0xa5>
      pa = PTE_ADDR(*pte);
80108314:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108317:	8b 00                	mov    (%eax),%eax
80108319:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010831e:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(pa == 0)
80108321:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80108325:	75 0d                	jne    80108334 <deallocuvm+0x7d>
        panic("kfree");
80108327:	83 ec 0c             	sub    $0xc,%esp
8010832a:	68 9d c8 10 80       	push   $0x8010c89d
8010832f:	e8 32 82 ff ff       	call   80100566 <panic>
      char *v = p2v(pa);
80108334:	83 ec 0c             	sub    $0xc,%esp
80108337:	ff 75 ec             	pushl  -0x14(%ebp)
8010833a:	e8 56 f5 ff ff       	call   80107895 <p2v>
8010833f:	83 c4 10             	add    $0x10,%esp
80108342:	89 45 e8             	mov    %eax,-0x18(%ebp)
      kfree(v);
80108345:	83 ec 0c             	sub    $0xc,%esp
80108348:	ff 75 e8             	pushl  -0x18(%ebp)
8010834b:	e8 0a a9 ff ff       	call   80102c5a <kfree>
80108350:	83 c4 10             	add    $0x10,%esp
      *pte = 0;
80108353:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108356:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  if(newsz >= oldsz)
    return oldsz;

  a = PGROUNDUP(newsz);
  for(; a  < oldsz; a += PGSIZE){
8010835c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80108363:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108366:	3b 45 0c             	cmp    0xc(%ebp),%eax
80108369:	0f 82 73 ff ff ff    	jb     801082e2 <deallocuvm+0x2b>
      char *v = p2v(pa);
      kfree(v);
      *pte = 0;
    }
  }
  return newsz;
8010836f:	8b 45 10             	mov    0x10(%ebp),%eax
}
80108372:	c9                   	leave  
80108373:	c3                   	ret    

80108374 <freevm>:

// Free a page table and all the physical memory pages
// in the user part.
void
freevm(pde_t *pgdir)
{
80108374:	55                   	push   %ebp
80108375:	89 e5                	mov    %esp,%ebp
80108377:	83 ec 18             	sub    $0x18,%esp
  uint i;

  if(pgdir == 0)
8010837a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010837e:	75 0d                	jne    8010838d <freevm+0x19>
    panic("freevm: no pgdir");
80108380:	83 ec 0c             	sub    $0xc,%esp
80108383:	68 a3 c8 10 80       	push   $0x8010c8a3
80108388:	e8 d9 81 ff ff       	call   80100566 <panic>
  deallocuvm(pgdir, KERNBASE, 0);
8010838d:	83 ec 04             	sub    $0x4,%esp
80108390:	6a 00                	push   $0x0
80108392:	68 00 00 00 80       	push   $0x80000000
80108397:	ff 75 08             	pushl  0x8(%ebp)
8010839a:	e8 18 ff ff ff       	call   801082b7 <deallocuvm>
8010839f:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < NPDENTRIES; i++){
801083a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801083a9:	eb 4f                	jmp    801083fa <freevm+0x86>
    if(pgdir[i] & PTE_P){
801083ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801083b5:	8b 45 08             	mov    0x8(%ebp),%eax
801083b8:	01 d0                	add    %edx,%eax
801083ba:	8b 00                	mov    (%eax),%eax
801083bc:	83 e0 01             	and    $0x1,%eax
801083bf:	85 c0                	test   %eax,%eax
801083c1:	74 33                	je     801083f6 <freevm+0x82>
      char * v = p2v(PTE_ADDR(pgdir[i]));
801083c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083c6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801083cd:	8b 45 08             	mov    0x8(%ebp),%eax
801083d0:	01 d0                	add    %edx,%eax
801083d2:	8b 00                	mov    (%eax),%eax
801083d4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801083d9:	83 ec 0c             	sub    $0xc,%esp
801083dc:	50                   	push   %eax
801083dd:	e8 b3 f4 ff ff       	call   80107895 <p2v>
801083e2:	83 c4 10             	add    $0x10,%esp
801083e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
      kfree(v);
801083e8:	83 ec 0c             	sub    $0xc,%esp
801083eb:	ff 75 f0             	pushl  -0x10(%ebp)
801083ee:	e8 67 a8 ff ff       	call   80102c5a <kfree>
801083f3:	83 c4 10             	add    $0x10,%esp
  uint i;

  if(pgdir == 0)
    panic("freevm: no pgdir");
  deallocuvm(pgdir, KERNBASE, 0);
  for(i = 0; i < NPDENTRIES; i++){
801083f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
801083fa:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
80108401:	76 a8                	jbe    801083ab <freevm+0x37>
    if(pgdir[i] & PTE_P){
      char * v = p2v(PTE_ADDR(pgdir[i]));
      kfree(v);
    }
  }
  kfree((char*)pgdir);
80108403:	83 ec 0c             	sub    $0xc,%esp
80108406:	ff 75 08             	pushl  0x8(%ebp)
80108409:	e8 4c a8 ff ff       	call   80102c5a <kfree>
8010840e:	83 c4 10             	add    $0x10,%esp
}
80108411:	90                   	nop
80108412:	c9                   	leave  
80108413:	c3                   	ret    

80108414 <clearpteu>:

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void
clearpteu(pde_t *pgdir, char *uva)
{
80108414:	55                   	push   %ebp
80108415:	89 e5                	mov    %esp,%ebp
80108417:	83 ec 18             	sub    $0x18,%esp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
8010841a:	83 ec 04             	sub    $0x4,%esp
8010841d:	6a 00                	push   $0x0
8010841f:	ff 75 0c             	pushl  0xc(%ebp)
80108422:	ff 75 08             	pushl  0x8(%ebp)
80108425:	e8 ed f8 ff ff       	call   80107d17 <walkpgdir>
8010842a:	83 c4 10             	add    $0x10,%esp
8010842d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(pte == 0)
80108430:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80108434:	75 0d                	jne    80108443 <clearpteu+0x2f>
    panic("clearpteu");
80108436:	83 ec 0c             	sub    $0xc,%esp
80108439:	68 b4 c8 10 80       	push   $0x8010c8b4
8010843e:	e8 23 81 ff ff       	call   80100566 <panic>
  *pte &= ~PTE_U;
80108443:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108446:	8b 00                	mov    (%eax),%eax
80108448:	83 e0 fb             	and    $0xfffffffb,%eax
8010844b:	89 c2                	mov    %eax,%edx
8010844d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108450:	89 10                	mov    %edx,(%eax)
}
80108452:	90                   	nop
80108453:	c9                   	leave  
80108454:	c3                   	ret    

80108455 <copyuvm>:

// Given a parent process's page table, create a copy
// of it for a child.
pde_t*
copyuvm(pde_t *pgdir, uint sz)
{
80108455:	55                   	push   %ebp
80108456:	89 e5                	mov    %esp,%ebp
80108458:	53                   	push   %ebx
80108459:	83 ec 24             	sub    $0x24,%esp
  pde_t *d;
  pte_t *pte;
  uint pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
8010845c:	e8 e6 f9 ff ff       	call   80107e47 <setupkvm>
80108461:	89 45 f0             	mov    %eax,-0x10(%ebp)
80108464:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80108468:	75 0a                	jne    80108474 <copyuvm+0x1f>
    return 0;
8010846a:	b8 00 00 00 00       	mov    $0x0,%eax
8010846f:	e9 f8 00 00 00       	jmp    8010856c <copyuvm+0x117>
  for(i = 0; i < sz; i += PGSIZE){
80108474:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010847b:	e9 c4 00 00 00       	jmp    80108544 <copyuvm+0xef>
    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
80108480:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108483:	83 ec 04             	sub    $0x4,%esp
80108486:	6a 00                	push   $0x0
80108488:	50                   	push   %eax
80108489:	ff 75 08             	pushl  0x8(%ebp)
8010848c:	e8 86 f8 ff ff       	call   80107d17 <walkpgdir>
80108491:	83 c4 10             	add    $0x10,%esp
80108494:	89 45 ec             	mov    %eax,-0x14(%ebp)
80108497:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
8010849b:	75 0d                	jne    801084aa <copyuvm+0x55>
      panic("copyuvm: pte should exist");
8010849d:	83 ec 0c             	sub    $0xc,%esp
801084a0:	68 be c8 10 80       	push   $0x8010c8be
801084a5:	e8 bc 80 ff ff       	call   80100566 <panic>
    if(!(*pte & PTE_P))
801084aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
801084ad:	8b 00                	mov    (%eax),%eax
801084af:	83 e0 01             	and    $0x1,%eax
801084b2:	85 c0                	test   %eax,%eax
801084b4:	75 0d                	jne    801084c3 <copyuvm+0x6e>
      panic("copyuvm: page not present");
801084b6:	83 ec 0c             	sub    $0xc,%esp
801084b9:	68 d8 c8 10 80       	push   $0x8010c8d8
801084be:	e8 a3 80 ff ff       	call   80100566 <panic>
    pa = PTE_ADDR(*pte);
801084c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
801084c6:	8b 00                	mov    (%eax),%eax
801084c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801084cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    flags = PTE_FLAGS(*pte);
801084d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
801084d3:	8b 00                	mov    (%eax),%eax
801084d5:	25 ff 0f 00 00       	and    $0xfff,%eax
801084da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if((mem = kalloc()) == 0)
801084dd:	e8 15 a8 ff ff       	call   80102cf7 <kalloc>
801084e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
801084e5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
801084e9:	74 6a                	je     80108555 <copyuvm+0x100>
      goto bad;
    memmove(mem, (char*)p2v(pa), PGSIZE);
801084eb:	83 ec 0c             	sub    $0xc,%esp
801084ee:	ff 75 e8             	pushl  -0x18(%ebp)
801084f1:	e8 9f f3 ff ff       	call   80107895 <p2v>
801084f6:	83 c4 10             	add    $0x10,%esp
801084f9:	83 ec 04             	sub    $0x4,%esp
801084fc:	68 00 10 00 00       	push   $0x1000
80108501:	50                   	push   %eax
80108502:	ff 75 e0             	pushl  -0x20(%ebp)
80108505:	e8 08 cf ff ff       	call   80105412 <memmove>
8010850a:	83 c4 10             	add    $0x10,%esp
    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
8010850d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80108510:	83 ec 0c             	sub    $0xc,%esp
80108513:	ff 75 e0             	pushl  -0x20(%ebp)
80108516:	e8 6d f3 ff ff       	call   80107888 <v2p>
8010851b:	83 c4 10             	add    $0x10,%esp
8010851e:	89 c2                	mov    %eax,%edx
80108520:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108523:	83 ec 0c             	sub    $0xc,%esp
80108526:	53                   	push   %ebx
80108527:	52                   	push   %edx
80108528:	68 00 10 00 00       	push   $0x1000
8010852d:	50                   	push   %eax
8010852e:	ff 75 f0             	pushl  -0x10(%ebp)
80108531:	e8 81 f8 ff ff       	call   80107db7 <mappages>
80108536:	83 c4 20             	add    $0x20,%esp
80108539:	85 c0                	test   %eax,%eax
8010853b:	78 1b                	js     80108558 <copyuvm+0x103>
  uint pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
    return 0;
  for(i = 0; i < sz; i += PGSIZE){
8010853d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80108544:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108547:	3b 45 0c             	cmp    0xc(%ebp),%eax
8010854a:	0f 82 30 ff ff ff    	jb     80108480 <copyuvm+0x2b>
      goto bad;
    memmove(mem, (char*)p2v(pa), PGSIZE);
    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
      goto bad;
  }
  return d;
80108550:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108553:	eb 17                	jmp    8010856c <copyuvm+0x117>
    if(!(*pte & PTE_P))
      panic("copyuvm: page not present");
    pa = PTE_ADDR(*pte);
    flags = PTE_FLAGS(*pte);
    if((mem = kalloc()) == 0)
      goto bad;
80108555:	90                   	nop
80108556:	eb 01                	jmp    80108559 <copyuvm+0x104>
    memmove(mem, (char*)p2v(pa), PGSIZE);
    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
      goto bad;
80108558:	90                   	nop
  }
  return d;

bad:
  freevm(d);
80108559:	83 ec 0c             	sub    $0xc,%esp
8010855c:	ff 75 f0             	pushl  -0x10(%ebp)
8010855f:	e8 10 fe ff ff       	call   80108374 <freevm>
80108564:	83 c4 10             	add    $0x10,%esp
  return 0;
80108567:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010856c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010856f:	c9                   	leave  
80108570:	c3                   	ret    

80108571 <uva2ka>:

//PAGEBREAK!
// Map user virtual address to kernel address.
char*
uva2ka(pde_t *pgdir, char *uva)
{
80108571:	55                   	push   %ebp
80108572:	89 e5                	mov    %esp,%ebp
80108574:	83 ec 18             	sub    $0x18,%esp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
80108577:	83 ec 04             	sub    $0x4,%esp
8010857a:	6a 00                	push   $0x0
8010857c:	ff 75 0c             	pushl  0xc(%ebp)
8010857f:	ff 75 08             	pushl  0x8(%ebp)
80108582:	e8 90 f7 ff ff       	call   80107d17 <walkpgdir>
80108587:	83 c4 10             	add    $0x10,%esp
8010858a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((*pte & PTE_P) == 0)
8010858d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108590:	8b 00                	mov    (%eax),%eax
80108592:	83 e0 01             	and    $0x1,%eax
80108595:	85 c0                	test   %eax,%eax
80108597:	75 07                	jne    801085a0 <uva2ka+0x2f>
    return 0;
80108599:	b8 00 00 00 00       	mov    $0x0,%eax
8010859e:	eb 29                	jmp    801085c9 <uva2ka+0x58>
  if((*pte & PTE_U) == 0)
801085a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801085a3:	8b 00                	mov    (%eax),%eax
801085a5:	83 e0 04             	and    $0x4,%eax
801085a8:	85 c0                	test   %eax,%eax
801085aa:	75 07                	jne    801085b3 <uva2ka+0x42>
    return 0;
801085ac:	b8 00 00 00 00       	mov    $0x0,%eax
801085b1:	eb 16                	jmp    801085c9 <uva2ka+0x58>
  return (char*)p2v(PTE_ADDR(*pte));
801085b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801085b6:	8b 00                	mov    (%eax),%eax
801085b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801085bd:	83 ec 0c             	sub    $0xc,%esp
801085c0:	50                   	push   %eax
801085c1:	e8 cf f2 ff ff       	call   80107895 <p2v>
801085c6:	83 c4 10             	add    $0x10,%esp
}
801085c9:	c9                   	leave  
801085ca:	c3                   	ret    

801085cb <copyout>:
// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int
copyout(pde_t *pgdir, uint va, void *p, uint len)
{
801085cb:	55                   	push   %ebp
801085cc:	89 e5                	mov    %esp,%ebp
801085ce:	83 ec 18             	sub    $0x18,%esp
  char *buf, *pa0;
  uint n, va0;

  buf = (char*)p;
801085d1:	8b 45 10             	mov    0x10(%ebp),%eax
801085d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while(len > 0){
801085d7:	eb 7f                	jmp    80108658 <copyout+0x8d>
    va0 = (uint)PGROUNDDOWN(va);
801085d9:	8b 45 0c             	mov    0xc(%ebp),%eax
801085dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801085e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pa0 = uva2ka(pgdir, (char*)va0);
801085e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
801085e7:	83 ec 08             	sub    $0x8,%esp
801085ea:	50                   	push   %eax
801085eb:	ff 75 08             	pushl  0x8(%ebp)
801085ee:	e8 7e ff ff ff       	call   80108571 <uva2ka>
801085f3:	83 c4 10             	add    $0x10,%esp
801085f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(pa0 == 0)
801085f9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
801085fd:	75 07                	jne    80108606 <copyout+0x3b>
      return -1;
801085ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80108604:	eb 61                	jmp    80108667 <copyout+0x9c>
    n = PGSIZE - (va - va0);
80108606:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108609:	2b 45 0c             	sub    0xc(%ebp),%eax
8010860c:	05 00 10 00 00       	add    $0x1000,%eax
80108611:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(n > len)
80108614:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108617:	3b 45 14             	cmp    0x14(%ebp),%eax
8010861a:	76 06                	jbe    80108622 <copyout+0x57>
      n = len;
8010861c:	8b 45 14             	mov    0x14(%ebp),%eax
8010861f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memmove(pa0 + (va - va0), buf, n);
80108622:	8b 45 0c             	mov    0xc(%ebp),%eax
80108625:	2b 45 ec             	sub    -0x14(%ebp),%eax
80108628:	89 c2                	mov    %eax,%edx
8010862a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010862d:	01 d0                	add    %edx,%eax
8010862f:	83 ec 04             	sub    $0x4,%esp
80108632:	ff 75 f0             	pushl  -0x10(%ebp)
80108635:	ff 75 f4             	pushl  -0xc(%ebp)
80108638:	50                   	push   %eax
80108639:	e8 d4 cd ff ff       	call   80105412 <memmove>
8010863e:	83 c4 10             	add    $0x10,%esp
    len -= n;
80108641:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108644:	29 45 14             	sub    %eax,0x14(%ebp)
    buf += n;
80108647:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010864a:	01 45 f4             	add    %eax,-0xc(%ebp)
    va = va0 + PGSIZE;
8010864d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108650:	05 00 10 00 00       	add    $0x1000,%eax
80108655:	89 45 0c             	mov    %eax,0xc(%ebp)
{
  char *buf, *pa0;
  uint n, va0;

  buf = (char*)p;
  while(len > 0){
80108658:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
8010865c:	0f 85 77 ff ff ff    	jne    801085d9 <copyout+0xe>
    memmove(pa0 + (va - va0), buf, n);
    len -= n;
    buf += n;
    va = va0 + PGSIZE;
  }
  return 0;
80108662:	b8 00 00 00 00       	mov    $0x0,%eax
}
80108667:	c9                   	leave  
80108668:	c3                   	ret    

80108669 <handleMessage>:
#include "msg.h"
#include "types.h"
#include "defs.h"

int handleMessage(message* msg)
{
80108669:	55                   	push   %ebp
8010866a:	89 e5                	mov    %esp,%ebp
8010866c:	83 ec 08             	sub    $0x8,%esp
    guiKernelHandleMsg(msg);
8010866f:	83 ec 0c             	sub    $0xc,%esp
80108672:	ff 75 08             	pushl  0x8(%ebp)
80108675:	e8 b0 1c 00 00       	call   8010a32a <guiKernelHandleMsg>
8010867a:	83 c4 10             	add    $0x10,%esp
    return 0;
8010867d:	b8 00 00 00 00       	mov    $0x0,%eax
}
80108682:	c9                   	leave  
80108683:	c3                   	ret    

80108684 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80108684:	55                   	push   %ebp
80108685:	89 e5                	mov    %esp,%ebp
80108687:	83 ec 14             	sub    $0x14,%esp
8010868a:	8b 45 08             	mov    0x8(%ebp),%eax
8010868d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80108691:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80108695:	89 c2                	mov    %eax,%edx
80108697:	ec                   	in     (%dx),%al
80108698:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
8010869b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
8010869f:	c9                   	leave  
801086a0:	c3                   	ret    

801086a1 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
801086a1:	55                   	push   %ebp
801086a2:	89 e5                	mov    %esp,%ebp
801086a4:	83 ec 08             	sub    $0x8,%esp
801086a7:	8b 55 08             	mov    0x8(%ebp),%edx
801086aa:	8b 45 0c             	mov    0xc(%ebp),%eax
801086ad:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
801086b1:	88 45 f8             	mov    %al,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801086b4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
801086b8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
801086bc:	ee                   	out    %al,(%dx)
}
801086bd:	90                   	nop
801086be:	c9                   	leave  
801086bf:	c3                   	ret    

801086c0 <mouse_wait>:
static int recovery;
static int lastbtn, lastdowntick, lastclicktick;

void
mouse_wait(uchar type)
{
801086c0:	55                   	push   %ebp
801086c1:	89 e5                	mov    %esp,%ebp
801086c3:	83 ec 14             	sub    $0x14,%esp
801086c6:	8b 45 08             	mov    0x8(%ebp),%eax
801086c9:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint time_out = 100000;
801086cc:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    if(type == 0)
801086d3:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
801086d7:	75 36                	jne    8010870f <mouse_wait+0x4f>
    {
        while(--time_out)
801086d9:	eb 14                	jmp    801086ef <mouse_wait+0x2f>
        {
            if((inb(0x64) & 1) == 1)
801086db:	6a 64                	push   $0x64
801086dd:	e8 a2 ff ff ff       	call   80108684 <inb>
801086e2:	83 c4 04             	add    $0x4,%esp
801086e5:	0f b6 c0             	movzbl %al,%eax
801086e8:	83 e0 01             	and    $0x1,%eax
801086eb:	85 c0                	test   %eax,%eax
801086ed:	75 2c                	jne    8010871b <mouse_wait+0x5b>
mouse_wait(uchar type)
{
    uint time_out = 100000;
    if(type == 0)
    {
        while(--time_out)
801086ef:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
801086f3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
801086f7:	75 e2                	jne    801086db <mouse_wait+0x1b>
801086f9:	eb 24                	jmp    8010871f <mouse_wait+0x5f>
    }
    else
    {
        while(--time_out)
        {
            if((inb(0x64) & 2) == 0)
801086fb:	6a 64                	push   $0x64
801086fd:	e8 82 ff ff ff       	call   80108684 <inb>
80108702:	83 c4 04             	add    $0x4,%esp
80108705:	0f b6 c0             	movzbl %al,%eax
80108708:	83 e0 02             	and    $0x2,%eax
8010870b:	85 c0                	test   %eax,%eax
8010870d:	74 0f                	je     8010871e <mouse_wait+0x5e>
                return;
        }
    }
    else
    {
        while(--time_out)
8010870f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
80108713:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
80108717:	75 e2                	jne    801086fb <mouse_wait+0x3b>
80108719:	eb 04                	jmp    8010871f <mouse_wait+0x5f>
    if(type == 0)
    {
        while(--time_out)
        {
            if((inb(0x64) & 1) == 1)
                return;
8010871b:	90                   	nop
8010871c:	eb 01                	jmp    8010871f <mouse_wait+0x5f>
    else
    {
        while(--time_out)
        {
            if((inb(0x64) & 2) == 0)
                return;
8010871e:	90                   	nop
        }
    }
}
8010871f:	c9                   	leave  
80108720:	c3                   	ret    

80108721 <mouse_write>:

void
mouse_write(uchar word)
{
80108721:	55                   	push   %ebp
80108722:	89 e5                	mov    %esp,%ebp
80108724:	83 ec 04             	sub    $0x4,%esp
80108727:	8b 45 08             	mov    0x8(%ebp),%eax
8010872a:	88 45 fc             	mov    %al,-0x4(%ebp)
    mouse_wait(1);
8010872d:	6a 01                	push   $0x1
8010872f:	e8 8c ff ff ff       	call   801086c0 <mouse_wait>
80108734:	83 c4 04             	add    $0x4,%esp
    outb(0x64, 0xd4);
80108737:	68 d4 00 00 00       	push   $0xd4
8010873c:	6a 64                	push   $0x64
8010873e:	e8 5e ff ff ff       	call   801086a1 <outb>
80108743:	83 c4 08             	add    $0x8,%esp
    mouse_wait(1);
80108746:	6a 01                	push   $0x1
80108748:	e8 73 ff ff ff       	call   801086c0 <mouse_wait>
8010874d:	83 c4 04             	add    $0x4,%esp
    outb(0x60, word);
80108750:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
80108754:	50                   	push   %eax
80108755:	6a 60                	push   $0x60
80108757:	e8 45 ff ff ff       	call   801086a1 <outb>
8010875c:	83 c4 08             	add    $0x8,%esp
}
8010875f:	90                   	nop
80108760:	c9                   	leave  
80108761:	c3                   	ret    

80108762 <mouse_read>:

uint
mouse_read()
{
80108762:	55                   	push   %ebp
80108763:	89 e5                	mov    %esp,%ebp
    mouse_wait(0);
80108765:	6a 00                	push   $0x0
80108767:	e8 54 ff ff ff       	call   801086c0 <mouse_wait>
8010876c:	83 c4 04             	add    $0x4,%esp
    return inb(0x60);
8010876f:	6a 60                	push   $0x60
80108771:	e8 0e ff ff ff       	call   80108684 <inb>
80108776:	83 c4 04             	add    $0x4,%esp
80108779:	0f b6 c0             	movzbl %al,%eax
}
8010877c:	c9                   	leave  
8010877d:	c3                   	ret    

8010877e <mouseinit>:

void
mouseinit(void)
{
8010877e:	55                   	push   %ebp
8010877f:	89 e5                	mov    %esp,%ebp
80108781:	83 ec 18             	sub    $0x18,%esp
    uchar statustemp;

    mouse_wait(1);
80108784:	6a 01                	push   $0x1
80108786:	e8 35 ff ff ff       	call   801086c0 <mouse_wait>
8010878b:	83 c4 04             	add    $0x4,%esp
    outb(0x64, 0xa8);		//激活鼠标接口
8010878e:	68 a8 00 00 00       	push   $0xa8
80108793:	6a 64                	push   $0x64
80108795:	e8 07 ff ff ff       	call   801086a1 <outb>
8010879a:	83 c4 08             	add    $0x8,%esp

    mouse_wait(1);		//激活中断
8010879d:	6a 01                	push   $0x1
8010879f:	e8 1c ff ff ff       	call   801086c0 <mouse_wait>
801087a4:	83 c4 04             	add    $0x4,%esp
    outb(0x64, 0x20);
801087a7:	6a 20                	push   $0x20
801087a9:	6a 64                	push   $0x64
801087ab:	e8 f1 fe ff ff       	call   801086a1 <outb>
801087b0:	83 c4 08             	add    $0x8,%esp
    mouse_wait(0);
801087b3:	6a 00                	push   $0x0
801087b5:	e8 06 ff ff ff       	call   801086c0 <mouse_wait>
801087ba:	83 c4 04             	add    $0x4,%esp
    statustemp = (inb(0x60) | 2);
801087bd:	6a 60                	push   $0x60
801087bf:	e8 c0 fe ff ff       	call   80108684 <inb>
801087c4:	83 c4 04             	add    $0x4,%esp
801087c7:	83 c8 02             	or     $0x2,%eax
801087ca:	88 45 f7             	mov    %al,-0x9(%ebp)
    mouse_wait(0);
801087cd:	6a 00                	push   $0x0
801087cf:	e8 ec fe ff ff       	call   801086c0 <mouse_wait>
801087d4:	83 c4 04             	add    $0x4,%esp
    outb(0x64, 0x60);
801087d7:	6a 60                	push   $0x60
801087d9:	6a 64                	push   $0x64
801087db:	e8 c1 fe ff ff       	call   801086a1 <outb>
801087e0:	83 c4 08             	add    $0x8,%esp
    mouse_wait(1);
801087e3:	6a 01                	push   $0x1
801087e5:	e8 d6 fe ff ff       	call   801086c0 <mouse_wait>
801087ea:	83 c4 04             	add    $0x4,%esp
    outb(0x60, statustemp);
801087ed:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
801087f1:	50                   	push   %eax
801087f2:	6a 60                	push   $0x60
801087f4:	e8 a8 fe ff ff       	call   801086a1 <outb>
801087f9:	83 c4 08             	add    $0x8,%esp

    mouse_write(0xf6);		//设置鼠标为默认设置
801087fc:	68 f6 00 00 00       	push   $0xf6
80108801:	e8 1b ff ff ff       	call   80108721 <mouse_write>
80108806:	83 c4 04             	add    $0x4,%esp
    mouse_read();
80108809:	e8 54 ff ff ff       	call   80108762 <mouse_read>

    mouse_write(0xfe);		//设置鼠标采样率
8010880e:	68 fe 00 00 00       	push   $0xfe
80108813:	e8 09 ff ff ff       	call   80108721 <mouse_write>
80108818:	83 c4 04             	add    $0x4,%esp
    mouse_read();
8010881b:	e8 42 ff ff ff       	call   80108762 <mouse_read>
    mouse_write(10);
80108820:	6a 0a                	push   $0xa
80108822:	e8 fa fe ff ff       	call   80108721 <mouse_write>
80108827:	83 c4 04             	add    $0x4,%esp
    mouse_read();
8010882a:	e8 33 ff ff ff       	call   80108762 <mouse_read>

    mouse_write(0xf4);
8010882f:	68 f4 00 00 00       	push   $0xf4
80108834:	e8 e8 fe ff ff       	call   80108721 <mouse_write>
80108839:	83 c4 04             	add    $0x4,%esp
    mouse_read();
8010883c:	e8 21 ff ff ff       	call   80108762 <mouse_read>

    initlock(&mouselock, "mouse");
80108841:	83 ec 08             	sub    $0x8,%esp
80108844:	68 f2 c8 10 80       	push   $0x8010c8f2
80108849:	68 c0 36 11 80       	push   $0x801136c0
8010884e:	e8 7b c8 ff ff       	call   801050ce <initlock>
80108853:	83 c4 10             	add    $0x10,%esp
    picenable(IRQ_MOUSE);
80108856:	83 ec 0c             	sub    $0xc,%esp
80108859:	6a 0c                	push   $0xc
8010885b:	e8 d1 b7 ff ff       	call   80104031 <picenable>
80108860:	83 c4 10             	add    $0x10,%esp
    ioapicenable(IRQ_MOUSE, 0);
80108863:	83 ec 08             	sub    $0x8,%esp
80108866:	6a 00                	push   $0x0
80108868:	6a 0c                	push   $0xc
8010886a:	e8 fc a2 ff ff       	call   80102b6b <ioapicenable>
8010886f:	83 c4 10             	add    $0x10,%esp

    count = 0;
80108872:	c7 05 28 37 11 80 00 	movl   $0x0,0x80113728
80108879:	00 00 00 
    lastclicktick = lastdowntick = -1000;
8010887c:	c7 05 34 37 11 80 18 	movl   $0xfffffc18,0x80113734
80108883:	fc ff ff 
80108886:	a1 34 37 11 80       	mov    0x80113734,%eax
8010888b:	a3 38 37 11 80       	mov    %eax,0x80113738
}
80108890:	90                   	nop
80108891:	c9                   	leave  
80108892:	c3                   	ret    

80108893 <genMouseUpMessage>:

void genMouseUpMessage(int btns)
{
80108893:	55                   	push   %ebp
80108894:	89 e5                	mov    %esp,%ebp
80108896:	83 ec 38             	sub    $0x38,%esp
  message msg;
  msg.msg_type = M_MOUSE_UP;
80108899:	c7 45 cc 05 00 00 00 	movl   $0x5,-0x34(%ebp)
  msg.params[0] = btns;
801088a0:	8b 45 08             	mov    0x8(%ebp),%eax
801088a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
  handleMessage(&msg);
801088a6:	83 ec 0c             	sub    $0xc,%esp
801088a9:	8d 45 cc             	lea    -0x34(%ebp),%eax
801088ac:	50                   	push   %eax
801088ad:	e8 b7 fd ff ff       	call   80108669 <handleMessage>
801088b2:	83 c4 10             	add    $0x10,%esp
}
801088b5:	90                   	nop
801088b6:	c9                   	leave  
801088b7:	c3                   	ret    

801088b8 <genMouseMessage>:

void
genMouseMessage()
{
801088b8:	55                   	push   %ebp
801088b9:	89 e5                	mov    %esp,%ebp
801088bb:	83 ec 48             	sub    $0x48,%esp
  if (packet.x_overflow || packet.y_overflow) return;
801088be:	a1 1c 37 11 80       	mov    0x8011371c,%eax
801088c3:	85 c0                	test   %eax,%eax
801088c5:	0f 85 82 01 00 00    	jne    80108a4d <genMouseMessage+0x195>
801088cb:	a1 20 37 11 80       	mov    0x80113720,%eax
801088d0:	85 c0                	test   %eax,%eax
801088d2:	0f 85 75 01 00 00    	jne    80108a4d <genMouseMessage+0x195>
	int x = packet.x_sgn ? (0xffffff00 | (packet.x_mov & 0xff)) : (packet.x_mov & 0xff);
801088d8:	a1 00 37 11 80       	mov    0x80113700,%eax
801088dd:	85 c0                	test   %eax,%eax
801088df:	74 0c                	je     801088ed <genMouseMessage+0x35>
801088e1:	a1 08 37 11 80       	mov    0x80113708,%eax
801088e6:	0d 00 ff ff ff       	or     $0xffffff00,%eax
801088eb:	eb 08                	jmp    801088f5 <genMouseMessage+0x3d>
801088ed:	a1 08 37 11 80       	mov    0x80113708,%eax
801088f2:	0f b6 c0             	movzbl %al,%eax
801088f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int y = packet.y_sgn ? (0xffffff00 | (packet.y_mov & 0xff)) : (packet.y_mov & 0xff);
801088f8:	a1 04 37 11 80       	mov    0x80113704,%eax
801088fd:	85 c0                	test   %eax,%eax
801088ff:	74 0c                	je     8010890d <genMouseMessage+0x55>
80108901:	a1 0c 37 11 80       	mov    0x8011370c,%eax
80108906:	0d 00 ff ff ff       	or     $0xffffff00,%eax
8010890b:	eb 08                	jmp    80108915 <genMouseMessage+0x5d>
8010890d:	a1 0c 37 11 80       	mov    0x8011370c,%eax
80108912:	0f b6 c0             	movzbl %al,%eax
80108915:	89 45 f0             	mov    %eax,-0x10(%ebp)
/*	if(x == 127 || x == -127 || y == 127 || y == -127){
		x = 0;
		y = 0;
	}*/
	packet.x_mov = x;
80108918:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010891b:	a3 08 37 11 80       	mov    %eax,0x80113708
	packet.y_mov = y;
80108920:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108923:	a3 0c 37 11 80       	mov    %eax,0x8011370c

  int btns = packet.l_btn | (packet.r_btn << 1) | (packet.m_btn << 2);
80108928:	a1 10 37 11 80       	mov    0x80113710,%eax
8010892d:	8b 15 14 37 11 80    	mov    0x80113714,%edx
80108933:	01 d2                	add    %edx,%edx
80108935:	09 c2                	or     %eax,%edx
80108937:	a1 18 37 11 80       	mov    0x80113718,%eax
8010893c:	c1 e0 02             	shl    $0x2,%eax
8010893f:	09 d0                	or     %edx,%eax
80108941:	89 45 ec             	mov    %eax,-0x14(%ebp)
  message msg;
  if (packet.x_mov || packet.y_mov)
80108944:	a1 08 37 11 80       	mov    0x80113708,%eax
80108949:	85 c0                	test   %eax,%eax
8010894b:	75 09                	jne    80108956 <genMouseMessage+0x9e>
8010894d:	a1 0c 37 11 80       	mov    0x8011370c,%eax
80108952:	85 c0                	test   %eax,%eax
80108954:	74 52                	je     801089a8 <genMouseMessage+0xf0>
  {
    msg.msg_type = M_MOUSE_MOVE;
80108956:	c7 45 c0 03 00 00 00 	movl   $0x3,-0x40(%ebp)
    msg.params[0] = packet.x_mov;
8010895d:	a1 08 37 11 80       	mov    0x80113708,%eax
80108962:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    msg.params[1] = packet.y_mov;
80108965:	a1 0c 37 11 80       	mov    0x8011370c,%eax
8010896a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    msg.params[2] = btns;
8010896d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108970:	89 45 cc             	mov    %eax,-0x34(%ebp)
    lastdowntick = lastclicktick = -1000;
80108973:	c7 05 38 37 11 80 18 	movl   $0xfffffc18,0x80113738
8010897a:	fc ff ff 
8010897d:	a1 38 37 11 80       	mov    0x80113738,%eax
80108982:	a3 34 37 11 80       	mov    %eax,0x80113734
    if (btns != lastbtn) genMouseUpMessage(btns);
80108987:	a1 30 37 11 80       	mov    0x80113730,%eax
8010898c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
8010898f:	0f 84 9f 00 00 00    	je     80108a34 <genMouseMessage+0x17c>
80108995:	83 ec 0c             	sub    $0xc,%esp
80108998:	ff 75 ec             	pushl  -0x14(%ebp)
8010899b:	e8 f3 fe ff ff       	call   80108893 <genMouseUpMessage>
801089a0:	83 c4 10             	add    $0x10,%esp
801089a3:	e9 8c 00 00 00       	jmp    80108a34 <genMouseMessage+0x17c>
  }
  else if (btns)
801089a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
801089ac:	74 19                	je     801089c7 <genMouseMessage+0x10f>
  {
    msg.msg_type = M_MOUSE_DOWN;
801089ae:	c7 45 c0 04 00 00 00 	movl   $0x4,-0x40(%ebp)
    msg.params[0] = btns;
801089b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
801089b8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    lastdowntick = packet.tick;
801089bb:	a1 24 37 11 80       	mov    0x80113724,%eax
801089c0:	a3 34 37 11 80       	mov    %eax,0x80113734
801089c5:	eb 6d                	jmp    80108a34 <genMouseMessage+0x17c>
  }
  else if (packet.tick - lastdowntick < 30)
801089c7:	a1 24 37 11 80       	mov    0x80113724,%eax
801089cc:	8b 15 34 37 11 80    	mov    0x80113734,%edx
801089d2:	29 d0                	sub    %edx,%eax
801089d4:	83 f8 1d             	cmp    $0x1d,%eax
801089d7:	77 4d                	ja     80108a26 <genMouseMessage+0x16e>
  {
    if (lastbtn & 1) msg.msg_type = M_MOUSE_LEFT_CLICK;
801089d9:	a1 30 37 11 80       	mov    0x80113730,%eax
801089de:	83 e0 01             	and    $0x1,%eax
801089e1:	85 c0                	test   %eax,%eax
801089e3:	74 09                	je     801089ee <genMouseMessage+0x136>
801089e5:	c7 45 c0 06 00 00 00 	movl   $0x6,-0x40(%ebp)
801089ec:	eb 07                	jmp    801089f5 <genMouseMessage+0x13d>
    else msg.msg_type = M_MOUSE_RIGHT_CLICK;
801089ee:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
    if (packet.tick - lastclicktick < 60)
801089f5:	a1 24 37 11 80       	mov    0x80113724,%eax
801089fa:	8b 15 38 37 11 80    	mov    0x80113738,%edx
80108a00:	29 d0                	sub    %edx,%eax
80108a02:	83 f8 3b             	cmp    $0x3b,%eax
80108a05:	77 13                	ja     80108a1a <genMouseMessage+0x162>
    {
      msg.msg_type = M_MOUSE_DBCLICK;
80108a07:	c7 45 c0 08 00 00 00 	movl   $0x8,-0x40(%ebp)
      lastclicktick = -1000;
80108a0e:	c7 05 38 37 11 80 18 	movl   $0xfffffc18,0x80113738
80108a15:	fc ff ff 
80108a18:	eb 1a                	jmp    80108a34 <genMouseMessage+0x17c>
    }
    else lastclicktick = packet.tick;
80108a1a:	a1 24 37 11 80       	mov    0x80113724,%eax
80108a1f:	a3 38 37 11 80       	mov    %eax,0x80113738
80108a24:	eb 0e                	jmp    80108a34 <genMouseMessage+0x17c>
  }
  else
  {
    genMouseUpMessage(btns);
80108a26:	83 ec 0c             	sub    $0xc,%esp
80108a29:	ff 75 ec             	pushl  -0x14(%ebp)
80108a2c:	e8 62 fe ff ff       	call   80108893 <genMouseUpMessage>
80108a31:	83 c4 10             	add    $0x10,%esp
  }
  lastbtn = btns;
80108a34:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108a37:	a3 30 37 11 80       	mov    %eax,0x80113730
  handleMessage(&msg);
80108a3c:	83 ec 0c             	sub    $0xc,%esp
80108a3f:	8d 45 c0             	lea    -0x40(%ebp),%eax
80108a42:	50                   	push   %eax
80108a43:	e8 21 fc ff ff       	call   80108669 <handleMessage>
80108a48:	83 c4 10             	add    $0x10,%esp
80108a4b:	eb 01                	jmp    80108a4e <genMouseMessage+0x196>
}

void
genMouseMessage()
{
  if (packet.x_overflow || packet.y_overflow) return;
80108a4d:	90                   	nop
  {
    genMouseUpMessage(btns);
  }
  lastbtn = btns;
  handleMessage(&msg);
}
80108a4e:	c9                   	leave  
80108a4f:	c3                   	ret    

80108a50 <mouseintr>:


void
mouseintr(uint tick)
{
80108a50:	55                   	push   %ebp
80108a51:	89 e5                	mov    %esp,%ebp
80108a53:	83 ec 18             	sub    $0x18,%esp
  acquire(&mouselock);
80108a56:	83 ec 0c             	sub    $0xc,%esp
80108a59:	68 c0 36 11 80       	push   $0x801136c0
80108a5e:	e8 8d c6 ff ff       	call   801050f0 <acquire>
80108a63:	83 c4 10             	add    $0x10,%esp
  int state;
  while (((state = inb(0x64)) & 1) == 1) {
80108a66:	e9 76 01 00 00       	jmp    80108be1 <mouseintr+0x191>
    int data = inb(0x60);
80108a6b:	83 ec 0c             	sub    $0xc,%esp
80108a6e:	6a 60                	push   $0x60
80108a70:	e8 0f fc ff ff       	call   80108684 <inb>
80108a75:	83 c4 10             	add    $0x10,%esp
80108a78:	0f b6 c0             	movzbl %al,%eax
80108a7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    count++;
80108a7e:	a1 28 37 11 80       	mov    0x80113728,%eax
80108a83:	83 c0 01             	add    $0x1,%eax
80108a86:	a3 28 37 11 80       	mov    %eax,0x80113728

	  if (recovery == 0 && (data & 255) == 0)
80108a8b:	a1 2c 37 11 80       	mov    0x8011372c,%eax
80108a90:	85 c0                	test   %eax,%eax
80108a92:	75 16                	jne    80108aaa <mouseintr+0x5a>
80108a94:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108a97:	0f b6 c0             	movzbl %al,%eax
80108a9a:	85 c0                	test   %eax,%eax
80108a9c:	75 0c                	jne    80108aaa <mouseintr+0x5a>
		  recovery = 1;
80108a9e:	c7 05 2c 37 11 80 01 	movl   $0x1,0x8011372c
80108aa5:	00 00 00 
80108aa8:	eb 41                	jmp    80108aeb <mouseintr+0x9b>
	  else if (recovery == 1 && (data & 255) == 0)
80108aaa:	a1 2c 37 11 80       	mov    0x8011372c,%eax
80108aaf:	83 f8 01             	cmp    $0x1,%eax
80108ab2:	75 16                	jne    80108aca <mouseintr+0x7a>
80108ab4:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108ab7:	0f b6 c0             	movzbl %al,%eax
80108aba:	85 c0                	test   %eax,%eax
80108abc:	75 0c                	jne    80108aca <mouseintr+0x7a>
		  recovery = 2;
80108abe:	c7 05 2c 37 11 80 02 	movl   $0x2,0x8011372c
80108ac5:	00 00 00 
80108ac8:	eb 21                	jmp    80108aeb <mouseintr+0x9b>
	  else if ((data & 255) == 12)
80108aca:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108acd:	0f b6 c0             	movzbl %al,%eax
80108ad0:	83 f8 0c             	cmp    $0xc,%eax
80108ad3:	75 0c                	jne    80108ae1 <mouseintr+0x91>
		  recovery = 0;
80108ad5:	c7 05 2c 37 11 80 00 	movl   $0x0,0x8011372c
80108adc:	00 00 00 
80108adf:	eb 0a                	jmp    80108aeb <mouseintr+0x9b>
	  else
		  recovery = -1;
80108ae1:	c7 05 2c 37 11 80 ff 	movl   $0xffffffff,0x8011372c
80108ae8:	ff ff ff 

    switch(count)
80108aeb:	a1 28 37 11 80       	mov    0x80113728,%eax
80108af0:	83 f8 02             	cmp    $0x2,%eax
80108af3:	0f 84 88 00 00 00    	je     80108b81 <mouseintr+0x131>
80108af9:	83 f8 03             	cmp    $0x3,%eax
80108afc:	0f 84 89 00 00 00    	je     80108b8b <mouseintr+0x13b>
80108b02:	83 f8 01             	cmp    $0x1,%eax
80108b05:	0f 85 92 00 00 00    	jne    80108b9d <mouseintr+0x14d>
    {
        case 1: if(data & 0x08)
80108b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b0e:	83 e0 08             	and    $0x8,%eax
80108b11:	85 c0                	test   %eax,%eax
80108b13:	74 60                	je     80108b75 <mouseintr+0x125>
                {
                    packet.y_overflow = (data >> 7) & 0x1;
80108b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b18:	c1 f8 07             	sar    $0x7,%eax
80108b1b:	83 e0 01             	and    $0x1,%eax
80108b1e:	a3 20 37 11 80       	mov    %eax,0x80113720
                    packet.x_overflow = (data >> 6) & 0x1;
80108b23:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b26:	c1 f8 06             	sar    $0x6,%eax
80108b29:	83 e0 01             	and    $0x1,%eax
80108b2c:	a3 1c 37 11 80       	mov    %eax,0x8011371c
                    packet.y_sgn = (data >> 5) & 0x1;
80108b31:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b34:	c1 f8 05             	sar    $0x5,%eax
80108b37:	83 e0 01             	and    $0x1,%eax
80108b3a:	a3 04 37 11 80       	mov    %eax,0x80113704
                    packet.x_sgn = (data >> 4) & 0x1;
80108b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b42:	c1 f8 04             	sar    $0x4,%eax
80108b45:	83 e0 01             	and    $0x1,%eax
80108b48:	a3 00 37 11 80       	mov    %eax,0x80113700
                    packet.m_btn = (data >> 2) & 0x1;
80108b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b50:	c1 f8 02             	sar    $0x2,%eax
80108b53:	83 e0 01             	and    $0x1,%eax
80108b56:	a3 18 37 11 80       	mov    %eax,0x80113718
                    packet.r_btn = (data >> 1) & 0x1;
80108b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b5e:	d1 f8                	sar    %eax
80108b60:	83 e0 01             	and    $0x1,%eax
80108b63:	a3 14 37 11 80       	mov    %eax,0x80113714
                    packet.l_btn = (data >> 0) & 0x1;
80108b68:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b6b:	83 e0 01             	and    $0x1,%eax
80108b6e:	a3 10 37 11 80       	mov    %eax,0x80113710
                    break;
80108b73:	eb 33                	jmp    80108ba8 <mouseintr+0x158>
                }
                else
                {
                    count = 0;
80108b75:	c7 05 28 37 11 80 00 	movl   $0x0,0x80113728
80108b7c:	00 00 00 
                    break;
80108b7f:	eb 27                	jmp    80108ba8 <mouseintr+0x158>
                }

        case 2:  packet.x_mov = data;
80108b81:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b84:	a3 08 37 11 80       	mov    %eax,0x80113708
                 break;
80108b89:	eb 1d                	jmp    80108ba8 <mouseintr+0x158>
        case 3:  packet.y_mov = data;
80108b8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108b8e:	a3 0c 37 11 80       	mov    %eax,0x8011370c
                 packet.tick = tick;
80108b93:	8b 45 08             	mov    0x8(%ebp),%eax
80108b96:	a3 24 37 11 80       	mov    %eax,0x80113724
                 break;
80108b9b:	eb 0b                	jmp    80108ba8 <mouseintr+0x158>
        default: count=0;    break;
80108b9d:	c7 05 28 37 11 80 00 	movl   $0x0,0x80113728
80108ba4:	00 00 00 
80108ba7:	90                   	nop
    }

	  if (recovery == 2)
80108ba8:	a1 2c 37 11 80       	mov    0x8011372c,%eax
80108bad:	83 f8 02             	cmp    $0x2,%eax
80108bb0:	75 16                	jne    80108bc8 <mouseintr+0x178>
	  {
		  count = 0;
80108bb2:	c7 05 28 37 11 80 00 	movl   $0x0,0x80113728
80108bb9:	00 00 00 
		  recovery = -1;
80108bbc:	c7 05 2c 37 11 80 ff 	movl   $0xffffffff,0x8011372c
80108bc3:	ff ff ff 
80108bc6:	eb 19                	jmp    80108be1 <mouseintr+0x191>
	  }
	  else if (count == 3)
80108bc8:	a1 28 37 11 80       	mov    0x80113728,%eax
80108bcd:	83 f8 03             	cmp    $0x3,%eax
80108bd0:	75 0f                	jne    80108be1 <mouseintr+0x191>
	  {
		  count = 0;
80108bd2:	c7 05 28 37 11 80 00 	movl   $0x0,0x80113728
80108bd9:	00 00 00 
		  genMouseMessage();
80108bdc:	e8 d7 fc ff ff       	call   801088b8 <genMouseMessage>
void
mouseintr(uint tick)
{
  acquire(&mouselock);
  int state;
  while (((state = inb(0x64)) & 1) == 1) {
80108be1:	83 ec 0c             	sub    $0xc,%esp
80108be4:	6a 64                	push   $0x64
80108be6:	e8 99 fa ff ff       	call   80108684 <inb>
80108beb:	83 c4 10             	add    $0x10,%esp
80108bee:	0f b6 c0             	movzbl %al,%eax
80108bf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
80108bf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108bf7:	83 e0 01             	and    $0x1,%eax
80108bfa:	85 c0                	test   %eax,%eax
80108bfc:	0f 85 69 fe ff ff    	jne    80108a6b <mouseintr+0x1b>
		  count = 0;
		  genMouseMessage();
	  }
	}

  release(&mouselock);
80108c02:	83 ec 0c             	sub    $0xc,%esp
80108c05:	68 c0 36 11 80       	push   $0x801136c0
80108c0a:	e8 48 c5 ff ff       	call   80105157 <release>
80108c0f:	83 c4 10             	add    $0x10,%esp
}
80108c12:	90                   	nop
80108c13:	c9                   	leave  
80108c14:	c3                   	ret    

80108c15 <drawPoint>:
#include "gui_base.h"
#include "mouse_shape.h"
#include "character.h"


void drawPoint(RGB* color, RGB origin) {
80108c15:	55                   	push   %ebp
80108c16:	89 e5                	mov    %esp,%ebp
    color->R = origin.R;
80108c18:	0f b6 55 0e          	movzbl 0xe(%ebp),%edx
80108c1c:	8b 45 08             	mov    0x8(%ebp),%eax
80108c1f:	88 50 02             	mov    %dl,0x2(%eax)
    color->G = origin.G;
80108c22:	0f b6 55 0d          	movzbl 0xd(%ebp),%edx
80108c26:	8b 45 08             	mov    0x8(%ebp),%eax
80108c29:	88 50 01             	mov    %dl,0x1(%eax)
    color->B = origin.B;
80108c2c:	0f b6 55 0c          	movzbl 0xc(%ebp),%edx
80108c30:	8b 45 08             	mov    0x8(%ebp),%eax
80108c33:	88 10                	mov    %dl,(%eax)
}
80108c35:	90                   	nop
80108c36:	5d                   	pop    %ebp
80108c37:	c3                   	ret    

80108c38 <drawPointAlpha>:

void drawPointAlpha(RGB* color, RGBA origin) {
80108c38:	55                   	push   %ebp
80108c39:	89 e5                	mov    %esp,%ebp
80108c3b:	83 ec 1c             	sub    $0x1c,%esp
    float alpha;
    if (origin.A == 255) {
80108c3e:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
80108c42:	3c ff                	cmp    $0xff,%al
80108c44:	75 22                	jne    80108c68 <drawPointAlpha+0x30>
        color->R = origin.R;
80108c46:	0f b6 55 0f          	movzbl 0xf(%ebp),%edx
80108c4a:	8b 45 08             	mov    0x8(%ebp),%eax
80108c4d:	88 50 02             	mov    %dl,0x2(%eax)
        color->G = origin.G;
80108c50:	0f b6 55 0e          	movzbl 0xe(%ebp),%edx
80108c54:	8b 45 08             	mov    0x8(%ebp),%eax
80108c57:	88 50 01             	mov    %dl,0x1(%eax)
        color->B = origin.B;
80108c5a:	0f b6 55 0d          	movzbl 0xd(%ebp),%edx
80108c5e:	8b 45 08             	mov    0x8(%ebp),%eax
80108c61:	88 10                	mov    %dl,(%eax)
        return;
80108c63:	e9 ed 00 00 00       	jmp    80108d55 <drawPointAlpha+0x11d>
    }
    if (origin.A == 0) {
80108c68:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
80108c6c:	84 c0                	test   %al,%al
80108c6e:	0f 84 e0 00 00 00    	je     80108d54 <drawPointAlpha+0x11c>
        return;
    }
    alpha = (float)origin.A / 255;
80108c74:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
80108c78:	0f b6 c0             	movzbl %al,%eax
80108c7b:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
80108c7f:	df 45 e4             	fild   -0x1c(%ebp)
80108c82:	d9 05 40 07 11 80    	flds   0x80110740
80108c88:	de f9                	fdivrp %st,%st(1)
80108c8a:	d9 5d fc             	fstps  -0x4(%ebp)
    color->R = color->R * (1 - alpha) + origin.R * alpha;
80108c8d:	8b 45 08             	mov    0x8(%ebp),%eax
80108c90:	0f b6 40 02          	movzbl 0x2(%eax),%eax
80108c94:	0f b6 c0             	movzbl %al,%eax
80108c97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108c9a:	db 45 e4             	fildl  -0x1c(%ebp)
80108c9d:	d9 e8                	fld1   
80108c9f:	d8 65 fc             	fsubs  -0x4(%ebp)
80108ca2:	de c9                	fmulp  %st,%st(1)
80108ca4:	0f b6 45 0f          	movzbl 0xf(%ebp),%eax
80108ca8:	0f b6 c0             	movzbl %al,%eax
80108cab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108cae:	db 45 e4             	fildl  -0x1c(%ebp)
80108cb1:	d8 4d fc             	fmuls  -0x4(%ebp)
80108cb4:	de c1                	faddp  %st,%st(1)
80108cb6:	d9 7d ee             	fnstcw -0x12(%ebp)
80108cb9:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
80108cbd:	b4 0c                	mov    $0xc,%ah
80108cbf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
80108cc3:	d9 6d ec             	fldcw  -0x14(%ebp)
80108cc6:	df 5d ea             	fistp  -0x16(%ebp)
80108cc9:	d9 6d ee             	fldcw  -0x12(%ebp)
80108ccc:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
80108cd0:	89 c2                	mov    %eax,%edx
80108cd2:	8b 45 08             	mov    0x8(%ebp),%eax
80108cd5:	88 50 02             	mov    %dl,0x2(%eax)
    color->G = color->G * (1 - alpha) + origin.G * alpha;
80108cd8:	8b 45 08             	mov    0x8(%ebp),%eax
80108cdb:	0f b6 40 01          	movzbl 0x1(%eax),%eax
80108cdf:	0f b6 c0             	movzbl %al,%eax
80108ce2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108ce5:	db 45 e4             	fildl  -0x1c(%ebp)
80108ce8:	d9 e8                	fld1   
80108cea:	d8 65 fc             	fsubs  -0x4(%ebp)
80108ced:	de c9                	fmulp  %st,%st(1)
80108cef:	0f b6 45 0e          	movzbl 0xe(%ebp),%eax
80108cf3:	0f b6 c0             	movzbl %al,%eax
80108cf6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108cf9:	db 45 e4             	fildl  -0x1c(%ebp)
80108cfc:	d8 4d fc             	fmuls  -0x4(%ebp)
80108cff:	de c1                	faddp  %st,%st(1)
80108d01:	d9 6d ec             	fldcw  -0x14(%ebp)
80108d04:	df 5d ea             	fistp  -0x16(%ebp)
80108d07:	d9 6d ee             	fldcw  -0x12(%ebp)
80108d0a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
80108d0e:	89 c2                	mov    %eax,%edx
80108d10:	8b 45 08             	mov    0x8(%ebp),%eax
80108d13:	88 50 01             	mov    %dl,0x1(%eax)
    color->B = color->B * (1 - alpha) + origin.B * alpha;
80108d16:	8b 45 08             	mov    0x8(%ebp),%eax
80108d19:	0f b6 00             	movzbl (%eax),%eax
80108d1c:	0f b6 c0             	movzbl %al,%eax
80108d1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108d22:	db 45 e4             	fildl  -0x1c(%ebp)
80108d25:	d9 e8                	fld1   
80108d27:	d8 65 fc             	fsubs  -0x4(%ebp)
80108d2a:	de c9                	fmulp  %st,%st(1)
80108d2c:	0f b6 45 0d          	movzbl 0xd(%ebp),%eax
80108d30:	0f b6 c0             	movzbl %al,%eax
80108d33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108d36:	db 45 e4             	fildl  -0x1c(%ebp)
80108d39:	d8 4d fc             	fmuls  -0x4(%ebp)
80108d3c:	de c1                	faddp  %st,%st(1)
80108d3e:	d9 6d ec             	fldcw  -0x14(%ebp)
80108d41:	df 5d ea             	fistp  -0x16(%ebp)
80108d44:	d9 6d ee             	fldcw  -0x12(%ebp)
80108d47:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
80108d4b:	89 c2                	mov    %eax,%edx
80108d4d:	8b 45 08             	mov    0x8(%ebp),%eax
80108d50:	88 10                	mov    %dl,(%eax)
80108d52:	eb 01                	jmp    80108d55 <drawPointAlpha+0x11d>
        color->G = origin.G;
        color->B = origin.B;
        return;
    }
    if (origin.A == 0) {
        return;
80108d54:	90                   	nop
    }
    alpha = (float)origin.A / 255;
    color->R = color->R * (1 - alpha) + origin.R * alpha;
    color->G = color->G * (1 - alpha) + origin.G * alpha;
    color->B = color->B * (1 - alpha) + origin.B * alpha;
}
80108d55:	c9                   	leave  
80108d56:	c3                   	ret    

80108d57 <drawCharacter>:

void drawCharacter(RGB *buf, Point p, Size s, char ch, RGBA color) {
80108d57:	55                   	push   %ebp
80108d58:	89 e5                	mov    %esp,%ebp
80108d5a:	83 ec 14             	sub    $0x14,%esp
80108d5d:	8b 45 1c             	mov    0x1c(%ebp),%eax
80108d60:	88 45 ec             	mov    %al,-0x14(%ebp)
    int i, j;
    RGB *t;
    int ord = ch - 0x20; // omit control ASCII code.
80108d63:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
80108d67:	83 e8 20             	sub    $0x20,%eax
80108d6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ord < 0 || ord >= (CHARACTER_NUMBER - 1)) {
80108d6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80108d71:	0f 88 d7 00 00 00    	js     80108e4e <drawCharacter+0xf7>
80108d77:	83 7d f4 5e          	cmpl   $0x5e,-0xc(%ebp)
80108d7b:	0f 8f cd 00 00 00    	jg     80108e4e <drawCharacter+0xf7>
        return;
    }

    for (i = 0; i < CHARACTER_HEIGHT; i++) {
80108d81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80108d88:	e9 b5 00 00 00       	jmp    80108e42 <drawCharacter+0xeb>
        if (p.y + i > s.h || p.y + i < 0) {
80108d8d:	8b 55 10             	mov    0x10(%ebp),%edx
80108d90:	8b 45 fc             	mov    -0x4(%ebp),%eax
80108d93:	01 c2                	add    %eax,%edx
80108d95:	8b 45 14             	mov    0x14(%ebp),%eax
80108d98:	39 c2                	cmp    %eax,%edx
80108d9a:	0f 8f af 00 00 00    	jg     80108e4f <drawCharacter+0xf8>
80108da0:	8b 55 10             	mov    0x10(%ebp),%edx
80108da3:	8b 45 fc             	mov    -0x4(%ebp),%eax
80108da6:	01 d0                	add    %edx,%eax
80108da8:	85 c0                	test   %eax,%eax
80108daa:	0f 88 9f 00 00 00    	js     80108e4f <drawCharacter+0xf8>
            break;
        }
        for (j = 0; j < CHARACTER_WIDTH; j++) {
80108db0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
80108db7:	eb 7b                	jmp    80108e34 <drawCharacter+0xdd>
            if (character[ord][i][j] == 1) {
80108db9:	8b 55 fc             	mov    -0x4(%ebp),%edx
80108dbc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
80108dbf:	89 d0                	mov    %edx,%eax
80108dc1:	c1 e0 03             	shl    $0x3,%eax
80108dc4:	01 d0                	add    %edx,%eax
80108dc6:	69 d1 a2 00 00 00    	imul   $0xa2,%ecx,%edx
80108dcc:	01 c2                	add    %eax,%edx
80108dce:	8b 45 f8             	mov    -0x8(%ebp),%eax
80108dd1:	01 d0                	add    %edx,%eax
80108dd3:	05 20 cb 10 80       	add    $0x8010cb20,%eax
80108dd8:	0f b6 00             	movzbl (%eax),%eax
80108ddb:	3c 01                	cmp    $0x1,%al
80108ddd:	75 51                	jne    80108e30 <drawCharacter+0xd9>
                if (p.x + j > s.w || p.x + j < 0) {
80108ddf:	8b 55 0c             	mov    0xc(%ebp),%edx
80108de2:	8b 45 f8             	mov    -0x8(%ebp),%eax
80108de5:	01 c2                	add    %eax,%edx
80108de7:	8b 45 18             	mov    0x18(%ebp),%eax
80108dea:	39 c2                	cmp    %eax,%edx
80108dec:	7f 50                	jg     80108e3e <drawCharacter+0xe7>
80108dee:	8b 55 0c             	mov    0xc(%ebp),%edx
80108df1:	8b 45 f8             	mov    -0x8(%ebp),%eax
80108df4:	01 d0                	add    %edx,%eax
80108df6:	85 c0                	test   %eax,%eax
80108df8:	78 44                	js     80108e3e <drawCharacter+0xe7>
                    break;
                }
                t = buf + (p.y + i) * s.w + p.x + j;
80108dfa:	8b 55 10             	mov    0x10(%ebp),%edx
80108dfd:	8b 45 fc             	mov    -0x4(%ebp),%eax
80108e00:	01 c2                	add    %eax,%edx
80108e02:	8b 45 18             	mov    0x18(%ebp),%eax
80108e05:	0f af c2             	imul   %edx,%eax
80108e08:	89 c2                	mov    %eax,%edx
80108e0a:	8b 45 0c             	mov    0xc(%ebp),%eax
80108e0d:	01 c2                	add    %eax,%edx
80108e0f:	8b 45 f8             	mov    -0x8(%ebp),%eax
80108e12:	01 c2                	add    %eax,%edx
80108e14:	89 d0                	mov    %edx,%eax
80108e16:	01 c0                	add    %eax,%eax
80108e18:	01 c2                	add    %eax,%edx
80108e1a:	8b 45 08             	mov    0x8(%ebp),%eax
80108e1d:	01 d0                	add    %edx,%eax
80108e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                drawPointAlpha(t, color);
80108e22:	ff 75 20             	pushl  0x20(%ebp)
80108e25:	ff 75 f0             	pushl  -0x10(%ebp)
80108e28:	e8 0b fe ff ff       	call   80108c38 <drawPointAlpha>
80108e2d:	83 c4 08             	add    $0x8,%esp

    for (i = 0; i < CHARACTER_HEIGHT; i++) {
        if (p.y + i > s.h || p.y + i < 0) {
            break;
        }
        for (j = 0; j < CHARACTER_WIDTH; j++) {
80108e30:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
80108e34:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
80108e38:	0f 8e 7b ff ff ff    	jle    80108db9 <drawCharacter+0x62>
    int ord = ch - 0x20; // omit control ASCII code.
    if (ord < 0 || ord >= (CHARACTER_NUMBER - 1)) {
        return;
    }

    for (i = 0; i < CHARACTER_HEIGHT; i++) {
80108e3e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80108e42:	83 7d fc 11          	cmpl   $0x11,-0x4(%ebp)
80108e46:	0f 8e 41 ff ff ff    	jle    80108d8d <drawCharacter+0x36>
80108e4c:	eb 01                	jmp    80108e4f <drawCharacter+0xf8>
void drawCharacter(RGB *buf, Point p, Size s, char ch, RGBA color) {
    int i, j;
    RGB *t;
    int ord = ch - 0x20; // omit control ASCII code.
    if (ord < 0 || ord >= (CHARACTER_NUMBER - 1)) {
        return;
80108e4e:	90                   	nop
                t = buf + (p.y + i) * s.w + p.x + j;
                drawPointAlpha(t, color);
            }
        }
    }
}
80108e4f:	c9                   	leave  
80108e50:	c3                   	ret    

80108e51 <drawString>:

void drawString(RGB *buf, Point p, Size s, char *str, RGBA color) {
80108e51:	55                   	push   %ebp
80108e52:	89 e5                	mov    %esp,%ebp
80108e54:	83 ec 10             	sub    $0x10,%esp
    int offset_x = 0;
80108e57:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    while (*str != '\0') {
80108e5e:	eb 3d                	jmp    80108e9d <drawString+0x4c>
        drawCharacter(buf, (Point){p.x+offset_x, p.y}, s, *str, color);
80108e60:	8b 45 1c             	mov    0x1c(%ebp),%eax
80108e63:	0f b6 00             	movzbl (%eax),%eax
80108e66:	0f be c0             	movsbl %al,%eax
80108e69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80108e6c:	8b 55 fc             	mov    -0x4(%ebp),%edx
80108e6f:	01 ca                	add    %ecx,%edx
80108e71:	89 55 f4             	mov    %edx,-0xc(%ebp)
80108e74:	8b 55 10             	mov    0x10(%ebp),%edx
80108e77:	89 55 f8             	mov    %edx,-0x8(%ebp)
80108e7a:	ff 75 20             	pushl  0x20(%ebp)
80108e7d:	50                   	push   %eax
80108e7e:	ff 75 18             	pushl  0x18(%ebp)
80108e81:	ff 75 14             	pushl  0x14(%ebp)
80108e84:	ff 75 f8             	pushl  -0x8(%ebp)
80108e87:	ff 75 f4             	pushl  -0xc(%ebp)
80108e8a:	ff 75 08             	pushl  0x8(%ebp)
80108e8d:	e8 c5 fe ff ff       	call   80108d57 <drawCharacter>
80108e92:	83 c4 1c             	add    $0x1c,%esp
        offset_x += CHARACTER_WIDTH;
80108e95:	83 45 fc 09          	addl   $0x9,-0x4(%ebp)
        str++;
80108e99:	83 45 1c 01          	addl   $0x1,0x1c(%ebp)
}

void drawString(RGB *buf, Point p, Size s, char *str, RGBA color) {
    int offset_x = 0;

    while (*str != '\0') {
80108e9d:	8b 45 1c             	mov    0x1c(%ebp),%eax
80108ea0:	0f b6 00             	movzbl (%eax),%eax
80108ea3:	84 c0                	test   %al,%al
80108ea5:	75 b9                	jne    80108e60 <drawString+0xf>
        drawCharacter(buf, (Point){p.x+offset_x, p.y}, s, *str, color);
        offset_x += CHARACTER_WIDTH;
        str++;
    }
}
80108ea7:	90                   	nop
80108ea8:	c9                   	leave  
80108ea9:	c3                   	ret    

80108eaa <drawRect>:

void drawRect(RGB *buf, Point p, Size s, RGB color, Size rect_size) {
80108eaa:	55                   	push   %ebp
80108eab:	89 e5                	mov    %esp,%ebp
80108ead:	83 ec 20             	sub    $0x20,%esp
    struct RGB * t;
    int draw_h = rect_size.h;
80108eb0:	8b 45 20             	mov    0x20(%ebp),%eax
80108eb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int draw_w = rect_size.w;
80108eb6:	8b 45 24             	mov    0x24(%ebp),%eax
80108eb9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if (draw_h > s.h - p.y) {
80108ebc:	8b 55 14             	mov    0x14(%ebp),%edx
80108ebf:	8b 45 10             	mov    0x10(%ebp),%eax
80108ec2:	29 c2                	sub    %eax,%edx
80108ec4:	89 d0                	mov    %edx,%eax
80108ec6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
80108ec9:	7d 0d                	jge    80108ed8 <drawRect+0x2e>
        draw_h = s.h - p.y;
80108ecb:	8b 55 14             	mov    0x14(%ebp),%edx
80108ece:	8b 45 10             	mov    0x10(%ebp),%eax
80108ed1:	29 c2                	sub    %eax,%edx
80108ed3:	89 d0                	mov    %edx,%eax
80108ed5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

    if (draw_w > s.w - p.x) {
80108ed8:	8b 55 18             	mov    0x18(%ebp),%edx
80108edb:	8b 45 0c             	mov    0xc(%ebp),%eax
80108ede:	29 c2                	sub    %eax,%edx
80108ee0:	89 d0                	mov    %edx,%eax
80108ee2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80108ee5:	7d 0d                	jge    80108ef4 <drawRect+0x4a>
        draw_w = s.w - p.x;
80108ee7:	8b 55 18             	mov    0x18(%ebp),%edx
80108eea:	8b 45 0c             	mov    0xc(%ebp),%eax
80108eed:	29 c2                	sub    %eax,%edx
80108eef:	89 d0                	mov    %edx,%eax
80108ef1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }

    for (int i = 0; i < draw_h; i++) {
80108ef4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80108efb:	eb 52                	jmp    80108f4f <drawRect+0xa5>
        for(int j = 0; j < draw_w; j++) {
80108efd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80108f04:	eb 3d                	jmp    80108f43 <drawRect+0x99>
            t = buf + (p.y + i) * s.w + p.x + j;
80108f06:	8b 55 10             	mov    0x10(%ebp),%edx
80108f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108f0c:	01 c2                	add    %eax,%edx
80108f0e:	8b 45 18             	mov    0x18(%ebp),%eax
80108f11:	0f af c2             	imul   %edx,%eax
80108f14:	89 c2                	mov    %eax,%edx
80108f16:	8b 45 0c             	mov    0xc(%ebp),%eax
80108f19:	01 c2                	add    %eax,%edx
80108f1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108f1e:	01 c2                	add    %eax,%edx
80108f20:	89 d0                	mov    %edx,%eax
80108f22:	01 c0                	add    %eax,%eax
80108f24:	01 c2                	add    %eax,%edx
80108f26:	8b 45 08             	mov    0x8(%ebp),%eax
80108f29:	01 d0                	add    %edx,%eax
80108f2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            *t = color;
80108f2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108f31:	0f b7 55 1c          	movzwl 0x1c(%ebp),%edx
80108f35:	66 89 10             	mov    %dx,(%eax)
80108f38:	0f b6 55 1e          	movzbl 0x1e(%ebp),%edx
80108f3c:	88 50 02             	mov    %dl,0x2(%eax)
    if (draw_w > s.w - p.x) {
        draw_w = s.w - p.x;
    }

    for (int i = 0; i < draw_h; i++) {
        for(int j = 0; j < draw_w; j++) {
80108f3f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80108f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108f46:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80108f49:	7c bb                	jl     80108f06 <drawRect+0x5c>

    if (draw_w > s.w - p.x) {
        draw_w = s.w - p.x;
    }

    for (int i = 0; i < draw_h; i++) {
80108f4b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80108f4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108f52:	3b 45 fc             	cmp    -0x4(%ebp),%eax
80108f55:	7c a6                	jl     80108efd <drawRect+0x53>
        for(int j = 0; j < draw_w; j++) {
            t = buf + (p.y + i) * s.w + p.x + j;
            *t = color;
        }
    }
}
80108f57:	90                   	nop
80108f58:	c9                   	leave  
80108f59:	c3                   	ret    

80108f5a <drawBorder>:

void drawBorder(RGB* buf, Point p, Size s, RGB color, Size rect_size, int border) {
80108f5a:	55                   	push   %ebp
80108f5b:	89 e5                	mov    %esp,%ebp
80108f5d:	83 ec 40             	sub    $0x40,%esp
    drawRect(buf, p, s, color, (Size){border, rect_size.w});
80108f60:	8b 45 28             	mov    0x28(%ebp),%eax
80108f63:	89 45 c8             	mov    %eax,-0x38(%ebp)
80108f66:	8b 45 24             	mov    0x24(%ebp),%eax
80108f69:	89 45 cc             	mov    %eax,-0x34(%ebp)
80108f6c:	ff 75 cc             	pushl  -0x34(%ebp)
80108f6f:	ff 75 c8             	pushl  -0x38(%ebp)
80108f72:	83 ec 04             	sub    $0x4,%esp
80108f75:	89 e0                	mov    %esp,%eax
80108f77:	0f b7 55 1c          	movzwl 0x1c(%ebp),%edx
80108f7b:	66 89 10             	mov    %dx,(%eax)
80108f7e:	0f b6 55 1e          	movzbl 0x1e(%ebp),%edx
80108f82:	88 50 02             	mov    %dl,0x2(%eax)
80108f85:	ff 75 18             	pushl  0x18(%ebp)
80108f88:	ff 75 14             	pushl  0x14(%ebp)
80108f8b:	ff 75 10             	pushl  0x10(%ebp)
80108f8e:	ff 75 0c             	pushl  0xc(%ebp)
80108f91:	ff 75 08             	pushl  0x8(%ebp)
80108f94:	e8 11 ff ff ff       	call   80108eaa <drawRect>
80108f99:	83 c4 20             	add    $0x20,%esp
    drawRect(buf, (Point){p.x, p.y + rect_size.h - border}, s, color, (Size){border, rect_size.w});
80108f9c:	8b 45 28             	mov    0x28(%ebp),%eax
80108f9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
80108fa2:	8b 45 24             	mov    0x24(%ebp),%eax
80108fa5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80108fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
80108fab:	89 45 d8             	mov    %eax,-0x28(%ebp)
80108fae:	8b 55 10             	mov    0x10(%ebp),%edx
80108fb1:	8b 45 20             	mov    0x20(%ebp),%eax
80108fb4:	01 d0                	add    %edx,%eax
80108fb6:	2b 45 28             	sub    0x28(%ebp),%eax
80108fb9:	89 45 dc             	mov    %eax,-0x24(%ebp)
80108fbc:	ff 75 d4             	pushl  -0x2c(%ebp)
80108fbf:	ff 75 d0             	pushl  -0x30(%ebp)
80108fc2:	83 ec 04             	sub    $0x4,%esp
80108fc5:	89 e0                	mov    %esp,%eax
80108fc7:	0f b7 55 1c          	movzwl 0x1c(%ebp),%edx
80108fcb:	66 89 10             	mov    %dx,(%eax)
80108fce:	0f b6 55 1e          	movzbl 0x1e(%ebp),%edx
80108fd2:	88 50 02             	mov    %dl,0x2(%eax)
80108fd5:	ff 75 18             	pushl  0x18(%ebp)
80108fd8:	ff 75 14             	pushl  0x14(%ebp)
80108fdb:	ff 75 dc             	pushl  -0x24(%ebp)
80108fde:	ff 75 d8             	pushl  -0x28(%ebp)
80108fe1:	ff 75 08             	pushl  0x8(%ebp)
80108fe4:	e8 c1 fe ff ff       	call   80108eaa <drawRect>
80108fe9:	83 c4 20             	add    $0x20,%esp

    drawRect(buf, (Point){p.x, p.y + border}, s, color, (Size){rect_size.h - 2 * border, border});
80108fec:	8b 45 20             	mov    0x20(%ebp),%eax
80108fef:	8b 55 28             	mov    0x28(%ebp),%edx
80108ff2:	01 d2                	add    %edx,%edx
80108ff4:	29 d0                	sub    %edx,%eax
80108ff6:	89 45 e0             	mov    %eax,-0x20(%ebp)
80108ff9:	8b 45 28             	mov    0x28(%ebp),%eax
80108ffc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108fff:	8b 45 0c             	mov    0xc(%ebp),%eax
80109002:	89 45 e8             	mov    %eax,-0x18(%ebp)
80109005:	8b 55 10             	mov    0x10(%ebp),%edx
80109008:	8b 45 28             	mov    0x28(%ebp),%eax
8010900b:	01 d0                	add    %edx,%eax
8010900d:	89 45 ec             	mov    %eax,-0x14(%ebp)
80109010:	ff 75 e4             	pushl  -0x1c(%ebp)
80109013:	ff 75 e0             	pushl  -0x20(%ebp)
80109016:	83 ec 04             	sub    $0x4,%esp
80109019:	89 e0                	mov    %esp,%eax
8010901b:	0f b7 55 1c          	movzwl 0x1c(%ebp),%edx
8010901f:	66 89 10             	mov    %dx,(%eax)
80109022:	0f b6 55 1e          	movzbl 0x1e(%ebp),%edx
80109026:	88 50 02             	mov    %dl,0x2(%eax)
80109029:	ff 75 18             	pushl  0x18(%ebp)
8010902c:	ff 75 14             	pushl  0x14(%ebp)
8010902f:	ff 75 ec             	pushl  -0x14(%ebp)
80109032:	ff 75 e8             	pushl  -0x18(%ebp)
80109035:	ff 75 08             	pushl  0x8(%ebp)
80109038:	e8 6d fe ff ff       	call   80108eaa <drawRect>
8010903d:	83 c4 20             	add    $0x20,%esp
    drawRect(buf, (Point){p.x + rect_size.w - border, p.y + border}, s, color, (Size){rect_size.h - 2 * border, border});
80109040:	8b 45 20             	mov    0x20(%ebp),%eax
80109043:	8b 55 28             	mov    0x28(%ebp),%edx
80109046:	01 d2                	add    %edx,%edx
80109048:	29 d0                	sub    %edx,%eax
8010904a:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010904d:	8b 45 28             	mov    0x28(%ebp),%eax
80109050:	89 45 f4             	mov    %eax,-0xc(%ebp)
80109053:	8b 55 0c             	mov    0xc(%ebp),%edx
80109056:	8b 45 24             	mov    0x24(%ebp),%eax
80109059:	01 d0                	add    %edx,%eax
8010905b:	2b 45 28             	sub    0x28(%ebp),%eax
8010905e:	89 45 f8             	mov    %eax,-0x8(%ebp)
80109061:	8b 55 10             	mov    0x10(%ebp),%edx
80109064:	8b 45 28             	mov    0x28(%ebp),%eax
80109067:	01 d0                	add    %edx,%eax
80109069:	89 45 fc             	mov    %eax,-0x4(%ebp)
8010906c:	ff 75 f4             	pushl  -0xc(%ebp)
8010906f:	ff 75 f0             	pushl  -0x10(%ebp)
80109072:	83 ec 04             	sub    $0x4,%esp
80109075:	89 e0                	mov    %esp,%eax
80109077:	0f b7 55 1c          	movzwl 0x1c(%ebp),%edx
8010907b:	66 89 10             	mov    %dx,(%eax)
8010907e:	0f b6 55 1e          	movzbl 0x1e(%ebp),%edx
80109082:	88 50 02             	mov    %dl,0x2(%eax)
80109085:	ff 75 18             	pushl  0x18(%ebp)
80109088:	ff 75 14             	pushl  0x14(%ebp)
8010908b:	ff 75 fc             	pushl  -0x4(%ebp)
8010908e:	ff 75 f8             	pushl  -0x8(%ebp)
80109091:	ff 75 08             	pushl  0x8(%ebp)
80109094:	e8 11 fe ff ff       	call   80108eaa <drawRect>
80109099:	83 c4 20             	add    $0x20,%esp
}
8010909c:	90                   	nop
8010909d:	c9                   	leave  
8010909e:	c3                   	ret    

8010909f <drawBitmap>:
// pt: start point of target
// pc: start point of content
// st: size of target
// sc: size of content
// s: size to be drawed
void drawBitmap(struct RGB* tgt, struct RGB* cont, Point pt, Point pc, Size st, Size sc, Size s) {
8010909f:	55                   	push   %ebp
801090a0:	89 e5                	mov    %esp,%ebp
801090a2:	83 ec 28             	sub    $0x28,%esp
    struct RGB *t;
    struct RGB *o;
    int draw_h = s.h;
801090a5:	8b 45 30             	mov    0x30(%ebp),%eax
801090a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int draw_w = s.w;
801090ab:	8b 45 34             	mov    0x34(%ebp),%eax
801090ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (draw_h > st.h - pt.y) {
801090b1:	8b 55 20             	mov    0x20(%ebp),%edx
801090b4:	8b 45 14             	mov    0x14(%ebp),%eax
801090b7:	29 c2                	sub    %eax,%edx
801090b9:	89 d0                	mov    %edx,%eax
801090bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801090be:	7d 0d                	jge    801090cd <drawBitmap+0x2e>
        draw_h = st.h - pt.y;
801090c0:	8b 55 20             	mov    0x20(%ebp),%edx
801090c3:	8b 45 14             	mov    0x14(%ebp),%eax
801090c6:	29 c2                	sub    %eax,%edx
801090c8:	89 d0                	mov    %edx,%eax
801090ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (draw_h > sc.h - pc.y) {
801090cd:	8b 55 28             	mov    0x28(%ebp),%edx
801090d0:	8b 45 1c             	mov    0x1c(%ebp),%eax
801090d3:	29 c2                	sub    %eax,%edx
801090d5:	89 d0                	mov    %edx,%eax
801090d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801090da:	7d 0d                	jge    801090e9 <drawBitmap+0x4a>
        draw_h = sc.h - pc.y;
801090dc:	8b 55 28             	mov    0x28(%ebp),%edx
801090df:	8b 45 1c             	mov    0x1c(%ebp),%eax
801090e2:	29 c2                	sub    %eax,%edx
801090e4:	89 d0                	mov    %edx,%eax
801090e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    if (draw_w > st.w - pt.x) {
801090e9:	8b 55 24             	mov    0x24(%ebp),%edx
801090ec:	8b 45 10             	mov    0x10(%ebp),%eax
801090ef:	29 c2                	sub    %eax,%edx
801090f1:	89 d0                	mov    %edx,%eax
801090f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
801090f6:	7d 0d                	jge    80109105 <drawBitmap+0x66>
        draw_w = st.w - pt.x;
801090f8:	8b 55 24             	mov    0x24(%ebp),%edx
801090fb:	8b 45 10             	mov    0x10(%ebp),%eax
801090fe:	29 c2                	sub    %eax,%edx
80109100:	89 d0                	mov    %edx,%eax
80109102:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    if (draw_w > sc.w - pc.x) {
80109105:	8b 55 2c             	mov    0x2c(%ebp),%edx
80109108:	8b 45 18             	mov    0x18(%ebp),%eax
8010910b:	29 c2                	sub    %eax,%edx
8010910d:	89 d0                	mov    %edx,%eax
8010910f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80109112:	7d 0d                	jge    80109121 <drawBitmap+0x82>
        draw_w = sc.w - pc.x;
80109114:	8b 55 2c             	mov    0x2c(%ebp),%edx
80109117:	8b 45 18             	mov    0x18(%ebp),%eax
8010911a:	29 c2                	sub    %eax,%edx
8010911c:	89 d0                	mov    %edx,%eax
8010911e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    for (int i = 0; i < draw_h; i++) {
80109121:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80109128:	e9 83 00 00 00       	jmp    801091b0 <drawBitmap+0x111>
        if (pt.y + i < 0 || pt.y + i >= st.h) {
8010912d:	8b 55 14             	mov    0x14(%ebp),%edx
80109130:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109133:	01 d0                	add    %edx,%eax
80109135:	85 c0                	test   %eax,%eax
80109137:	78 72                	js     801091ab <drawBitmap+0x10c>
80109139:	8b 55 14             	mov    0x14(%ebp),%edx
8010913c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010913f:	01 c2                	add    %eax,%edx
80109141:	8b 45 20             	mov    0x20(%ebp),%eax
80109144:	39 c2                	cmp    %eax,%edx
80109146:	7d 63                	jge    801091ab <drawBitmap+0x10c>
            continue;
        }
        t = tgt + (pt.y + i) * st.w + pt.x;
80109148:	8b 55 14             	mov    0x14(%ebp),%edx
8010914b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010914e:	01 c2                	add    %eax,%edx
80109150:	8b 45 24             	mov    0x24(%ebp),%eax
80109153:	0f af c2             	imul   %edx,%eax
80109156:	89 c2                	mov    %eax,%edx
80109158:	8b 45 10             	mov    0x10(%ebp),%eax
8010915b:	01 c2                	add    %eax,%edx
8010915d:	89 d0                	mov    %edx,%eax
8010915f:	01 c0                	add    %eax,%eax
80109161:	01 c2                	add    %eax,%edx
80109163:	8b 45 08             	mov    0x8(%ebp),%eax
80109166:	01 d0                	add    %edx,%eax
80109168:	89 45 e8             	mov    %eax,-0x18(%ebp)
        o = cont + (pc.y + i) * sc.w + pc.x;
8010916b:	8b 55 1c             	mov    0x1c(%ebp),%edx
8010916e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109171:	01 c2                	add    %eax,%edx
80109173:	8b 45 2c             	mov    0x2c(%ebp),%eax
80109176:	0f af c2             	imul   %edx,%eax
80109179:	89 c2                	mov    %eax,%edx
8010917b:	8b 45 18             	mov    0x18(%ebp),%eax
8010917e:	01 c2                	add    %eax,%edx
80109180:	89 d0                	mov    %edx,%eax
80109182:	01 c0                	add    %eax,%eax
80109184:	01 c2                	add    %eax,%edx
80109186:	8b 45 0c             	mov    0xc(%ebp),%eax
80109189:	01 d0                	add    %edx,%eax
8010918b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        memmove(t, o, draw_w * 3);
8010918e:	8b 55 f0             	mov    -0x10(%ebp),%edx
80109191:	89 d0                	mov    %edx,%eax
80109193:	01 c0                	add    %eax,%eax
80109195:	01 d0                	add    %edx,%eax
80109197:	83 ec 04             	sub    $0x4,%esp
8010919a:	50                   	push   %eax
8010919b:	ff 75 e4             	pushl  -0x1c(%ebp)
8010919e:	ff 75 e8             	pushl  -0x18(%ebp)
801091a1:	e8 6c c2 ff ff       	call   80105412 <memmove>
801091a6:	83 c4 10             	add    $0x10,%esp
801091a9:	eb 01                	jmp    801091ac <drawBitmap+0x10d>
        draw_w = sc.w - pc.x;
    }

    for (int i = 0; i < draw_h; i++) {
        if (pt.y + i < 0 || pt.y + i >= st.h) {
            continue;
801091ab:	90                   	nop
    }
    if (draw_w > sc.w - pc.x) {
        draw_w = sc.w - pc.x;
    }

    for (int i = 0; i < draw_h; i++) {
801091ac:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
801091b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
801091b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801091b6:	0f 8c 71 ff ff ff    	jl     8010912d <drawBitmap+0x8e>
        }
        t = tgt + (pt.y + i) * st.w + pt.x;
        o = cont + (pc.y + i) * sc.w + pc.x;
        memmove(t, o, draw_w * 3);
    }
}
801091bc:	90                   	nop
801091bd:	c9                   	leave  
801091be:	c3                   	ret    

801091bf <drawTransparentBitmap>:

void drawTransparentBitmap(struct RGB* tgt, struct RGB* cont, Point pt, Point pc, Size st, Size sc, Size s) {
801091bf:	55                   	push   %ebp
801091c0:	89 e5                	mov    %esp,%ebp
801091c2:	83 ec 20             	sub    $0x20,%esp
    struct RGB *t;
    struct RGB *o;
    int draw_h = s.h;
801091c5:	8b 45 30             	mov    0x30(%ebp),%eax
801091c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int draw_w = s.w;
801091cb:	8b 45 34             	mov    0x34(%ebp),%eax
801091ce:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if (draw_h > st.h - pt.y) {
801091d1:	8b 55 20             	mov    0x20(%ebp),%edx
801091d4:	8b 45 14             	mov    0x14(%ebp),%eax
801091d7:	29 c2                	sub    %eax,%edx
801091d9:	89 d0                	mov    %edx,%eax
801091db:	3b 45 fc             	cmp    -0x4(%ebp),%eax
801091de:	7d 0d                	jge    801091ed <drawTransparentBitmap+0x2e>
        draw_h = st.h - pt.y;
801091e0:	8b 55 20             	mov    0x20(%ebp),%edx
801091e3:	8b 45 14             	mov    0x14(%ebp),%eax
801091e6:	29 c2                	sub    %eax,%edx
801091e8:	89 d0                	mov    %edx,%eax
801091ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
    if (draw_h > sc.h - pc.y) {
801091ed:	8b 55 28             	mov    0x28(%ebp),%edx
801091f0:	8b 45 1c             	mov    0x1c(%ebp),%eax
801091f3:	29 c2                	sub    %eax,%edx
801091f5:	89 d0                	mov    %edx,%eax
801091f7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
801091fa:	7d 0d                	jge    80109209 <drawTransparentBitmap+0x4a>
        draw_h = sc.h - pc.y;
801091fc:	8b 55 28             	mov    0x28(%ebp),%edx
801091ff:	8b 45 1c             	mov    0x1c(%ebp),%eax
80109202:	29 c2                	sub    %eax,%edx
80109204:	89 d0                	mov    %edx,%eax
80109206:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

    if (draw_w > st.w - pt.x) {
80109209:	8b 55 24             	mov    0x24(%ebp),%edx
8010920c:	8b 45 10             	mov    0x10(%ebp),%eax
8010920f:	29 c2                	sub    %eax,%edx
80109211:	89 d0                	mov    %edx,%eax
80109213:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80109216:	7d 0d                	jge    80109225 <drawTransparentBitmap+0x66>
        draw_w = st.w - pt.x;
80109218:	8b 55 24             	mov    0x24(%ebp),%edx
8010921b:	8b 45 10             	mov    0x10(%ebp),%eax
8010921e:	29 c2                	sub    %eax,%edx
80109220:	89 d0                	mov    %edx,%eax
80109222:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
    if (draw_w > sc.w - pc.x) {
80109225:	8b 55 2c             	mov    0x2c(%ebp),%edx
80109228:	8b 45 18             	mov    0x18(%ebp),%eax
8010922b:	29 c2                	sub    %eax,%edx
8010922d:	89 d0                	mov    %edx,%eax
8010922f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80109232:	7d 0d                	jge    80109241 <drawTransparentBitmap+0x82>
        draw_w = sc.w - pc.x;
80109234:	8b 55 2c             	mov    0x2c(%ebp),%edx
80109237:	8b 45 18             	mov    0x18(%ebp),%eax
8010923a:	29 c2                	sub    %eax,%edx
8010923c:	89 d0                	mov    %edx,%eax
8010923e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }

    for (int i = 0; i < s.h; ++i) {
80109241:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80109248:	e9 b8 00 00 00       	jmp    80109305 <drawTransparentBitmap+0x146>
        for(int j = 0; j < s.w; ++j)
8010924d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80109254:	e9 9c 00 00 00       	jmp    801092f5 <drawTransparentBitmap+0x136>
        {
            t = tgt + (pt.y + i) * st.w + pt.x + j;
80109259:	8b 55 14             	mov    0x14(%ebp),%edx
8010925c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010925f:	01 c2                	add    %eax,%edx
80109261:	8b 45 24             	mov    0x24(%ebp),%eax
80109264:	0f af c2             	imul   %edx,%eax
80109267:	89 c2                	mov    %eax,%edx
80109269:	8b 45 10             	mov    0x10(%ebp),%eax
8010926c:	01 c2                	add    %eax,%edx
8010926e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109271:	01 c2                	add    %eax,%edx
80109273:	89 d0                	mov    %edx,%eax
80109275:	01 c0                	add    %eax,%eax
80109277:	01 c2                	add    %eax,%edx
80109279:	8b 45 08             	mov    0x8(%ebp),%eax
8010927c:	01 d0                	add    %edx,%eax
8010927e:	89 45 ec             	mov    %eax,-0x14(%ebp)
            o = cont + (pc.y + i) * sc.w + pc.x + j;
80109281:	8b 55 1c             	mov    0x1c(%ebp),%edx
80109284:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109287:	01 c2                	add    %eax,%edx
80109289:	8b 45 2c             	mov    0x2c(%ebp),%eax
8010928c:	0f af c2             	imul   %edx,%eax
8010928f:	89 c2                	mov    %eax,%edx
80109291:	8b 45 18             	mov    0x18(%ebp),%eax
80109294:	01 c2                	add    %eax,%edx
80109296:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109299:	01 c2                	add    %eax,%edx
8010929b:	89 d0                	mov    %edx,%eax
8010929d:	01 c0                	add    %eax,%eax
8010929f:	01 c2                	add    %eax,%edx
801092a1:	8b 45 0c             	mov    0xc(%ebp),%eax
801092a4:	01 d0                	add    %edx,%eax
801092a6:	89 45 e8             	mov    %eax,-0x18(%ebp)

            if(o->R==255 && o->G == 255 && o->B==255)
801092a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
801092ac:	0f b6 40 02          	movzbl 0x2(%eax),%eax
801092b0:	3c ff                	cmp    $0xff,%al
801092b2:	75 15                	jne    801092c9 <drawTransparentBitmap+0x10a>
801092b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
801092b7:	0f b6 40 01          	movzbl 0x1(%eax),%eax
801092bb:	3c ff                	cmp    $0xff,%al
801092bd:	75 0a                	jne    801092c9 <drawTransparentBitmap+0x10a>
801092bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
801092c2:	0f b6 00             	movzbl (%eax),%eax
801092c5:	3c ff                	cmp    $0xff,%al
801092c7:	74 27                	je     801092f0 <drawTransparentBitmap+0x131>
                continue;
            t->R = o->R;
801092c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
801092cc:	0f b6 50 02          	movzbl 0x2(%eax),%edx
801092d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
801092d3:	88 50 02             	mov    %dl,0x2(%eax)
            t->G = o->G;
801092d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
801092d9:	0f b6 50 01          	movzbl 0x1(%eax),%edx
801092dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
801092e0:	88 50 01             	mov    %dl,0x1(%eax)
            t->B = o->B;
801092e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
801092e6:	0f b6 10             	movzbl (%eax),%edx
801092e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
801092ec:	88 10                	mov    %dl,(%eax)
801092ee:	eb 01                	jmp    801092f1 <drawTransparentBitmap+0x132>
        {
            t = tgt + (pt.y + i) * st.w + pt.x + j;
            o = cont + (pc.y + i) * sc.w + pc.x + j;

            if(o->R==255 && o->G == 255 && o->B==255)
                continue;
801092f0:	90                   	nop
    if (draw_w > sc.w - pc.x) {
        draw_w = sc.w - pc.x;
    }

    for (int i = 0; i < s.h; ++i) {
        for(int j = 0; j < s.w; ++j)
801092f1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
801092f5:	8b 45 34             	mov    0x34(%ebp),%eax
801092f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
801092fb:	0f 8f 58 ff ff ff    	jg     80109259 <drawTransparentBitmap+0x9a>
    }
    if (draw_w > sc.w - pc.x) {
        draw_w = sc.w - pc.x;
    }

    for (int i = 0; i < s.h; ++i) {
80109301:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80109305:	8b 45 30             	mov    0x30(%ebp),%eax
80109308:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010930b:	0f 8f 3c ff ff ff    	jg     8010924d <drawTransparentBitmap+0x8e>
            t->R = o->R;
            t->G = o->G;
            t->B = o->B;
        }
    }
}
80109311:	90                   	nop
80109312:	c9                   	leave  
80109313:	c3                   	ret    

80109314 <copyContent>:

void copyContent(RGB* tgt, RGB* src, Point p, Size s, Size copy_size) {
80109314:	55                   	push   %ebp
80109315:	89 e5                	mov    %esp,%ebp
80109317:	83 ec 08             	sub    $0x8,%esp
    drawBitmap(tgt, src, p, p, s, s, copy_size);
8010931a:	ff 75 24             	pushl  0x24(%ebp)
8010931d:	ff 75 20             	pushl  0x20(%ebp)
80109320:	ff 75 1c             	pushl  0x1c(%ebp)
80109323:	ff 75 18             	pushl  0x18(%ebp)
80109326:	ff 75 1c             	pushl  0x1c(%ebp)
80109329:	ff 75 18             	pushl  0x18(%ebp)
8010932c:	ff 75 14             	pushl  0x14(%ebp)
8010932f:	ff 75 10             	pushl  0x10(%ebp)
80109332:	ff 75 14             	pushl  0x14(%ebp)
80109335:	ff 75 10             	pushl  0x10(%ebp)
80109338:	ff 75 0c             	pushl  0xc(%ebp)
8010933b:	ff 75 08             	pushl  0x8(%ebp)
8010933e:	e8 5c fd ff ff       	call   8010909f <drawBitmap>
80109343:	83 c4 30             	add    $0x30,%esp
}
80109346:	90                   	nop
80109347:	c9                   	leave  
80109348:	c3                   	ret    

80109349 <colorShift>:

void colorShift(RGB* buf, Point p, Size s, Size rect_size, int shift) {
80109349:	55                   	push   %ebp
8010934a:	89 e5                	mov    %esp,%ebp
8010934c:	83 ec 20             	sub    $0x20,%esp
    struct RGB * t;
    int draw_h = rect_size.h;
8010934f:	8b 45 1c             	mov    0x1c(%ebp),%eax
80109352:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int draw_w = rect_size.w;
80109355:	8b 45 20             	mov    0x20(%ebp),%eax
80109358:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if (draw_h > s.h - p.y) {
8010935b:	8b 55 14             	mov    0x14(%ebp),%edx
8010935e:	8b 45 10             	mov    0x10(%ebp),%eax
80109361:	29 c2                	sub    %eax,%edx
80109363:	89 d0                	mov    %edx,%eax
80109365:	3b 45 fc             	cmp    -0x4(%ebp),%eax
80109368:	7d 0d                	jge    80109377 <colorShift+0x2e>
        draw_h = s.h - p.y;
8010936a:	8b 55 14             	mov    0x14(%ebp),%edx
8010936d:	8b 45 10             	mov    0x10(%ebp),%eax
80109370:	29 c2                	sub    %eax,%edx
80109372:	89 d0                	mov    %edx,%eax
80109374:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

    if (draw_w > s.w - p.x) {
80109377:	8b 55 18             	mov    0x18(%ebp),%edx
8010937a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010937d:	29 c2                	sub    %eax,%edx
8010937f:	89 d0                	mov    %edx,%eax
80109381:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80109384:	7d 0d                	jge    80109393 <colorShift+0x4a>
        draw_w = s.w - p.x;
80109386:	8b 55 18             	mov    0x18(%ebp),%edx
80109389:	8b 45 0c             	mov    0xc(%ebp),%eax
8010938c:	29 c2                	sub    %eax,%edx
8010938e:	89 d0                	mov    %edx,%eax
80109390:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }

    for (int i = 0; i < draw_h; i++) {
80109393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010939a:	e9 fc 00 00 00       	jmp    8010949b <colorShift+0x152>
        for(int j = 0; j < draw_w; j++) {
8010939f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
801093a6:	e9 e0 00 00 00       	jmp    8010948b <colorShift+0x142>
            t = buf + (p.y + i) * s.w + p.x + j;
801093ab:	8b 55 10             	mov    0x10(%ebp),%edx
801093ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
801093b1:	01 c2                	add    %eax,%edx
801093b3:	8b 45 18             	mov    0x18(%ebp),%eax
801093b6:	0f af c2             	imul   %edx,%eax
801093b9:	89 c2                	mov    %eax,%edx
801093bb:	8b 45 0c             	mov    0xc(%ebp),%eax
801093be:	01 c2                	add    %eax,%edx
801093c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
801093c3:	01 c2                	add    %eax,%edx
801093c5:	89 d0                	mov    %edx,%eax
801093c7:	01 c0                	add    %eax,%eax
801093c9:	01 c2                	add    %eax,%edx
801093cb:	8b 45 08             	mov    0x8(%ebp),%eax
801093ce:	01 d0                	add    %edx,%eax
801093d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (t->R > 200 && t->G > 200 && t->B > 200) {
801093d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
801093d6:	0f b6 40 02          	movzbl 0x2(%eax),%eax
801093da:	3c c8                	cmp    $0xc8,%al
801093dc:	0f 86 a5 00 00 00    	jbe    80109487 <colorShift+0x13e>
801093e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
801093e5:	0f b6 40 01          	movzbl 0x1(%eax),%eax
801093e9:	3c c8                	cmp    $0xc8,%al
801093eb:	0f 86 96 00 00 00    	jbe    80109487 <colorShift+0x13e>
801093f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
801093f4:	0f b6 00             	movzbl (%eax),%eax
801093f7:	3c c8                	cmp    $0xc8,%al
801093f9:	0f 86 88 00 00 00    	jbe    80109487 <colorShift+0x13e>
                t->R = (t->R + shift + 256) % 256;
801093ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109402:	0f b6 40 02          	movzbl 0x2(%eax),%eax
80109406:	0f b6 d0             	movzbl %al,%edx
80109409:	8b 45 24             	mov    0x24(%ebp),%eax
8010940c:	01 d0                	add    %edx,%eax
8010940e:	8d 90 00 01 00 00    	lea    0x100(%eax),%edx
80109414:	89 d0                	mov    %edx,%eax
80109416:	c1 f8 1f             	sar    $0x1f,%eax
80109419:	c1 e8 18             	shr    $0x18,%eax
8010941c:	01 c2                	add    %eax,%edx
8010941e:	0f b6 d2             	movzbl %dl,%edx
80109421:	29 c2                	sub    %eax,%edx
80109423:	89 d0                	mov    %edx,%eax
80109425:	89 c2                	mov    %eax,%edx
80109427:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010942a:	88 50 02             	mov    %dl,0x2(%eax)
                t->G = (t->G + shift + 256) % 256;
8010942d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109430:	0f b6 40 01          	movzbl 0x1(%eax),%eax
80109434:	0f b6 d0             	movzbl %al,%edx
80109437:	8b 45 24             	mov    0x24(%ebp),%eax
8010943a:	01 d0                	add    %edx,%eax
8010943c:	8d 90 00 01 00 00    	lea    0x100(%eax),%edx
80109442:	89 d0                	mov    %edx,%eax
80109444:	c1 f8 1f             	sar    $0x1f,%eax
80109447:	c1 e8 18             	shr    $0x18,%eax
8010944a:	01 c2                	add    %eax,%edx
8010944c:	0f b6 d2             	movzbl %dl,%edx
8010944f:	29 c2                	sub    %eax,%edx
80109451:	89 d0                	mov    %edx,%eax
80109453:	89 c2                	mov    %eax,%edx
80109455:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109458:	88 50 01             	mov    %dl,0x1(%eax)
                t->B = (t->B + shift + 256) % 256;
8010945b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010945e:	0f b6 00             	movzbl (%eax),%eax
80109461:	0f b6 d0             	movzbl %al,%edx
80109464:	8b 45 24             	mov    0x24(%ebp),%eax
80109467:	01 d0                	add    %edx,%eax
80109469:	8d 90 00 01 00 00    	lea    0x100(%eax),%edx
8010946f:	89 d0                	mov    %edx,%eax
80109471:	c1 f8 1f             	sar    $0x1f,%eax
80109474:	c1 e8 18             	shr    $0x18,%eax
80109477:	01 c2                	add    %eax,%edx
80109479:	0f b6 d2             	movzbl %dl,%edx
8010947c:	29 c2                	sub    %eax,%edx
8010947e:	89 d0                	mov    %edx,%eax
80109480:	89 c2                	mov    %eax,%edx
80109482:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109485:	88 10                	mov    %dl,(%eax)
    if (draw_w > s.w - p.x) {
        draw_w = s.w - p.x;
    }

    for (int i = 0; i < draw_h; i++) {
        for(int j = 0; j < draw_w; j++) {
80109487:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
8010948b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010948e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80109491:	0f 8c 14 ff ff ff    	jl     801093ab <colorShift+0x62>

    if (draw_w > s.w - p.x) {
        draw_w = s.w - p.x;
    }

    for (int i = 0; i < draw_h; i++) {
80109497:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010949b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010949e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
801094a1:	0f 8c f8 fe ff ff    	jl     8010939f <colorShift+0x56>
                t->G = (t->G + shift + 256) % 256;
                t->B = (t->B + shift + 256) % 256;
            }
        }
    }
}
801094a7:	90                   	nop
801094a8:	c9                   	leave  
801094a9:	c3                   	ret    

801094aa <drawMouse>:

void drawMouse(RGB *buf, int mode, int x, int y) {
801094aa:	55                   	push   %ebp
801094ab:	89 e5                	mov    %esp,%ebp
801094ad:	83 ec 10             	sub    $0x10,%esp
    int i, j;
    RGB *t;
    for (i = 0; i < MOUSE_HEIGHT; i++) {
801094b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
801094b7:	e9 fb 00 00 00       	jmp    801095b7 <drawMouse+0x10d>
        if (y + i > SCREEN_HEIGHT || y + i < 0) {
801094bc:	8b 55 14             	mov    0x14(%ebp),%edx
801094bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
801094c2:	01 c2                	add    %eax,%edx
801094c4:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
801094cb:	0f b7 c0             	movzwl %ax,%eax
801094ce:	39 c2                	cmp    %eax,%edx
801094d0:	0f 8f eb 00 00 00    	jg     801095c1 <drawMouse+0x117>
801094d6:	8b 55 14             	mov    0x14(%ebp),%edx
801094d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
801094dc:	01 d0                	add    %edx,%eax
801094de:	85 c0                	test   %eax,%eax
801094e0:	0f 88 db 00 00 00    	js     801095c1 <drawMouse+0x117>
            break;
        }
        for (j = 0; j < MOUSE_WIDTH; j++) {
801094e6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
801094ed:	e9 b7 00 00 00       	jmp    801095a9 <drawMouse+0xff>
            if (x + j > SCREEN_WIDTH || x + j < 0) {
801094f2:	8b 55 10             	mov    0x10(%ebp),%edx
801094f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
801094f8:	01 c2                	add    %eax,%edx
801094fa:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109501:	0f b7 c0             	movzwl %ax,%eax
80109504:	39 c2                	cmp    %eax,%edx
80109506:	0f 8f a7 00 00 00    	jg     801095b3 <drawMouse+0x109>
8010950c:	8b 55 10             	mov    0x10(%ebp),%edx
8010950f:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109512:	01 d0                	add    %edx,%eax
80109514:	85 c0                	test   %eax,%eax
80109516:	0f 88 97 00 00 00    	js     801095b3 <drawMouse+0x109>
                break;
            }
            uchar temp = mouse_pointer[mode][i][j];
8010951c:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010951f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80109522:	89 d0                	mov    %edx,%eax
80109524:	c1 e0 04             	shl    $0x4,%eax
80109527:	29 d0                	sub    %edx,%eax
80109529:	69 d1 0e 01 00 00    	imul   $0x10e,%ecx,%edx
8010952f:	01 c2                	add    %eax,%edx
80109531:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109534:	01 d0                	add    %edx,%eax
80109536:	05 00 c9 10 80       	add    $0x8010c900,%eax
8010953b:	0f b6 00             	movzbl (%eax),%eax
8010953e:	88 45 f7             	mov    %al,-0x9(%ebp)
            if (temp) {
80109541:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
80109545:	74 5e                	je     801095a5 <drawMouse+0xfb>
                t = buf + (y + i) * SCREEN_WIDTH + x + j;
80109547:	8b 55 14             	mov    0x14(%ebp),%edx
8010954a:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010954d:	01 c2                	add    %eax,%edx
8010954f:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109556:	0f b7 c0             	movzwl %ax,%eax
80109559:	0f af c2             	imul   %edx,%eax
8010955c:	89 c2                	mov    %eax,%edx
8010955e:	8b 45 10             	mov    0x10(%ebp),%eax
80109561:	01 c2                	add    %eax,%edx
80109563:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109566:	01 c2                	add    %eax,%edx
80109568:	89 d0                	mov    %edx,%eax
8010956a:	01 c0                	add    %eax,%eax
8010956c:	01 c2                	add    %eax,%edx
8010956e:	8b 45 08             	mov    0x8(%ebp),%eax
80109571:	01 d0                	add    %edx,%eax
80109573:	89 45 f0             	mov    %eax,-0x10(%ebp)
                drawPoint(t, mouse_color[temp - 1]);
80109576:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
8010957a:	8d 50 ff             	lea    -0x1(%eax),%edx
8010957d:	89 d0                	mov    %edx,%eax
8010957f:	01 c0                	add    %eax,%eax
80109581:	01 d0                	add    %edx,%eax
80109583:	05 40 d2 11 80       	add    $0x8011d240,%eax
80109588:	83 ec 04             	sub    $0x4,%esp
8010958b:	89 e2                	mov    %esp,%edx
8010958d:	0f b7 08             	movzwl (%eax),%ecx
80109590:	66 89 0a             	mov    %cx,(%edx)
80109593:	0f b6 40 02          	movzbl 0x2(%eax),%eax
80109597:	88 42 02             	mov    %al,0x2(%edx)
8010959a:	ff 75 f0             	pushl  -0x10(%ebp)
8010959d:	e8 73 f6 ff ff       	call   80108c15 <drawPoint>
801095a2:	83 c4 08             	add    $0x8,%esp
    RGB *t;
    for (i = 0; i < MOUSE_HEIGHT; i++) {
        if (y + i > SCREEN_HEIGHT || y + i < 0) {
            break;
        }
        for (j = 0; j < MOUSE_WIDTH; j++) {
801095a5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
801095a9:	83 7d f8 0e          	cmpl   $0xe,-0x8(%ebp)
801095ad:	0f 8e 3f ff ff ff    	jle    801094f2 <drawMouse+0x48>
}

void drawMouse(RGB *buf, int mode, int x, int y) {
    int i, j;
    RGB *t;
    for (i = 0; i < MOUSE_HEIGHT; i++) {
801095b3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
801095b7:	83 7d fc 11          	cmpl   $0x11,-0x4(%ebp)
801095bb:	0f 8e fb fe ff ff    	jle    801094bc <drawMouse+0x12>
                t = buf + (y + i) * SCREEN_WIDTH + x + j;
                drawPoint(t, mouse_color[temp - 1]);
            }
        }
    }
}
801095c1:	90                   	nop
801095c2:	c9                   	leave  
801095c3:	c3                   	ret    

801095c4 <initGUI>:

RGB *screen = 0;
RGB *screen_wo_focus = 0; // this is the screen without focused window
RGB *screen_buf = 0;

void initGUI() {
801095c4:	55                   	push   %ebp
801095c5:	89 e5                	mov    %esp,%ebp
801095c7:	83 ec 18             	sub    $0x18,%esp
    uint GraphicMem = KERNBASE + 0x1028;
801095ca:	c7 45 f4 28 10 00 80 	movl   $0x80001028,-0xc(%ebp)
    uint baseAdd = *((uint*)GraphicMem);
801095d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801095d4:	8b 00                	mov    (%eax),%eax
801095d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    screen = (RGB*)baseAdd;
801095d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801095dc:	a3 3c 37 11 80       	mov    %eax,0x8011373c
    SCREEN_WIDTH = *((ushort*)(KERNBASE + 0x1012));
801095e1:	b8 12 10 00 80       	mov    $0x80001012,%eax
801095e6:	0f b7 00             	movzwl (%eax),%eax
801095e9:	66 a3 3c d2 11 80    	mov    %ax,0x8011d23c
    SCREEN_HEIGHT = *((ushort*)(KERNBASE + 0x1014));
801095ef:	b8 14 10 00 80       	mov    $0x80001014,%eax
801095f4:	0f b7 00             	movzwl (%eax),%eax
801095f7:	66 a3 46 d2 11 80    	mov    %ax,0x8011d246
    screen_size = (SCREEN_WIDTH * SCREEN_HEIGHT) * 3;
801095fd:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109604:	0f b7 d0             	movzwl %ax,%edx
80109607:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
8010960e:	0f b7 c0             	movzwl %ax,%eax
80109611:	0f af d0             	imul   %eax,%edx
80109614:	89 d0                	mov    %edx,%eax
80109616:	01 c0                	add    %eax,%eax
80109618:	01 d0                	add    %edx,%eax
8010961a:	a3 48 d2 11 80       	mov    %eax,0x8011d248
    screen_wo_focus = (RGB*)(baseAdd + screen_size);
8010961f:	a1 48 d2 11 80       	mov    0x8011d248,%eax
80109624:	89 c2                	mov    %eax,%edx
80109626:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109629:	01 d0                	add    %edx,%eax
8010962b:	a3 40 37 11 80       	mov    %eax,0x80113740
    screen_buf = (RGB*)(baseAdd + screen_size * 2);
80109630:	a1 48 d2 11 80       	mov    0x8011d248,%eax
80109635:	01 c0                	add    %eax,%eax
80109637:	89 c2                	mov    %eax,%edx
80109639:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010963c:	01 d0                	add    %edx,%eax
8010963e:	a3 44 37 11 80       	mov    %eax,0x80113744
    initlock(&screen_lock, "screen");
80109643:	83 ec 08             	sub    $0x8,%esp
80109646:	68 44 07 11 80       	push   $0x80110744
8010964b:	68 60 d2 11 80       	push   $0x8011d260
80109650:	e8 79 ba ff ff       	call   801050ce <initlock>
80109655:	83 c4 10             	add    $0x10,%esp
    initlock(&screen_wo_focus_lock, "screen_wo_focus");
80109658:	83 ec 08             	sub    $0x8,%esp
8010965b:	68 4b 07 11 80       	push   $0x8011074b
80109660:	68 e0 d2 11 80       	push   $0x8011d2e0
80109665:	e8 64 ba ff ff       	call   801050ce <initlock>
8010966a:	83 c4 10             	add    $0x10,%esp
    initlock(&screen_buf_lock, "screen_buf");
8010966d:	83 ec 08             	sub    $0x8,%esp
80109670:	68 5b 07 11 80       	push   $0x8011075b
80109675:	68 a0 d2 11 80       	push   $0x8011d2a0
8010967a:	e8 4f ba ff ff       	call   801050ce <initlock>
8010967f:	83 c4 10             	add    $0x10,%esp

    mouse_color[0].G = 0;
80109682:	c6 05 41 d2 11 80 00 	movb   $0x0,0x8011d241
    mouse_color[0].B = 0;
80109689:	c6 05 40 d2 11 80 00 	movb   $0x0,0x8011d240
    mouse_color[0].R = 0;
80109690:	c6 05 42 d2 11 80 00 	movb   $0x0,0x8011d242
    mouse_color[1].G = 200;
80109697:	c6 05 44 d2 11 80 c8 	movb   $0xc8,0x8011d244
    mouse_color[1].B = 200;
8010969e:	c6 05 43 d2 11 80 c8 	movb   $0xc8,0x8011d243
    mouse_color[1].R = 200;
801096a5:	c6 05 45 d2 11 80 c8 	movb   $0xc8,0x8011d245

    cprintf("@Screen Width:   %d\n", SCREEN_WIDTH);
801096ac:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
801096b3:	0f b7 c0             	movzwl %ax,%eax
801096b6:	83 ec 08             	sub    $0x8,%esp
801096b9:	50                   	push   %eax
801096ba:	68 66 07 11 80       	push   $0x80110766
801096bf:	e8 02 6d ff ff       	call   801003c6 <cprintf>
801096c4:	83 c4 10             	add    $0x10,%esp
    cprintf("@Screen Height:  %d\n", SCREEN_HEIGHT);
801096c7:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
801096ce:	0f b7 c0             	movzwl %ax,%eax
801096d1:	83 ec 08             	sub    $0x8,%esp
801096d4:	50                   	push   %eax
801096d5:	68 7b 07 11 80       	push   $0x8011077b
801096da:	e8 e7 6c ff ff       	call   801003c6 <cprintf>
801096df:	83 c4 10             	add    $0x10,%esp
    cprintf("@Bits per pixel: %d\n",*((uchar*)(KERNBASE+0x1019)));
801096e2:	b8 19 10 00 80       	mov    $0x80001019,%eax
801096e7:	0f b6 00             	movzbl (%eax),%eax
801096ea:	0f b6 c0             	movzbl %al,%eax
801096ed:	83 ec 08             	sub    $0x8,%esp
801096f0:	50                   	push   %eax
801096f1:	68 90 07 11 80       	push   $0x80110790
801096f6:	e8 cb 6c ff ff       	call   801003c6 <cprintf>
801096fb:	83 c4 10             	add    $0x10,%esp
    cprintf("@Video card drivers initialized successfully.\n");
801096fe:	83 ec 0c             	sub    $0xc,%esp
80109701:	68 a8 07 11 80       	push   $0x801107a8
80109706:	e8 bb 6c ff ff       	call   801003c6 <cprintf>
8010970b:	83 c4 10             	add    $0x10,%esp
}
8010970e:	90                   	nop
8010970f:	c9                   	leave  
80109710:	c3                   	ret    

80109711 <acquireGUILock>:

// seems like we don't need GUI lock
void acquireGUILock(RGB *buf) {
80109711:	55                   	push   %ebp
80109712:	89 e5                	mov    %esp,%ebp
    return;
80109714:	90                   	nop
    } else if (buf == screen_wo_focus) {
        acquire(&screen_wo_focus_lock);
    } else if (buf == screen_buf) {
        acquire(&screen_buf_lock);
    }
}
80109715:	5d                   	pop    %ebp
80109716:	c3                   	ret    

80109717 <releaseGUILock>:

void releaseGUILock(RGB *buf) {
80109717:	55                   	push   %ebp
80109718:	89 e5                	mov    %esp,%ebp
    return;
8010971a:	90                   	nop
    } else if (buf == screen_wo_focus) {
        release(&screen_wo_focus_lock);
    } else if (buf == screen_buf) {
        release(&screen_buf_lock);
    }
}
8010971b:	5d                   	pop    %ebp
8010971c:	c3                   	ret    

8010971d <drawCharacterToScreen>:

void drawCharacterToScreen(RGB *buf, Point p, Size s, char ch, RGBA color) {
8010971d:	55                   	push   %ebp
8010971e:	89 e5                	mov    %esp,%ebp
80109720:	83 ec 18             	sub    $0x18,%esp
80109723:	8b 45 1c             	mov    0x1c(%ebp),%eax
80109726:	88 45 f4             	mov    %al,-0xc(%ebp)
    acquireGUILock(buf);
80109729:	ff 75 08             	pushl  0x8(%ebp)
8010972c:	e8 e0 ff ff ff       	call   80109711 <acquireGUILock>
80109731:	83 c4 04             	add    $0x4,%esp
    drawCharacter(buf, p, s, ch, color);
80109734:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
80109738:	83 ec 04             	sub    $0x4,%esp
8010973b:	ff 75 20             	pushl  0x20(%ebp)
8010973e:	50                   	push   %eax
8010973f:	ff 75 18             	pushl  0x18(%ebp)
80109742:	ff 75 14             	pushl  0x14(%ebp)
80109745:	ff 75 10             	pushl  0x10(%ebp)
80109748:	ff 75 0c             	pushl  0xc(%ebp)
8010974b:	ff 75 08             	pushl  0x8(%ebp)
8010974e:	e8 04 f6 ff ff       	call   80108d57 <drawCharacter>
80109753:	83 c4 20             	add    $0x20,%esp
    releaseGUILock(buf);
80109756:	83 ec 0c             	sub    $0xc,%esp
80109759:	ff 75 08             	pushl  0x8(%ebp)
8010975c:	e8 b6 ff ff ff       	call   80109717 <releaseGUILock>
80109761:	83 c4 10             	add    $0x10,%esp
}
80109764:	90                   	nop
80109765:	c9                   	leave  
80109766:	c3                   	ret    

80109767 <drawStringToScreen>:

void drawStringToScreen(RGB *buf, Point p, Size s, char *str, RGBA color) {
80109767:	55                   	push   %ebp
80109768:	89 e5                	mov    %esp,%ebp
8010976a:	83 ec 08             	sub    $0x8,%esp
    acquireGUILock(buf);
8010976d:	ff 75 08             	pushl  0x8(%ebp)
80109770:	e8 9c ff ff ff       	call   80109711 <acquireGUILock>
80109775:	83 c4 04             	add    $0x4,%esp
    drawString(buf, p, s, str, color);
80109778:	83 ec 04             	sub    $0x4,%esp
8010977b:	ff 75 20             	pushl  0x20(%ebp)
8010977e:	ff 75 1c             	pushl  0x1c(%ebp)
80109781:	ff 75 18             	pushl  0x18(%ebp)
80109784:	ff 75 14             	pushl  0x14(%ebp)
80109787:	ff 75 10             	pushl  0x10(%ebp)
8010978a:	ff 75 0c             	pushl  0xc(%ebp)
8010978d:	ff 75 08             	pushl  0x8(%ebp)
80109790:	e8 bc f6 ff ff       	call   80108e51 <drawString>
80109795:	83 c4 20             	add    $0x20,%esp
    releaseGUILock(buf);
80109798:	83 ec 0c             	sub    $0xc,%esp
8010979b:	ff 75 08             	pushl  0x8(%ebp)
8010979e:	e8 74 ff ff ff       	call   80109717 <releaseGUILock>
801097a3:	83 c4 10             	add    $0x10,%esp
}
801097a6:	90                   	nop
801097a7:	c9                   	leave  
801097a8:	c3                   	ret    

801097a9 <drawBitmapToScreen>:

void drawBitmapToScreen(RGB *buf, RGB *img, Point p, Size s) {
801097a9:	55                   	push   %ebp
801097aa:	89 e5                	mov    %esp,%ebp
801097ac:	83 ec 18             	sub    $0x18,%esp
    acquireGUILock(buf);
801097af:	ff 75 08             	pushl  0x8(%ebp)
801097b2:	e8 5a ff ff ff       	call   80109711 <acquireGUILock>
801097b7:	83 c4 04             	add    $0x4,%esp
    drawBitmap(buf, img, p, (Point){0, 0}, (Size){USCREEN_HEIGHT, USCREEN_WIDTH}, s, s);
801097ba:	c7 45 e8 58 02 00 00 	movl   $0x258,-0x18(%ebp)
801097c1:	c7 45 ec 20 03 00 00 	movl   $0x320,-0x14(%ebp)
801097c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
801097cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801097d6:	ff 75 1c             	pushl  0x1c(%ebp)
801097d9:	ff 75 18             	pushl  0x18(%ebp)
801097dc:	ff 75 1c             	pushl  0x1c(%ebp)
801097df:	ff 75 18             	pushl  0x18(%ebp)
801097e2:	ff 75 ec             	pushl  -0x14(%ebp)
801097e5:	ff 75 e8             	pushl  -0x18(%ebp)
801097e8:	ff 75 f4             	pushl  -0xc(%ebp)
801097eb:	ff 75 f0             	pushl  -0x10(%ebp)
801097ee:	ff 75 14             	pushl  0x14(%ebp)
801097f1:	ff 75 10             	pushl  0x10(%ebp)
801097f4:	ff 75 0c             	pushl  0xc(%ebp)
801097f7:	ff 75 08             	pushl  0x8(%ebp)
801097fa:	e8 a0 f8 ff ff       	call   8010909f <drawBitmap>
801097ff:	83 c4 30             	add    $0x30,%esp
    releaseGUILock(buf);
80109802:	83 ec 0c             	sub    $0xc,%esp
80109805:	ff 75 08             	pushl  0x8(%ebp)
80109808:	e8 0a ff ff ff       	call   80109717 <releaseGUILock>
8010980d:	83 c4 10             	add    $0x10,%esp
}
80109810:	90                   	nop
80109811:	c9                   	leave  
80109812:	c3                   	ret    

80109813 <drawPartBitmapToScreen>:

void drawPartBitmapToScreen(RGB *buf, RGB *img, Point screen_p, Point img_p, Size img_s, Size draw_s) {
80109813:	55                   	push   %ebp
80109814:	89 e5                	mov    %esp,%ebp
80109816:	83 ec 18             	sub    $0x18,%esp
    acquireGUILock(buf);
80109819:	ff 75 08             	pushl  0x8(%ebp)
8010981c:	e8 f0 fe ff ff       	call   80109711 <acquireGUILock>
80109821:	83 c4 04             	add    $0x4,%esp
    drawBitmap(buf, img, screen_p, img_p, (Size){USCREEN_HEIGHT, USCREEN_WIDTH}, img_s, draw_s);
80109824:	c7 45 f0 58 02 00 00 	movl   $0x258,-0x10(%ebp)
8010982b:	c7 45 f4 20 03 00 00 	movl   $0x320,-0xc(%ebp)
80109832:	ff 75 2c             	pushl  0x2c(%ebp)
80109835:	ff 75 28             	pushl  0x28(%ebp)
80109838:	ff 75 24             	pushl  0x24(%ebp)
8010983b:	ff 75 20             	pushl  0x20(%ebp)
8010983e:	ff 75 f4             	pushl  -0xc(%ebp)
80109841:	ff 75 f0             	pushl  -0x10(%ebp)
80109844:	ff 75 1c             	pushl  0x1c(%ebp)
80109847:	ff 75 18             	pushl  0x18(%ebp)
8010984a:	ff 75 14             	pushl  0x14(%ebp)
8010984d:	ff 75 10             	pushl  0x10(%ebp)
80109850:	ff 75 0c             	pushl  0xc(%ebp)
80109853:	ff 75 08             	pushl  0x8(%ebp)
80109856:	e8 44 f8 ff ff       	call   8010909f <drawBitmap>
8010985b:	83 c4 30             	add    $0x30,%esp
    releaseGUILock(buf);
8010985e:	83 ec 0c             	sub    $0xc,%esp
80109861:	ff 75 08             	pushl  0x8(%ebp)
80109864:	e8 ae fe ff ff       	call   80109717 <releaseGUILock>
80109869:	83 c4 10             	add    $0x10,%esp
}
8010986c:	90                   	nop
8010986d:	c9                   	leave  
8010986e:	c3                   	ret    

8010986f <drawTransparentBitmapToScreen>:

void drawTransparentBitmapToScreen(RGB *buf, RGB *img, Point p, Size s) {
8010986f:	55                   	push   %ebp
80109870:	89 e5                	mov    %esp,%ebp
80109872:	83 ec 18             	sub    $0x18,%esp
    acquireGUILock(buf);
80109875:	ff 75 08             	pushl  0x8(%ebp)
80109878:	e8 94 fe ff ff       	call   80109711 <acquireGUILock>
8010987d:	83 c4 04             	add    $0x4,%esp
    drawTransparentBitmap(buf, img, p, (Point){0, 0}, (Size){USCREEN_HEIGHT, USCREEN_WIDTH}, s, s);
80109880:	c7 45 e8 58 02 00 00 	movl   $0x258,-0x18(%ebp)
80109887:	c7 45 ec 20 03 00 00 	movl   $0x320,-0x14(%ebp)
8010988e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80109895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010989c:	ff 75 1c             	pushl  0x1c(%ebp)
8010989f:	ff 75 18             	pushl  0x18(%ebp)
801098a2:	ff 75 1c             	pushl  0x1c(%ebp)
801098a5:	ff 75 18             	pushl  0x18(%ebp)
801098a8:	ff 75 ec             	pushl  -0x14(%ebp)
801098ab:	ff 75 e8             	pushl  -0x18(%ebp)
801098ae:	ff 75 f4             	pushl  -0xc(%ebp)
801098b1:	ff 75 f0             	pushl  -0x10(%ebp)
801098b4:	ff 75 14             	pushl  0x14(%ebp)
801098b7:	ff 75 10             	pushl  0x10(%ebp)
801098ba:	ff 75 0c             	pushl  0xc(%ebp)
801098bd:	ff 75 08             	pushl  0x8(%ebp)
801098c0:	e8 fa f8 ff ff       	call   801091bf <drawTransparentBitmap>
801098c5:	83 c4 30             	add    $0x30,%esp
    releaseGUILock(buf);
801098c8:	83 ec 0c             	sub    $0xc,%esp
801098cb:	ff 75 08             	pushl  0x8(%ebp)
801098ce:	e8 44 fe ff ff       	call   80109717 <releaseGUILock>
801098d3:	83 c4 10             	add    $0x10,%esp
}
801098d6:	90                   	nop
801098d7:	c9                   	leave  
801098d8:	c3                   	ret    

801098d9 <drawMouseToScreen>:

void drawMouseToScreen(RGB *buf, int mode, int x, int y) {
801098d9:	55                   	push   %ebp
801098da:	89 e5                	mov    %esp,%ebp
801098dc:	83 ec 08             	sub    $0x8,%esp
    acquireGUILock(buf);
801098df:	ff 75 08             	pushl  0x8(%ebp)
801098e2:	e8 2a fe ff ff       	call   80109711 <acquireGUILock>
801098e7:	83 c4 04             	add    $0x4,%esp
    drawMouse(buf, mode, x, y);
801098ea:	ff 75 14             	pushl  0x14(%ebp)
801098ed:	ff 75 10             	pushl  0x10(%ebp)
801098f0:	ff 75 0c             	pushl  0xc(%ebp)
801098f3:	ff 75 08             	pushl  0x8(%ebp)
801098f6:	e8 af fb ff ff       	call   801094aa <drawMouse>
801098fb:	83 c4 10             	add    $0x10,%esp
    releaseGUILock(buf);
801098fe:	83 ec 0c             	sub    $0xc,%esp
80109901:	ff 75 08             	pushl  0x8(%ebp)
80109904:	e8 0e fe ff ff       	call   80109717 <releaseGUILock>
80109909:	83 c4 10             	add    $0x10,%esp
}
8010990c:	90                   	nop
8010990d:	c9                   	leave  
8010990e:	c3                   	ret    

8010990f <drawScreenToScreen>:

void drawScreenToScreen(RGB* buf, RGB* img) {
8010990f:	55                   	push   %ebp
80109910:	89 e5                	mov    %esp,%ebp
80109912:	83 ec 08             	sub    $0x8,%esp
    acquireGUILock(buf);
80109915:	ff 75 08             	pushl  0x8(%ebp)
80109918:	e8 f4 fd ff ff       	call   80109711 <acquireGUILock>
8010991d:	83 c4 04             	add    $0x4,%esp
    memmove(buf, img, SCREEN_WIDTH * SCREEN_HEIGHT * 3);
80109920:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109927:	0f b7 d0             	movzwl %ax,%edx
8010992a:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
80109931:	0f b7 c0             	movzwl %ax,%eax
80109934:	0f af d0             	imul   %eax,%edx
80109937:	89 d0                	mov    %edx,%eax
80109939:	01 c0                	add    %eax,%eax
8010993b:	01 d0                	add    %edx,%eax
8010993d:	83 ec 04             	sub    $0x4,%esp
80109940:	50                   	push   %eax
80109941:	ff 75 0c             	pushl  0xc(%ebp)
80109944:	ff 75 08             	pushl  0x8(%ebp)
80109947:	e8 c6 ba ff ff       	call   80105412 <memmove>
8010994c:	83 c4 10             	add    $0x10,%esp
    releaseGUILock(buf);
8010994f:	83 ec 0c             	sub    $0xc,%esp
80109952:	ff 75 08             	pushl  0x8(%ebp)
80109955:	e8 bd fd ff ff       	call   80109717 <releaseGUILock>
8010995a:	83 c4 10             	add    $0x10,%esp
}
8010995d:	90                   	nop
8010995e:	c9                   	leave  
8010995f:	c3                   	ret    

80109960 <clearMouse>:

void clearMouse(RGB *buf, RGB *no_mouse_buf, int x, int y) {
80109960:	55                   	push   %ebp
80109961:	89 e5                	mov    %esp,%ebp
80109963:	83 ec 38             	sub    $0x38,%esp
    acquireGUILock(buf);
80109966:	ff 75 08             	pushl  0x8(%ebp)
80109969:	e8 a3 fd ff ff       	call   80109711 <acquireGUILock>
8010996e:	83 c4 04             	add    $0x4,%esp
    drawBitmap(buf, no_mouse_buf, (Point){x, y}, (Point){x, y}, (Size){USCREEN_HEIGHT, USCREEN_WIDTH}, (Size){USCREEN_HEIGHT, USCREEN_WIDTH}, (Size){MOUSE_HEIGHT, MOUSE_WIDTH});
80109971:	c7 45 d0 12 00 00 00 	movl   $0x12,-0x30(%ebp)
80109978:	c7 45 d4 0f 00 00 00 	movl   $0xf,-0x2c(%ebp)
8010997f:	c7 45 d8 58 02 00 00 	movl   $0x258,-0x28(%ebp)
80109986:	c7 45 dc 20 03 00 00 	movl   $0x320,-0x24(%ebp)
8010998d:	c7 45 e0 58 02 00 00 	movl   $0x258,-0x20(%ebp)
80109994:	c7 45 e4 20 03 00 00 	movl   $0x320,-0x1c(%ebp)
8010999b:	8b 45 10             	mov    0x10(%ebp),%eax
8010999e:	89 45 e8             	mov    %eax,-0x18(%ebp)
801099a1:	8b 45 14             	mov    0x14(%ebp),%eax
801099a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
801099a7:	8b 45 10             	mov    0x10(%ebp),%eax
801099aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
801099ad:	8b 45 14             	mov    0x14(%ebp),%eax
801099b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
801099b3:	ff 75 d4             	pushl  -0x2c(%ebp)
801099b6:	ff 75 d0             	pushl  -0x30(%ebp)
801099b9:	ff 75 dc             	pushl  -0x24(%ebp)
801099bc:	ff 75 d8             	pushl  -0x28(%ebp)
801099bf:	ff 75 e4             	pushl  -0x1c(%ebp)
801099c2:	ff 75 e0             	pushl  -0x20(%ebp)
801099c5:	ff 75 ec             	pushl  -0x14(%ebp)
801099c8:	ff 75 e8             	pushl  -0x18(%ebp)
801099cb:	ff 75 f4             	pushl  -0xc(%ebp)
801099ce:	ff 75 f0             	pushl  -0x10(%ebp)
801099d1:	ff 75 0c             	pushl  0xc(%ebp)
801099d4:	ff 75 08             	pushl  0x8(%ebp)
801099d7:	e8 c3 f6 ff ff       	call   8010909f <drawBitmap>
801099dc:	83 c4 30             	add    $0x30,%esp
    releaseGUILock(buf);
801099df:	83 ec 0c             	sub    $0xc,%esp
801099e2:	ff 75 08             	pushl  0x8(%ebp)
801099e5:	e8 2d fd ff ff       	call   80109717 <releaseGUILock>
801099ea:	83 c4 10             	add    $0x10,%esp
}
801099ed:	90                   	nop
801099ee:	c9                   	leave  
801099ef:	c3                   	ret    

801099f0 <min>:
struct TimerInfo timerInfo;

/*********************************************************
 * Help Functions
**********************************************************/
int min(int a, int b) {
801099f0:	55                   	push   %ebp
801099f1:	89 e5                	mov    %esp,%ebp
    return (a > b) ? b : a;
801099f3:	8b 45 0c             	mov    0xc(%ebp),%eax
801099f6:	39 45 08             	cmp    %eax,0x8(%ebp)
801099f9:	0f 4e 45 08          	cmovle 0x8(%ebp),%eax
}
801099fd:	5d                   	pop    %ebp
801099fe:	c3                   	ret    

801099ff <max>:

int max(int a, int b) {
801099ff:	55                   	push   %ebp
80109a00:	89 e5                	mov    %esp,%ebp
    return (a > b) ? a : b;
80109a02:	8b 45 08             	mov    0x8(%ebp),%eax
80109a05:	39 45 0c             	cmp    %eax,0xc(%ebp)
80109a08:	0f 4d 45 0c          	cmovge 0xc(%ebp),%eax
}
80109a0c:	5d                   	pop    %ebp
80109a0d:	c3                   	ret    

80109a0e <setRect>:


void setRect(struct Rect *rect, int x, int y, int w, int h) {
80109a0e:	55                   	push   %ebp
80109a0f:	89 e5                	mov    %esp,%ebp
    rect->x = x;
80109a11:	8b 45 08             	mov    0x8(%ebp),%eax
80109a14:	8b 55 0c             	mov    0xc(%ebp),%edx
80109a17:	89 10                	mov    %edx,(%eax)
    rect->y = y;
80109a19:	8b 45 08             	mov    0x8(%ebp),%eax
80109a1c:	8b 55 10             	mov    0x10(%ebp),%edx
80109a1f:	89 50 04             	mov    %edx,0x4(%eax)
    rect->w = w;
80109a22:	8b 45 08             	mov    0x8(%ebp),%eax
80109a25:	8b 55 14             	mov    0x14(%ebp),%edx
80109a28:	89 50 0c             	mov    %edx,0xc(%eax)
    rect->h = h;
80109a2b:	8b 45 08             	mov    0x8(%ebp),%eax
80109a2e:	8b 55 18             	mov    0x18(%ebp),%edx
80109a31:	89 50 08             	mov    %edx,0x8(%eax)
}
80109a34:	90                   	nop
80109a35:	5d                   	pop    %ebp
80109a36:	c3                   	ret    

80109a37 <mouseInWin>:

int mouseInWin(int px, int py, int hwnd)
{
80109a37:	55                   	push   %ebp
80109a38:	89 e5                	mov    %esp,%ebp
80109a3a:	83 ec 10             	sub    $0x10,%esp
    Rect * body = &wndInfoList[hwnd].wndBody;
80109a3d:	8b 45 10             	mov    0x10(%ebp),%eax
80109a40:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109a46:	83 c0 10             	add    $0x10,%eax
80109a49:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109a4e:	83 c0 04             	add    $0x4,%eax
80109a51:	89 45 fc             	mov    %eax,-0x4(%ebp)
    Rect * bar = &wndInfoList[hwnd].wndTitleBar;
80109a54:	8b 45 10             	mov    0x10(%ebp),%eax
80109a57:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109a5d:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109a62:	83 c0 04             	add    $0x4,%eax
80109a65:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(px <= body->x || px >= (body->x + body->w))
80109a68:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109a6b:	8b 00                	mov    (%eax),%eax
80109a6d:	3b 45 08             	cmp    0x8(%ebp),%eax
80109a70:	7d 12                	jge    80109a84 <mouseInWin+0x4d>
80109a72:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109a75:	8b 10                	mov    (%eax),%edx
80109a77:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109a7a:	8b 40 0c             	mov    0xc(%eax),%eax
80109a7d:	01 d0                	add    %edx,%eax
80109a7f:	3b 45 08             	cmp    0x8(%ebp),%eax
80109a82:	7f 07                	jg     80109a8b <mouseInWin+0x54>
        return NOT_IN;
80109a84:	b8 00 00 00 00       	mov    $0x0,%eax
80109a89:	eb 75                	jmp    80109b00 <mouseInWin+0xc9>

    if(py > body->y && py <(body->y + body->h))
80109a8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109a8e:	8b 40 04             	mov    0x4(%eax),%eax
80109a91:	3b 45 0c             	cmp    0xc(%ebp),%eax
80109a94:	7d 1a                	jge    80109ab0 <mouseInWin+0x79>
80109a96:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109a99:	8b 50 04             	mov    0x4(%eax),%edx
80109a9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109a9f:	8b 40 08             	mov    0x8(%eax),%eax
80109aa2:	01 d0                	add    %edx,%eax
80109aa4:	3b 45 0c             	cmp    0xc(%ebp),%eax
80109aa7:	7e 07                	jle    80109ab0 <mouseInWin+0x79>
        return CONTENT;
80109aa9:	b8 01 00 00 00       	mov    $0x1,%eax
80109aae:	eb 50                	jmp    80109b00 <mouseInWin+0xc9>
    if(py > bar->y && py < (bar->y + bar->h))
80109ab0:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109ab3:	8b 40 04             	mov    0x4(%eax),%eax
80109ab6:	3b 45 0c             	cmp    0xc(%ebp),%eax
80109ab9:	7d 40                	jge    80109afb <mouseInWin+0xc4>
80109abb:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109abe:	8b 50 04             	mov    0x4(%eax),%edx
80109ac1:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109ac4:	8b 40 08             	mov    0x8(%eax),%eax
80109ac7:	01 d0                	add    %edx,%eax
80109ac9:	3b 45 0c             	cmp    0xc(%ebp),%eax
80109acc:	7e 2d                	jle    80109afb <mouseInWin+0xc4>
    {
        if(px > body->x && px < body->x + body->w - UTITLE_HEIGHT)
80109ace:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109ad1:	8b 00                	mov    (%eax),%eax
80109ad3:	3b 45 08             	cmp    0x8(%ebp),%eax
80109ad6:	7d 1c                	jge    80109af4 <mouseInWin+0xbd>
80109ad8:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109adb:	8b 10                	mov    (%eax),%edx
80109add:	8b 45 fc             	mov    -0x4(%ebp),%eax
80109ae0:	8b 40 0c             	mov    0xc(%eax),%eax
80109ae3:	01 d0                	add    %edx,%eax
80109ae5:	83 e8 1e             	sub    $0x1e,%eax
80109ae8:	3b 45 08             	cmp    0x8(%ebp),%eax
80109aeb:	7e 07                	jle    80109af4 <mouseInWin+0xbd>
            return BAR;
80109aed:	b8 02 00 00 00       	mov    $0x2,%eax
80109af2:	eb 0c                	jmp    80109b00 <mouseInWin+0xc9>
        else
            return CLOSE_BTN;
80109af4:	b8 03 00 00 00       	mov    $0x3,%eax
80109af9:	eb 05                	jmp    80109b00 <mouseInWin+0xc9>
    }

    return 0;
80109afb:	b8 00 00 00 00       	mov    $0x0,%eax
}
80109b00:	c9                   	leave  
80109b01:	c3                   	ret    

80109b02 <initDesktop>:


/*********************************************************
 * Paint Functions
**********************************************************/
void initDesktop() {
80109b02:	55                   	push   %ebp
80109b03:	89 e5                	mov    %esp,%ebp
80109b05:	83 ec 38             	sub    $0x38,%esp
    drawBitmapToScreen(screen, wndInfoList[0].content, (Point){0, 0}, (Size){SCREEN_HEIGHT, SCREEN_WIDTH});
80109b08:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
80109b0f:	0f b7 c0             	movzwl %ax,%eax
80109b12:	89 45 c8             	mov    %eax,-0x38(%ebp)
80109b15:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109b1c:	0f b7 c0             	movzwl %ax,%eax
80109b1f:	89 45 cc             	mov    %eax,-0x34(%ebp)
80109b22:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
80109b29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
80109b30:	8b 15 e8 d3 11 80    	mov    0x8011d3e8,%edx
80109b36:	a1 3c 37 11 80       	mov    0x8011373c,%eax
80109b3b:	83 ec 08             	sub    $0x8,%esp
80109b3e:	ff 75 cc             	pushl  -0x34(%ebp)
80109b41:	ff 75 c8             	pushl  -0x38(%ebp)
80109b44:	ff 75 d4             	pushl  -0x2c(%ebp)
80109b47:	ff 75 d0             	pushl  -0x30(%ebp)
80109b4a:	52                   	push   %edx
80109b4b:	50                   	push   %eax
80109b4c:	e8 58 fc ff ff       	call   801097a9 <drawBitmapToScreen>
80109b51:	83 c4 20             	add    $0x20,%esp
    drawBitmapToScreen(screen_wo_focus, wndInfoList[0].content, (Point){0, 0}, (Size){SCREEN_HEIGHT, SCREEN_WIDTH});
80109b54:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
80109b5b:	0f b7 c0             	movzwl %ax,%eax
80109b5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
80109b61:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109b68:	0f b7 c0             	movzwl %ax,%eax
80109b6b:	89 45 dc             	mov    %eax,-0x24(%ebp)
80109b6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
80109b75:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80109b7c:	8b 15 e8 d3 11 80    	mov    0x8011d3e8,%edx
80109b82:	a1 40 37 11 80       	mov    0x80113740,%eax
80109b87:	83 ec 08             	sub    $0x8,%esp
80109b8a:	ff 75 dc             	pushl  -0x24(%ebp)
80109b8d:	ff 75 d8             	pushl  -0x28(%ebp)
80109b90:	ff 75 e4             	pushl  -0x1c(%ebp)
80109b93:	ff 75 e0             	pushl  -0x20(%ebp)
80109b96:	52                   	push   %edx
80109b97:	50                   	push   %eax
80109b98:	e8 0c fc ff ff       	call   801097a9 <drawBitmapToScreen>
80109b9d:	83 c4 20             	add    $0x20,%esp
    drawBitmapToScreen(screen_buf, wndInfoList[0].content, (Point){0, 0}, (Size){SCREEN_HEIGHT, SCREEN_WIDTH});
80109ba0:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
80109ba7:	0f b7 c0             	movzwl %ax,%eax
80109baa:	89 45 e8             	mov    %eax,-0x18(%ebp)
80109bad:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
80109bb4:	0f b7 c0             	movzwl %ax,%eax
80109bb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
80109bba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80109bc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80109bc8:	8b 15 e8 d3 11 80    	mov    0x8011d3e8,%edx
80109bce:	a1 44 37 11 80       	mov    0x80113744,%eax
80109bd3:	83 ec 08             	sub    $0x8,%esp
80109bd6:	ff 75 ec             	pushl  -0x14(%ebp)
80109bd9:	ff 75 e8             	pushl  -0x18(%ebp)
80109bdc:	ff 75 f4             	pushl  -0xc(%ebp)
80109bdf:	ff 75 f0             	pushl  -0x10(%ebp)
80109be2:	52                   	push   %edx
80109be3:	50                   	push   %eax
80109be4:	e8 c0 fb ff ff       	call   801097a9 <drawBitmapToScreen>
80109be9:	83 c4 20             	add    $0x20,%esp
}
80109bec:	90                   	nop
80109bed:	c9                   	leave  
80109bee:	c3                   	ret    

80109bef <drawWndTitleBar>:
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

int drawWndTitleBar(int hwnd) {
80109bef:	55                   	push   %ebp
80109bf0:	89 e5                	mov    %esp,%ebp
80109bf2:	83 ec 38             	sub    $0x38,%esp
    WndInfo * wnd = &wndInfoList[hwnd];
80109bf5:	8b 45 08             	mov    0x8(%ebp),%eax
80109bf8:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109bfe:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109c03:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (hwnd==0)
80109c06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80109c0a:	75 0a                	jne    80109c16 <drawWndTitleBar+0x27>
        return 0;
80109c0c:	b8 00 00 00 00       	mov    $0x0,%eax
80109c11:	e9 31 01 00 00       	jmp    80109d47 <drawWndTitleBar+0x158>
    int w = wnd->wndTitleBar.w;
80109c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109c19:	8b 40 10             	mov    0x10(%eax),%eax
80109c1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int h = wnd->wndTitleBar.h;
80109c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109c22:	8b 40 0c             	mov    0xc(%eax),%eax
80109c25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    RGB * o;
    RGB * buf = wnd->wholeContent;
80109c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109c2b:	8b 40 2c             	mov    0x2c(%eax),%eax
80109c2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    memset(buf, 118, h * w * 3);
80109c31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80109c34:	0f af 45 e8          	imul   -0x18(%ebp),%eax
80109c38:	89 c2                	mov    %eax,%edx
80109c3a:	89 d0                	mov    %edx,%eax
80109c3c:	01 c0                	add    %eax,%eax
80109c3e:	01 d0                	add    %edx,%eax
80109c40:	83 ec 04             	sub    $0x4,%esp
80109c43:	50                   	push   %eax
80109c44:	6a 76                	push   $0x76
80109c46:	ff 75 e0             	pushl  -0x20(%ebp)
80109c49:	e8 05 b7 ff ff       	call   80105353 <memset>
80109c4e:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < h; ++i) {
80109c51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80109c58:	e9 8b 00 00 00       	jmp    80109ce8 <drawWndTitleBar+0xf9>
        for (int j = 0; j < h; ++j) {
80109c5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80109c64:	eb 76                	jmp    80109cdc <drawWndTitleBar+0xed>
            o = buf + i * w + w - h + j;
80109c66:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109c69:	0f af 45 e8          	imul   -0x18(%ebp),%eax
80109c6d:	89 c2                	mov    %eax,%edx
80109c6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
80109c72:	01 c2                	add    %eax,%edx
80109c74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80109c77:	29 c2                	sub    %eax,%edx
80109c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109c7c:	01 c2                	add    %eax,%edx
80109c7e:	89 d0                	mov    %edx,%eax
80109c80:	01 c0                	add    %eax,%eax
80109c82:	01 c2                	add    %eax,%edx
80109c84:	8b 45 e0             	mov    -0x20(%ebp),%eax
80109c87:	01 d0                	add    %edx,%eax
80109c89:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (close_btn[i][j] == 0) {
80109c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109c8f:	89 c2                	mov    %eax,%edx
80109c91:	8d 04 12             	lea    (%edx,%edx,1),%eax
80109c94:	89 c2                	mov    %eax,%edx
80109c96:	89 d0                	mov    %edx,%eax
80109c98:	c1 e0 04             	shl    $0x4,%eax
80109c9b:	29 d0                	sub    %edx,%eax
80109c9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
80109ca0:	01 d0                	add    %edx,%eax
80109ca2:	05 e0 07 11 80       	add    $0x801107e0,%eax
80109ca7:	0f b6 00             	movzbl (%eax),%eax
80109caa:	84 c0                	test   %al,%al
80109cac:	75 16                	jne    80109cc4 <drawWndTitleBar+0xd5>
                o->R = 189;
80109cae:	8b 45 dc             	mov    -0x24(%ebp),%eax
80109cb1:	c6 40 02 bd          	movb   $0xbd,0x2(%eax)
                o->G = 110;
80109cb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
80109cb8:	c6 40 01 6e          	movb   $0x6e,0x1(%eax)
                o->B = 105;
80109cbc:	8b 45 dc             	mov    -0x24(%ebp),%eax
80109cbf:	c6 00 69             	movb   $0x69,(%eax)
80109cc2:	eb 14                	jmp    80109cd8 <drawWndTitleBar+0xe9>
            } else {
                o->R = 255;
80109cc4:	8b 45 dc             	mov    -0x24(%ebp),%eax
80109cc7:	c6 40 02 ff          	movb   $0xff,0x2(%eax)
                o->G = 255;
80109ccb:	8b 45 dc             	mov    -0x24(%ebp),%eax
80109cce:	c6 40 01 ff          	movb   $0xff,0x1(%eax)
                o->B = 255;
80109cd2:	8b 45 dc             	mov    -0x24(%ebp),%eax
80109cd5:	c6 00 ff             	movb   $0xff,(%eax)
    int h = wnd->wndTitleBar.h;
    RGB * o;
    RGB * buf = wnd->wholeContent;
    memset(buf, 118, h * w * 3);
    for(int i = 0; i < h; ++i) {
        for (int j = 0; j < h; ++j) {
80109cd8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80109cdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109cdf:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
80109ce2:	7c 82                	jl     80109c66 <drawWndTitleBar+0x77>
    int w = wnd->wndTitleBar.w;
    int h = wnd->wndTitleBar.h;
    RGB * o;
    RGB * buf = wnd->wholeContent;
    memset(buf, 118, h * w * 3);
    for(int i = 0; i < h; ++i) {
80109ce4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80109ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109ceb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
80109cee:	0f 8c 69 ff ff ff    	jl     80109c5d <drawWndTitleBar+0x6e>
        // o = buf +  i * w;
        // memset(o, 118, (w - h) * 3);
        // o = buf +  i * w + w - h ;
        // memset(o, 0,  h * 3);
    }
    drawStringToScreen(buf, (Point){10, 5}, (Size){h, w}, wnd->title, (RGBA){255, 255, 255, 255});
80109cf4:	c6 45 c8 ff          	movb   $0xff,-0x38(%ebp)
80109cf8:	c6 45 c9 ff          	movb   $0xff,-0x37(%ebp)
80109cfc:	c6 45 ca ff          	movb   $0xff,-0x36(%ebp)
80109d00:	c6 45 cb ff          	movb   $0xff,-0x35(%ebp)
80109d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109d07:	8b 40 30             	mov    0x30(%eax),%eax
80109d0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80109d0d:	89 55 cc             	mov    %edx,-0x34(%ebp)
80109d10:	8b 55 e8             	mov    -0x18(%ebp),%edx
80109d13:	89 55 d0             	mov    %edx,-0x30(%ebp)
80109d16:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
80109d1d:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
80109d24:	83 ec 04             	sub    $0x4,%esp
80109d27:	ff 75 c8             	pushl  -0x38(%ebp)
80109d2a:	50                   	push   %eax
80109d2b:	ff 75 d0             	pushl  -0x30(%ebp)
80109d2e:	ff 75 cc             	pushl  -0x34(%ebp)
80109d31:	ff 75 d8             	pushl  -0x28(%ebp)
80109d34:	ff 75 d4             	pushl  -0x2c(%ebp)
80109d37:	ff 75 e0             	pushl  -0x20(%ebp)
80109d3a:	e8 28 fa ff ff       	call   80109767 <drawStringToScreen>
80109d3f:	83 c4 20             	add    $0x20,%esp
    return 0;
80109d42:	b8 00 00 00 00       	mov    $0x0,%eax
}
80109d47:	c9                   	leave  
80109d48:	c3                   	ret    

80109d49 <repaintAllWindow>:

int repaintAllWindow(int hwnd) {
80109d49:	55                   	push   %ebp
80109d4a:	89 e5                	mov    %esp,%ebp
80109d4c:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < wndCount; ++i) {
80109d4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80109d56:	e9 2c 01 00 00       	jmp    80109e87 <repaintAllWindow+0x13e>
        switchuvm(wndInfoList[focusList[i]].procPtr);
80109d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109d5e:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109d65:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109d6b:	05 e0 d3 11 80       	add    $0x8011d3e0,%eax
80109d70:	8b 40 04             	mov    0x4(%eax),%eax
80109d73:	83 ec 0c             	sub    $0xc,%esp
80109d76:	50                   	push   %eax
80109d77:	e8 b2 e1 ff ff       	call   80107f2e <switchuvm>
80109d7c:	83 c4 10             	add    $0x10,%esp
        drawBitmapToScreen(screen_buf, wndInfoList[focusList[i]].wholeContent, 
        (Point){wndInfoList[focusList[i]].wndTitleBar.x, wndInfoList[focusList[i]].wndTitleBar.y},
        (Size){wndInfoList[focusList[i]].wndBody.h + wndInfoList[focusList[i]].wndTitleBar.h, wndInfoList[focusList[i]].wndBody.w});
80109d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109d82:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109d89:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109d8f:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
80109d94:	8b 50 0c             	mov    0xc(%eax),%edx
80109d97:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109d9a:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109da1:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109da7:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109dac:	8b 40 0c             	mov    0xc(%eax),%eax
80109daf:	01 d0                	add    %edx,%eax
80109db1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80109db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109db7:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109dbe:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109dc4:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
80109dc9:	8b 40 10             	mov    0x10(%eax),%eax
80109dcc:	89 45 e8             	mov    %eax,-0x18(%ebp)
int repaintAllWindow(int hwnd) {
    int i;
    for (i = 0; i < wndCount; ++i) {
        switchuvm(wndInfoList[focusList[i]].procPtr);
        drawBitmapToScreen(screen_buf, wndInfoList[focusList[i]].wholeContent, 
        (Point){wndInfoList[focusList[i]].wndTitleBar.x, wndInfoList[focusList[i]].wndTitleBar.y},
80109dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109dd2:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109dd9:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109ddf:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109de4:	8b 40 04             	mov    0x4(%eax),%eax
80109de7:	89 45 ec             	mov    %eax,-0x14(%ebp)
80109dea:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109ded:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109df4:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109dfa:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109dff:	8b 40 08             	mov    0x8(%eax),%eax
80109e02:	89 45 f0             	mov    %eax,-0x10(%ebp)

int repaintAllWindow(int hwnd) {
    int i;
    for (i = 0; i < wndCount; ++i) {
        switchuvm(wndInfoList[focusList[i]].procPtr);
        drawBitmapToScreen(screen_buf, wndInfoList[focusList[i]].wholeContent, 
80109e05:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109e08:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109e0f:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109e15:	05 e0 d3 11 80       	add    $0x8011d3e0,%eax
80109e1a:	8b 50 0c             	mov    0xc(%eax),%edx
80109e1d:	a1 44 37 11 80       	mov    0x80113744,%eax
80109e22:	83 ec 08             	sub    $0x8,%esp
80109e25:	ff 75 e8             	pushl  -0x18(%ebp)
80109e28:	ff 75 e4             	pushl  -0x1c(%ebp)
80109e2b:	ff 75 f0             	pushl  -0x10(%ebp)
80109e2e:	ff 75 ec             	pushl  -0x14(%ebp)
80109e31:	52                   	push   %edx
80109e32:	50                   	push   %eax
80109e33:	e8 71 f9 ff ff       	call   801097a9 <drawBitmapToScreen>
80109e38:	83 c4 20             	add    $0x20,%esp
        (Point){wndInfoList[focusList[i]].wndTitleBar.x, wndInfoList[focusList[i]].wndTitleBar.y},
        (Size){wndInfoList[focusList[i]].wndBody.h + wndInfoList[focusList[i]].wndTitleBar.h, wndInfoList[focusList[i]].wndBody.w});
        if (i == wndCount - 2) {
80109e3b:	a1 48 37 11 80       	mov    0x80113748,%eax
80109e40:	83 e8 02             	sub    $0x2,%eax
80109e43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80109e46:	75 18                	jne    80109e60 <repaintAllWindow+0x117>
            drawScreenToScreen(screen_wo_focus, screen_buf);
80109e48:	8b 15 44 37 11 80    	mov    0x80113744,%edx
80109e4e:	a1 40 37 11 80       	mov    0x80113740,%eax
80109e53:	83 ec 08             	sub    $0x8,%esp
80109e56:	52                   	push   %edx
80109e57:	50                   	push   %eax
80109e58:	e8 b2 fa ff ff       	call   8010990f <drawScreenToScreen>
80109e5d:	83 c4 10             	add    $0x10,%esp
        }
        if (proc == 0) {
80109e60:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80109e66:	85 c0                	test   %eax,%eax
80109e68:	75 07                	jne    80109e71 <repaintAllWindow+0x128>
            switchkvm();
80109e6a:	e8 a2 e0 ff ff       	call   80107f11 <switchkvm>
80109e6f:	eb 12                	jmp    80109e83 <repaintAllWindow+0x13a>
        } else {
            switchuvm(proc);
80109e71:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80109e77:	83 ec 0c             	sub    $0xc,%esp
80109e7a:	50                   	push   %eax
80109e7b:	e8 ae e0 ff ff       	call   80107f2e <switchuvm>
80109e80:	83 c4 10             	add    $0x10,%esp
    return 0;
}

int repaintAllWindow(int hwnd) {
    int i;
    for (i = 0; i < wndCount; ++i) {
80109e83:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80109e87:	a1 48 37 11 80       	mov    0x80113748,%eax
80109e8c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80109e8f:	0f 8c c6 fe ff ff    	jl     80109d5b <repaintAllWindow+0x12>
            switchkvm();
        } else {
            switchuvm(proc);
        }
    }
    drawScreenToScreen(screen, screen_buf);
80109e95:	8b 15 44 37 11 80    	mov    0x80113744,%edx
80109e9b:	a1 3c 37 11 80       	mov    0x8011373c,%eax
80109ea0:	83 ec 08             	sub    $0x8,%esp
80109ea3:	52                   	push   %edx
80109ea4:	50                   	push   %eax
80109ea5:	e8 65 fa ff ff       	call   8010990f <drawScreenToScreen>
80109eaa:	83 c4 10             	add    $0x10,%esp
    drawMouseToScreen(screen, 0, mousePos.x, mousePos.y);
80109ead:	8b 0d 50 37 11 80    	mov    0x80113750,%ecx
80109eb3:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
80109eb9:	a1 3c 37 11 80       	mov    0x8011373c,%eax
80109ebe:	51                   	push   %ecx
80109ebf:	52                   	push   %edx
80109ec0:	6a 00                	push   $0x0
80109ec2:	50                   	push   %eax
80109ec3:	e8 11 fa ff ff       	call   801098d9 <drawMouseToScreen>
80109ec8:	83 c4 10             	add    $0x10,%esp
    return 0;
80109ecb:	b8 00 00 00 00       	mov    $0x0,%eax
}
80109ed0:	c9                   	leave  
80109ed1:	c3                   	ret    

80109ed2 <focusOnWindow>:

int focusOnWindow(int hwnd) {
80109ed2:	55                   	push   %ebp
80109ed3:	89 e5                	mov    %esp,%ebp
80109ed5:	83 ec 18             	sub    $0x18,%esp
    focus = hwnd;
80109ed8:	8b 45 08             	mov    0x8(%ebp),%eax
80109edb:	a3 00 35 11 80       	mov    %eax,0x80113500
    if (wndCount >= 1 && hwnd == focusList[0]) {
80109ee0:	a1 48 37 11 80       	mov    0x80113748,%eax
80109ee5:	85 c0                	test   %eax,%eax
80109ee7:	7e 1f                	jle    80109f08 <focusOnWindow+0x36>
80109ee9:	a1 20 d3 11 80       	mov    0x8011d320,%eax
80109eee:	3b 45 08             	cmp    0x8(%ebp),%eax
80109ef1:	75 15                	jne    80109f08 <focusOnWindow+0x36>
        repaintAllWindow(hwnd);
80109ef3:	83 ec 0c             	sub    $0xc,%esp
80109ef6:	ff 75 08             	pushl  0x8(%ebp)
80109ef9:	e8 4b fe ff ff       	call   80109d49 <repaintAllWindow>
80109efe:	83 c4 10             	add    $0x10,%esp
        return 0;
80109f01:	b8 00 00 00 00       	mov    $0x0,%eax
80109f06:	eb 7e                	jmp    80109f86 <focusOnWindow+0xb4>
    }
    int i;
    for (i = 0; i < wndCount; ++i)
80109f08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80109f0f:	eb 13                	jmp    80109f24 <focusOnWindow+0x52>
    {
        if (focusList[i] == hwnd)
80109f11:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109f14:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
80109f1b:	3b 45 08             	cmp    0x8(%ebp),%eax
80109f1e:	74 10                	je     80109f30 <focusOnWindow+0x5e>
    if (wndCount >= 1 && hwnd == focusList[0]) {
        repaintAllWindow(hwnd);
        return 0;
    }
    int i;
    for (i = 0; i < wndCount; ++i)
80109f20:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80109f24:	a1 48 37 11 80       	mov    0x80113748,%eax
80109f29:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80109f2c:	7c e3                	jl     80109f11 <focusOnWindow+0x3f>
80109f2e:	eb 01                	jmp    80109f31 <focusOnWindow+0x5f>
    {
        if (focusList[i] == hwnd)
        {
            break;
80109f30:	90                   	nop
        }
    }

    int j;
    for (j = i; j < wndCount - 1; ++j)
80109f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
80109f37:	eb 1b                	jmp    80109f54 <focusOnWindow+0x82>
    {
        focusList[j] = focusList[j + 1];
80109f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109f3c:	83 c0 01             	add    $0x1,%eax
80109f3f:	8b 14 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%edx
80109f46:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109f49:	89 14 85 20 d3 11 80 	mov    %edx,-0x7fee2ce0(,%eax,4)
            break;
        }
    }

    int j;
    for (j = i; j < wndCount - 1; ++j)
80109f50:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80109f54:	a1 48 37 11 80       	mov    0x80113748,%eax
80109f59:	83 e8 01             	sub    $0x1,%eax
80109f5c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80109f5f:	7f d8                	jg     80109f39 <focusOnWindow+0x67>
    {
        focusList[j] = focusList[j + 1];
    }
    focusList[wndCount - 1] = hwnd;
80109f61:	a1 48 37 11 80       	mov    0x80113748,%eax
80109f66:	8d 50 ff             	lea    -0x1(%eax),%edx
80109f69:	8b 45 08             	mov    0x8(%ebp),%eax
80109f6c:	89 04 95 20 d3 11 80 	mov    %eax,-0x7fee2ce0(,%edx,4)

    repaintAllWindow(hwnd);
80109f73:	83 ec 0c             	sub    $0xc,%esp
80109f76:	ff 75 08             	pushl  0x8(%ebp)
80109f79:	e8 cb fd ff ff       	call   80109d49 <repaintAllWindow>
80109f7e:	83 c4 10             	add    $0x10,%esp
    return 0;
80109f81:	b8 00 00 00 00       	mov    $0x0,%eax
}
80109f86:	c9                   	leave  
80109f87:	c3                   	ret    

80109f88 <updateWindow>:

int updateWindow(int hwnd, int x, int y, int w, int h) {
80109f88:	55                   	push   %ebp
80109f89:	89 e5                	mov    %esp,%ebp
80109f8b:	83 ec 68             	sub    $0x68,%esp
    WndInfo * wnd = &wndInfoList[hwnd];
80109f8e:	8b 45 08             	mov    0x8(%ebp),%eax
80109f91:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
80109f97:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
80109f9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int bx = x;
80109f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
80109fa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int by = y;
80109fa5:	8b 45 10             	mov    0x10(%ebp),%eax
80109fa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int bh = wnd->wndBody.h;
80109fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109fae:	8b 40 1c             	mov    0x1c(%eax),%eax
80109fb1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int bw = wnd->wndBody.w;
80109fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109fb7:	8b 40 20             	mov    0x20(%eax),%eax
80109fba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    x = x + wnd->wndBody.x;
80109fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109fc0:	8b 40 14             	mov    0x14(%eax),%eax
80109fc3:	01 45 0c             	add    %eax,0xc(%ebp)
    y = y + wnd->wndBody.y;
80109fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80109fc9:	8b 40 18             	mov    0x18(%eax),%eax
80109fcc:	01 45 10             	add    %eax,0x10(%ebp)
    /*void drawRGBContentToContentPart(RGB *buf, RGB *img, int x, int y,*/
    /*int bx, int by, int bh, int bw, int h, int w)*/

    drawPartBitmapToScreen(screen_buf, wnd->content, (Point){x, y}, (Point){bx, by}, (Size){bh, bw}, (Size){h, w});
80109fcf:	8b 45 18             	mov    0x18(%ebp),%eax
80109fd2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
80109fd5:	8b 45 14             	mov    0x14(%ebp),%eax
80109fd8:	89 45 a8             	mov    %eax,-0x58(%ebp)
80109fdb:	8b 45 e8             	mov    -0x18(%ebp),%eax
80109fde:	89 45 ac             	mov    %eax,-0x54(%ebp)
80109fe1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80109fe4:	89 45 b0             	mov    %eax,-0x50(%ebp)
80109fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
80109fea:	89 45 b4             	mov    %eax,-0x4c(%ebp)
80109fed:	8b 45 ec             	mov    -0x14(%ebp),%eax
80109ff0:	89 45 b8             	mov    %eax,-0x48(%ebp)
80109ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
80109ff6:	89 45 bc             	mov    %eax,-0x44(%ebp)
80109ff9:	8b 45 10             	mov    0x10(%ebp),%eax
80109ffc:	89 45 c0             	mov    %eax,-0x40(%ebp)
80109fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010a002:	8b 50 28             	mov    0x28(%eax),%edx
8010a005:	a1 44 37 11 80       	mov    0x80113744,%eax
8010a00a:	83 ec 08             	sub    $0x8,%esp
8010a00d:	ff 75 a8             	pushl  -0x58(%ebp)
8010a010:	ff 75 a4             	pushl  -0x5c(%ebp)
8010a013:	ff 75 b0             	pushl  -0x50(%ebp)
8010a016:	ff 75 ac             	pushl  -0x54(%ebp)
8010a019:	ff 75 b8             	pushl  -0x48(%ebp)
8010a01c:	ff 75 b4             	pushl  -0x4c(%ebp)
8010a01f:	ff 75 c0             	pushl  -0x40(%ebp)
8010a022:	ff 75 bc             	pushl  -0x44(%ebp)
8010a025:	52                   	push   %edx
8010a026:	50                   	push   %eax
8010a027:	e8 e7 f7 ff ff       	call   80109813 <drawPartBitmapToScreen>
8010a02c:	83 c4 30             	add    $0x30,%esp
    drawPartBitmapToScreen(screen, wnd->content, (Point){x, y}, (Point){bx, by}, (Size){bh, bw}, (Size){h, w});
8010a02f:	8b 45 18             	mov    0x18(%ebp),%eax
8010a032:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010a035:	8b 45 14             	mov    0x14(%ebp),%eax
8010a038:	89 45 c8             	mov    %eax,-0x38(%ebp)
8010a03b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010a03e:	89 45 cc             	mov    %eax,-0x34(%ebp)
8010a041:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a044:	89 45 d0             	mov    %eax,-0x30(%ebp)
8010a047:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010a04a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8010a04d:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010a050:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010a053:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a056:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010a059:	8b 45 10             	mov    0x10(%ebp),%eax
8010a05c:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010a05f:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010a062:	8b 50 28             	mov    0x28(%eax),%edx
8010a065:	a1 3c 37 11 80       	mov    0x8011373c,%eax
8010a06a:	83 ec 08             	sub    $0x8,%esp
8010a06d:	ff 75 c8             	pushl  -0x38(%ebp)
8010a070:	ff 75 c4             	pushl  -0x3c(%ebp)
8010a073:	ff 75 d0             	pushl  -0x30(%ebp)
8010a076:	ff 75 cc             	pushl  -0x34(%ebp)
8010a079:	ff 75 d8             	pushl  -0x28(%ebp)
8010a07c:	ff 75 d4             	pushl  -0x2c(%ebp)
8010a07f:	ff 75 e0             	pushl  -0x20(%ebp)
8010a082:	ff 75 dc             	pushl  -0x24(%ebp)
8010a085:	52                   	push   %edx
8010a086:	50                   	push   %eax
8010a087:	e8 87 f7 ff ff       	call   80109813 <drawPartBitmapToScreen>
8010a08c:	83 c4 30             	add    $0x30,%esp
    return 0;
8010a08f:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010a094:	c9                   	leave  
8010a095:	c3                   	ret    

8010a096 <initGUIKernel>:

/*********************************************************
 * Initialization
**********************************************************/

void initGUIKernel() {
8010a096:	55                   	push   %ebp
8010a097:	89 e5                	mov    %esp,%ebp
8010a099:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; i < MAX_WINDOW_COUNT; ++i)
8010a09c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
8010a0a3:	eb 18                	jmp    8010a0bd <initGUIKernel+0x27>
        wndInfoList[i].hwnd = -1;
8010a0a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010a0a8:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a0ae:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010a0b3:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
/*********************************************************
 * Initialization
**********************************************************/

void initGUIKernel() {
    for(int i = 0; i < MAX_WINDOW_COUNT; ++i)
8010a0b9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
8010a0bd:	83 7d fc 09          	cmpl   $0x9,-0x4(%ebp)
8010a0c1:	7e e2                	jle    8010a0a5 <initGUIKernel+0xf>
        wndInfoList[i].hwnd = -1;

    timerInfo.ticks = -1;
8010a0c3:	c7 05 60 d3 11 80 ff 	movl   $0xffffffff,0x8011d360
8010a0ca:	ff ff ff 
    for(int i = 0; i < MAX_WINDOW_COUNT; ++i)
8010a0cd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
8010a0d4:	eb 23                	jmp    8010a0f9 <initGUIKernel+0x63>
    {
        timerInfo.intervalList[i] = -1;
8010a0d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010a0d9:	c7 04 85 64 d3 11 80 	movl   $0xffffffff,-0x7fee2c9c(,%eax,4)
8010a0e0:	ff ff ff ff 
        timerInfo.countList[i] = -1;
8010a0e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010a0e7:	83 c0 08             	add    $0x8,%eax
8010a0ea:	c7 04 85 6c d3 11 80 	movl   $0xffffffff,-0x7fee2c94(,%eax,4)
8010a0f1:	ff ff ff ff 
void initGUIKernel() {
    for(int i = 0; i < MAX_WINDOW_COUNT; ++i)
        wndInfoList[i].hwnd = -1;

    timerInfo.ticks = -1;
    for(int i = 0; i < MAX_WINDOW_COUNT; ++i)
8010a0f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
8010a0f9:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
8010a0fd:	7e d7                	jle    8010a0d6 <initGUIKernel+0x40>
    {
        timerInfo.intervalList[i] = -1;
        timerInfo.countList[i] = -1;
    }
}
8010a0ff:	90                   	nop
8010a100:	c9                   	leave  
8010a101:	c3                   	ret    

8010a102 <initMsgQueue>:

/*********************************************************
 * Handle Message 
**********************************************************/
void initMsgQueue(MsgQueue * msgQ) {
8010a102:	55                   	push   %ebp
8010a103:	89 e5                	mov    %esp,%ebp
8010a105:	83 ec 08             	sub    $0x8,%esp
    msgQ->head = 0;
8010a108:	8b 45 08             	mov    0x8(%ebp),%eax
8010a10b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    msgQ->tail = 0;
8010a111:	8b 45 08             	mov    0x8(%ebp),%eax
8010a114:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    msgQ->length = 0;
8010a11b:	8b 45 08             	mov    0x8(%ebp),%eax
8010a11e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    memset(msgQ->msgList, 0, MAX_MSG_COUNT * sizeof(message));
8010a125:	8b 45 08             	mov    0x8(%ebp),%eax
8010a128:	83 c0 0c             	add    $0xc,%eax
8010a12b:	83 ec 04             	sub    $0x4,%esp
8010a12e:	68 98 08 00 00       	push   $0x898
8010a133:	6a 00                	push   $0x0
8010a135:	50                   	push   %eax
8010a136:	e8 18 b2 ff ff       	call   80105353 <memset>
8010a13b:	83 c4 10             	add    $0x10,%esp
}
8010a13e:	90                   	nop
8010a13f:	c9                   	leave  
8010a140:	c3                   	ret    

8010a141 <isQueueEmpty>:

int isQueueEmpty(MsgQueue *msgQ) {
8010a141:	55                   	push   %ebp
8010a142:	89 e5                	mov    %esp,%ebp
    if(msgQ->head==msgQ->tail)
8010a144:	8b 45 08             	mov    0x8(%ebp),%eax
8010a147:	8b 10                	mov    (%eax),%edx
8010a149:	8b 45 08             	mov    0x8(%ebp),%eax
8010a14c:	8b 40 04             	mov    0x4(%eax),%eax
8010a14f:	39 c2                	cmp    %eax,%edx
8010a151:	75 07                	jne    8010a15a <isQueueEmpty+0x19>
        return 1;
8010a153:	b8 01 00 00 00       	mov    $0x1,%eax
8010a158:	eb 05                	jmp    8010a15f <isQueueEmpty+0x1e>
    else
        return 0;
8010a15a:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010a15f:	5d                   	pop    %ebp
8010a160:	c3                   	ret    

8010a161 <isQueueFull>:

int isQueueFull(MsgQueue *msgQ) {
8010a161:	55                   	push   %ebp
8010a162:	89 e5                	mov    %esp,%ebp
8010a164:	53                   	push   %ebx
    if(msgQ->head==(msgQ->tail + 1) % MAX_MSG_COUNT)
8010a165:	8b 45 08             	mov    0x8(%ebp),%eax
8010a168:	8b 18                	mov    (%eax),%ebx
8010a16a:	8b 45 08             	mov    0x8(%ebp),%eax
8010a16d:	8b 40 04             	mov    0x4(%eax),%eax
8010a170:	8d 48 01             	lea    0x1(%eax),%ecx
8010a173:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
8010a178:	89 c8                	mov    %ecx,%eax
8010a17a:	f7 ea                	imul   %edx
8010a17c:	c1 fa 04             	sar    $0x4,%edx
8010a17f:	89 c8                	mov    %ecx,%eax
8010a181:	c1 f8 1f             	sar    $0x1f,%eax
8010a184:	29 c2                	sub    %eax,%edx
8010a186:	89 d0                	mov    %edx,%eax
8010a188:	6b c0 32             	imul   $0x32,%eax,%eax
8010a18b:	29 c1                	sub    %eax,%ecx
8010a18d:	89 c8                	mov    %ecx,%eax
8010a18f:	39 c3                	cmp    %eax,%ebx
8010a191:	75 07                	jne    8010a19a <isQueueFull+0x39>
        return 1;
8010a193:	b8 01 00 00 00       	mov    $0x1,%eax
8010a198:	eb 05                	jmp    8010a19f <isQueueFull+0x3e>
    else
        return 0;
8010a19a:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010a19f:	5b                   	pop    %ebx
8010a1a0:	5d                   	pop    %ebp
8010a1a1:	c3                   	ret    

8010a1a2 <addMsgToQueue>:

int addMsgToQueue(MsgQueue *msgQ, message *msg) {
8010a1a2:	55                   	push   %ebp
8010a1a3:	89 e5                	mov    %esp,%ebp
8010a1a5:	83 ec 08             	sub    $0x8,%esp
    if(msg->msg_type == M_CLOSE_WINDOW)
8010a1a8:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a1ab:	8b 00                	mov    (%eax),%eax
8010a1ad:	83 f8 0a             	cmp    $0xa,%eax
8010a1b0:	75 15                	jne    8010a1c7 <addMsgToQueue+0x25>
    {
         msgQ->msgList[msgQ->tail].msg_type = M_CLOSE_WINDOW;
8010a1b2:	8b 45 08             	mov    0x8(%ebp),%eax
8010a1b5:	8b 40 04             	mov    0x4(%eax),%eax
8010a1b8:	8b 55 08             	mov    0x8(%ebp),%edx
8010a1bb:	6b c0 2c             	imul   $0x2c,%eax,%eax
8010a1be:	01 d0                	add    %edx,%eax
8010a1c0:	c7 40 0c 0a 00 00 00 	movl   $0xa,0xc(%eax)
    }
    if(isQueueFull(msgQ))
8010a1c7:	ff 75 08             	pushl  0x8(%ebp)
8010a1ca:	e8 92 ff ff ff       	call   8010a161 <isQueueFull>
8010a1cf:	83 c4 04             	add    $0x4,%esp
8010a1d2:	85 c0                	test   %eax,%eax
8010a1d4:	74 07                	je     8010a1dd <addMsgToQueue+0x3b>
        return 0;
8010a1d6:	b8 00 00 00 00       	mov    $0x0,%eax
8010a1db:	eb 7b                	jmp    8010a258 <addMsgToQueue+0xb6>
    msgQ->msgList[msgQ->tail].msg_type = msg->msg_type;
8010a1dd:	8b 45 08             	mov    0x8(%ebp),%eax
8010a1e0:	8b 50 04             	mov    0x4(%eax),%edx
8010a1e3:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a1e6:	8b 00                	mov    (%eax),%eax
8010a1e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010a1eb:	6b d2 2c             	imul   $0x2c,%edx,%edx
8010a1ee:	01 ca                	add    %ecx,%edx
8010a1f0:	89 42 0c             	mov    %eax,0xc(%edx)
    memmove(msgQ->msgList[msgQ->tail].params, msg->params, 10 * sizeof(int));
8010a1f3:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a1f6:	8d 50 04             	lea    0x4(%eax),%edx
8010a1f9:	8b 45 08             	mov    0x8(%ebp),%eax
8010a1fc:	8b 40 04             	mov    0x4(%eax),%eax
8010a1ff:	6b c8 2c             	imul   $0x2c,%eax,%ecx
8010a202:	8b 45 08             	mov    0x8(%ebp),%eax
8010a205:	01 c8                	add    %ecx,%eax
8010a207:	83 c0 10             	add    $0x10,%eax
8010a20a:	83 ec 04             	sub    $0x4,%esp
8010a20d:	6a 28                	push   $0x28
8010a20f:	52                   	push   %edx
8010a210:	50                   	push   %eax
8010a211:	e8 fc b1 ff ff       	call   80105412 <memmove>
8010a216:	83 c4 10             	add    $0x10,%esp
    msgQ->tail = (msgQ->tail + 1) % MAX_MSG_COUNT;
8010a219:	8b 45 08             	mov    0x8(%ebp),%eax
8010a21c:	8b 40 04             	mov    0x4(%eax),%eax
8010a21f:	8d 48 01             	lea    0x1(%eax),%ecx
8010a222:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
8010a227:	89 c8                	mov    %ecx,%eax
8010a229:	f7 ea                	imul   %edx
8010a22b:	c1 fa 04             	sar    $0x4,%edx
8010a22e:	89 c8                	mov    %ecx,%eax
8010a230:	c1 f8 1f             	sar    $0x1f,%eax
8010a233:	29 c2                	sub    %eax,%edx
8010a235:	89 d0                	mov    %edx,%eax
8010a237:	6b c0 32             	imul   $0x32,%eax,%eax
8010a23a:	29 c1                	sub    %eax,%ecx
8010a23c:	89 c8                	mov    %ecx,%eax
8010a23e:	8b 55 08             	mov    0x8(%ebp),%edx
8010a241:	89 42 04             	mov    %eax,0x4(%edx)
    msgQ->length++;
8010a244:	8b 45 08             	mov    0x8(%ebp),%eax
8010a247:	8b 40 08             	mov    0x8(%eax),%eax
8010a24a:	8d 50 01             	lea    0x1(%eax),%edx
8010a24d:	8b 45 08             	mov    0x8(%ebp),%eax
8010a250:	89 50 08             	mov    %edx,0x8(%eax)
    return 1;
8010a253:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010a258:	c9                   	leave  
8010a259:	c3                   	ret    

8010a25a <dispatchMessage>:

int dispatchMessage(int hwnd, message *msg) {
8010a25a:	55                   	push   %ebp
8010a25b:	89 e5                	mov    %esp,%ebp
8010a25d:	83 ec 08             	sub    $0x8,%esp
    if(addMsgToQueue(&wndInfoList[hwnd].msgQ, msg))
8010a260:	8b 45 08             	mov    0x8(%ebp),%eax
8010a263:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a269:	83 c0 30             	add    $0x30,%eax
8010a26c:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010a271:	83 c0 04             	add    $0x4,%eax
8010a274:	83 ec 08             	sub    $0x8,%esp
8010a277:	ff 75 0c             	pushl  0xc(%ebp)
8010a27a:	50                   	push   %eax
8010a27b:	e8 22 ff ff ff       	call   8010a1a2 <addMsgToQueue>
8010a280:	83 c4 10             	add    $0x10,%esp
8010a283:	85 c0                	test   %eax,%eax
8010a285:	74 07                	je     8010a28e <dispatchMessage+0x34>
        return 1;
8010a287:	b8 01 00 00 00       	mov    $0x1,%eax
8010a28c:	eb 05                	jmp    8010a293 <dispatchMessage+0x39>
    return 0;
8010a28e:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010a293:	c9                   	leave  
8010a294:	c3                   	ret    

8010a295 <getMessageFromQueue>:

int getMessageFromQueue(MsgQueue *msgQ, message * msg) {
8010a295:	55                   	push   %ebp
8010a296:	89 e5                	mov    %esp,%ebp
8010a298:	83 ec 08             	sub    $0x8,%esp
    if(isQueueEmpty(msgQ))
8010a29b:	ff 75 08             	pushl  0x8(%ebp)
8010a29e:	e8 9e fe ff ff       	call   8010a141 <isQueueEmpty>
8010a2a3:	83 c4 04             	add    $0x4,%esp
8010a2a6:	85 c0                	test   %eax,%eax
8010a2a8:	74 07                	je     8010a2b1 <getMessageFromQueue+0x1c>
        return 0;
8010a2aa:	b8 00 00 00 00       	mov    $0x0,%eax
8010a2af:	eb 77                	jmp    8010a328 <getMessageFromQueue+0x93>
    msg->msg_type = msgQ->msgList[msgQ->head].msg_type;
8010a2b1:	8b 45 08             	mov    0x8(%ebp),%eax
8010a2b4:	8b 00                	mov    (%eax),%eax
8010a2b6:	8b 55 08             	mov    0x8(%ebp),%edx
8010a2b9:	6b c0 2c             	imul   $0x2c,%eax,%eax
8010a2bc:	01 d0                	add    %edx,%eax
8010a2be:	8b 50 0c             	mov    0xc(%eax),%edx
8010a2c1:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a2c4:	89 10                	mov    %edx,(%eax)
    memmove(msg->params, msgQ->msgList[msgQ->head].params, 10 * sizeof(int));
8010a2c6:	8b 45 08             	mov    0x8(%ebp),%eax
8010a2c9:	8b 00                	mov    (%eax),%eax
8010a2cb:	6b d0 2c             	imul   $0x2c,%eax,%edx
8010a2ce:	8b 45 08             	mov    0x8(%ebp),%eax
8010a2d1:	01 d0                	add    %edx,%eax
8010a2d3:	8d 50 10             	lea    0x10(%eax),%edx
8010a2d6:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a2d9:	83 c0 04             	add    $0x4,%eax
8010a2dc:	83 ec 04             	sub    $0x4,%esp
8010a2df:	6a 28                	push   $0x28
8010a2e1:	52                   	push   %edx
8010a2e2:	50                   	push   %eax
8010a2e3:	e8 2a b1 ff ff       	call   80105412 <memmove>
8010a2e8:	83 c4 10             	add    $0x10,%esp
    msgQ->head=(msgQ->head + 1) % MAX_MSG_COUNT;
8010a2eb:	8b 45 08             	mov    0x8(%ebp),%eax
8010a2ee:	8b 00                	mov    (%eax),%eax
8010a2f0:	8d 48 01             	lea    0x1(%eax),%ecx
8010a2f3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
8010a2f8:	89 c8                	mov    %ecx,%eax
8010a2fa:	f7 ea                	imul   %edx
8010a2fc:	c1 fa 04             	sar    $0x4,%edx
8010a2ff:	89 c8                	mov    %ecx,%eax
8010a301:	c1 f8 1f             	sar    $0x1f,%eax
8010a304:	29 c2                	sub    %eax,%edx
8010a306:	89 d0                	mov    %edx,%eax
8010a308:	6b c0 32             	imul   $0x32,%eax,%eax
8010a30b:	29 c1                	sub    %eax,%ecx
8010a30d:	89 c8                	mov    %ecx,%eax
8010a30f:	8b 55 08             	mov    0x8(%ebp),%edx
8010a312:	89 02                	mov    %eax,(%edx)
    msgQ->length--;
8010a314:	8b 45 08             	mov    0x8(%ebp),%eax
8010a317:	8b 40 08             	mov    0x8(%eax),%eax
8010a31a:	8d 50 ff             	lea    -0x1(%eax),%edx
8010a31d:	8b 45 08             	mov    0x8(%ebp),%eax
8010a320:	89 50 08             	mov    %edx,0x8(%eax)
    return 1;
8010a323:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010a328:	c9                   	leave  
8010a329:	c3                   	ret    

8010a32a <guiKernelHandleMsg>:

void guiKernelHandleMsg(message *msg) {
8010a32a:	55                   	push   %ebp
8010a32b:	89 e5                	mov    %esp,%ebp
8010a32d:	53                   	push   %ebx
8010a32e:	81 ec c4 00 00 00    	sub    $0xc4,%esp
    acquire(&guiKernelLock);
8010a334:	83 ec 0c             	sub    $0xc,%esp
8010a337:	68 40 2c 12 80       	push   $0x80122c40
8010a33c:	e8 af ad ff ff       	call   801050f0 <acquire>
8010a341:	83 c4 10             	add    $0x10,%esp
    message tempMsg;
    int i;
    int tempR;
    switch(msg->msg_type)
8010a344:	8b 45 08             	mov    0x8(%ebp),%eax
8010a347:	8b 00                	mov    (%eax),%eax
8010a349:	83 f8 09             	cmp    $0x9,%eax
8010a34c:	0f 87 3a 09 00 00    	ja     8010ac8c <guiKernelHandleMsg+0x962>
8010a352:	8b 04 85 64 0b 11 80 	mov    -0x7feef49c(,%eax,4),%eax
8010a359:	ff e0                	jmp    *%eax
    {
    case M_MOUSE_MOVE:
        lastMousePos = mousePos;
8010a35b:	a1 4c 37 11 80       	mov    0x8011374c,%eax
8010a360:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010a366:	a3 54 37 11 80       	mov    %eax,0x80113754
8010a36b:	89 15 58 37 11 80    	mov    %edx,0x80113758
        mousePos.x += msg->params[0] * MOUSE_SPEED_X;
8010a371:	a1 4c 37 11 80       	mov    0x8011374c,%eax
8010a376:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
8010a37c:	db 85 3c ff ff ff    	fildl  -0xc4(%ebp)
8010a382:	8b 45 08             	mov    0x8(%ebp),%eax
8010a385:	8b 40 04             	mov    0x4(%eax),%eax
8010a388:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
8010a38e:	db 85 3c ff ff ff    	fildl  -0xc4(%ebp)
8010a394:	d9 05 8c 0b 11 80    	flds   0x80110b8c
8010a39a:	de c9                	fmulp  %st,%st(1)
8010a39c:	de c1                	faddp  %st,%st(1)
8010a39e:	d9 bd 46 ff ff ff    	fnstcw -0xba(%ebp)
8010a3a4:	0f b7 85 46 ff ff ff 	movzwl -0xba(%ebp),%eax
8010a3ab:	b4 0c                	mov    $0xc,%ah
8010a3ad:	66 89 85 44 ff ff ff 	mov    %ax,-0xbc(%ebp)
8010a3b4:	d9 ad 44 ff ff ff    	fldcw  -0xbc(%ebp)
8010a3ba:	db 9d 40 ff ff ff    	fistpl -0xc0(%ebp)
8010a3c0:	d9 ad 46 ff ff ff    	fldcw  -0xba(%ebp)
8010a3c6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
8010a3cc:	a3 4c 37 11 80       	mov    %eax,0x8011374c
        mousePos.y += msg->params[1] * MOUSE_SPEED_Y;
8010a3d1:	a1 50 37 11 80       	mov    0x80113750,%eax
8010a3d6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
8010a3dc:	db 85 3c ff ff ff    	fildl  -0xc4(%ebp)
8010a3e2:	8b 45 08             	mov    0x8(%ebp),%eax
8010a3e5:	8b 40 08             	mov    0x8(%eax),%eax
8010a3e8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
8010a3ee:	db 85 3c ff ff ff    	fildl  -0xc4(%ebp)
8010a3f4:	d9 05 90 0b 11 80    	flds   0x80110b90
8010a3fa:	de c9                	fmulp  %st,%st(1)
8010a3fc:	de c1                	faddp  %st,%st(1)
8010a3fe:	d9 ad 44 ff ff ff    	fldcw  -0xbc(%ebp)
8010a404:	db 9d 40 ff ff ff    	fistpl -0xc0(%ebp)
8010a40a:	d9 ad 46 ff ff ff    	fldcw  -0xba(%ebp)
8010a410:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
8010a416:	a3 50 37 11 80       	mov    %eax,0x80113750
        if (mousePos.x < 0) {
8010a41b:	a1 4c 37 11 80       	mov    0x8011374c,%eax
8010a420:	85 c0                	test   %eax,%eax
8010a422:	79 0a                	jns    8010a42e <guiKernelHandleMsg+0x104>
            mousePos.x = 0;
8010a424:	c7 05 4c 37 11 80 00 	movl   $0x0,0x8011374c
8010a42b:	00 00 00 
        }
        if (mousePos.x > SCREEN_WIDTH) {
8010a42e:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010a434:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
8010a43b:	0f b7 c0             	movzwl %ax,%eax
8010a43e:	39 c2                	cmp    %eax,%edx
8010a440:	7e 0f                	jle    8010a451 <guiKernelHandleMsg+0x127>
            mousePos.x = SCREEN_WIDTH;
8010a442:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
8010a449:	0f b7 c0             	movzwl %ax,%eax
8010a44c:	a3 4c 37 11 80       	mov    %eax,0x8011374c
        }
        if (mousePos.y < 0) {
8010a451:	a1 50 37 11 80       	mov    0x80113750,%eax
8010a456:	85 c0                	test   %eax,%eax
8010a458:	79 0a                	jns    8010a464 <guiKernelHandleMsg+0x13a>
            mousePos.y = 0;
8010a45a:	c7 05 50 37 11 80 00 	movl   $0x0,0x80113750
8010a461:	00 00 00 
        }
        if (mousePos.y > SCREEN_WIDTH) {
8010a464:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010a46a:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
8010a471:	0f b7 c0             	movzwl %ax,%eax
8010a474:	39 c2                	cmp    %eax,%edx
8010a476:	7e 0f                	jle    8010a487 <guiKernelHandleMsg+0x15d>
            mousePos.y = SCREEN_WIDTH;
8010a478:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
8010a47f:	0f b7 c0             	movzwl %ax,%eax
8010a482:	a3 50 37 11 80       	mov    %eax,0x80113750
        }
        if (mouseDownInBar) {
8010a487:	a1 60 37 11 80       	mov    0x80113760,%eax
8010a48c:	85 c0                	test   %eax,%eax
8010a48e:	0f 84 23 03 00 00    	je     8010a7b7 <guiKernelHandleMsg+0x48d>
            int dx = mousePos.x - lastMousePos.x;
8010a494:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010a49a:	a1 54 37 11 80       	mov    0x80113754,%eax
8010a49f:	29 c2                	sub    %eax,%edx
8010a4a1:	89 d0                	mov    %edx,%eax
8010a4a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
            int dy = mousePos.y - lastMousePos.y;
8010a4a6:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010a4ac:	a1 58 37 11 80       	mov    0x80113758,%eax
8010a4b1:	29 c2                	sub    %eax,%edx
8010a4b3:	89 d0                	mov    %edx,%eax
8010a4b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
            WndInfo* wnd = &wndInfoList[focus];
8010a4b8:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a4bd:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a4c3:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010a4c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            int nx = wndInfoList[focus].wndTitleBar.x + dx;
8010a4cb:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a4d0:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a4d6:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010a4db:	8b 50 04             	mov    0x4(%eax),%edx
8010a4de:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010a4e1:	01 d0                	add    %edx,%eax
8010a4e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
            int ny = wndInfoList[focus].wndTitleBar.y + dy;
8010a4e6:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a4eb:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a4f1:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010a4f6:	8b 50 08             	mov    0x8(%eax),%edx
8010a4f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010a4fc:	01 d0                	add    %edx,%eax
8010a4fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
            drawPartBitmapToScreen(screen_buf, screen_wo_focus, (Point){wnd->wndTitleBar.x, wnd->wndTitleBar.y},
            (Point){wnd->wndTitleBar.x, wnd->wndTitleBar.y}, (Size){SCREEN_HEIGHT, SCREEN_WIDTH}, (Size){wnd->wndBody.h + wnd->wndTitleBar.h, wnd->wndBody.w});
8010a501:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a504:	8b 50 1c             	mov    0x1c(%eax),%edx
8010a507:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a50a:	8b 40 0c             	mov    0xc(%eax),%eax
8010a50d:	01 d0                	add    %edx,%eax
8010a50f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
8010a515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a518:	8b 40 20             	mov    0x20(%eax),%eax
8010a51b:	89 45 80             	mov    %eax,-0x80(%ebp)
8010a51e:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
8010a525:	0f b7 c0             	movzwl %ax,%eax
8010a528:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010a52b:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
8010a532:	0f b7 c0             	movzwl %ax,%eax
8010a535:	89 45 88             	mov    %eax,-0x78(%ebp)
8010a538:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a53b:	8b 40 04             	mov    0x4(%eax),%eax
8010a53e:	89 45 8c             	mov    %eax,-0x74(%ebp)
8010a541:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a544:	8b 40 08             	mov    0x8(%eax),%eax
8010a547:	89 45 90             	mov    %eax,-0x70(%ebp)
            int dx = mousePos.x - lastMousePos.x;
            int dy = mousePos.y - lastMousePos.y;
            WndInfo* wnd = &wndInfoList[focus];
            int nx = wndInfoList[focus].wndTitleBar.x + dx;
            int ny = wndInfoList[focus].wndTitleBar.y + dy;
            drawPartBitmapToScreen(screen_buf, screen_wo_focus, (Point){wnd->wndTitleBar.x, wnd->wndTitleBar.y},
8010a54a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a54d:	8b 40 04             	mov    0x4(%eax),%eax
8010a550:	89 45 94             	mov    %eax,-0x6c(%ebp)
8010a553:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a556:	8b 40 08             	mov    0x8(%eax),%eax
8010a559:	89 45 98             	mov    %eax,-0x68(%ebp)
8010a55c:	8b 15 40 37 11 80    	mov    0x80113740,%edx
8010a562:	a1 44 37 11 80       	mov    0x80113744,%eax
8010a567:	83 ec 08             	sub    $0x8,%esp
8010a56a:	ff 75 80             	pushl  -0x80(%ebp)
8010a56d:	ff b5 7c ff ff ff    	pushl  -0x84(%ebp)
8010a573:	ff 75 88             	pushl  -0x78(%ebp)
8010a576:	ff 75 84             	pushl  -0x7c(%ebp)
8010a579:	ff 75 90             	pushl  -0x70(%ebp)
8010a57c:	ff 75 8c             	pushl  -0x74(%ebp)
8010a57f:	ff 75 98             	pushl  -0x68(%ebp)
8010a582:	ff 75 94             	pushl  -0x6c(%ebp)
8010a585:	52                   	push   %edx
8010a586:	50                   	push   %eax
8010a587:	e8 87 f2 ff ff       	call   80109813 <drawPartBitmapToScreen>
8010a58c:	83 c4 30             	add    $0x30,%esp
            (Point){wnd->wndTitleBar.x, wnd->wndTitleBar.y}, (Size){SCREEN_HEIGHT, SCREEN_WIDTH}, (Size){wnd->wndBody.h + wnd->wndTitleBar.h, wnd->wndBody.w});
            switchuvm(wndInfoList[focus].procPtr);
8010a58f:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a594:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a59a:	05 e0 d3 11 80       	add    $0x8011d3e0,%eax
8010a59f:	8b 40 04             	mov    0x4(%eax),%eax
8010a5a2:	83 ec 0c             	sub    $0xc,%esp
8010a5a5:	50                   	push   %eax
8010a5a6:	e8 83 d9 ff ff       	call   80107f2e <switchuvm>
8010a5ab:	83 c4 10             	add    $0x10,%esp
            drawBitmapToScreen(screen_buf, wnd->wholeContent, (Point){nx, ny}, (Size){wnd->wndBody.h + wnd->wndTitleBar.h, wnd->wndBody.w});
8010a5ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a5b1:	8b 50 1c             	mov    0x1c(%eax),%edx
8010a5b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a5b7:	8b 40 0c             	mov    0xc(%eax),%eax
8010a5ba:	01 d0                	add    %edx,%eax
8010a5bc:	89 45 9c             	mov    %eax,-0x64(%ebp)
8010a5bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a5c2:	8b 40 20             	mov    0x20(%eax),%eax
8010a5c5:	89 45 a0             	mov    %eax,-0x60(%ebp)
8010a5c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010a5cb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
8010a5ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010a5d1:	89 45 a8             	mov    %eax,-0x58(%ebp)
8010a5d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a5d7:	8b 50 2c             	mov    0x2c(%eax),%edx
8010a5da:	a1 44 37 11 80       	mov    0x80113744,%eax
8010a5df:	83 ec 08             	sub    $0x8,%esp
8010a5e2:	ff 75 a0             	pushl  -0x60(%ebp)
8010a5e5:	ff 75 9c             	pushl  -0x64(%ebp)
8010a5e8:	ff 75 a8             	pushl  -0x58(%ebp)
8010a5eb:	ff 75 a4             	pushl  -0x5c(%ebp)
8010a5ee:	52                   	push   %edx
8010a5ef:	50                   	push   %eax
8010a5f0:	e8 b4 f1 ff ff       	call   801097a9 <drawBitmapToScreen>
8010a5f5:	83 c4 20             	add    $0x20,%esp
            int bx = min(wnd->wndTitleBar.x, nx);
8010a5f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a5fb:	8b 40 04             	mov    0x4(%eax),%eax
8010a5fe:	83 ec 08             	sub    $0x8,%esp
8010a601:	ff 75 e0             	pushl  -0x20(%ebp)
8010a604:	50                   	push   %eax
8010a605:	e8 e6 f3 ff ff       	call   801099f0 <min>
8010a60a:	83 c4 10             	add    $0x10,%esp
8010a60d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int bw = wnd->wndBody.w + abs(dx);
8010a610:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a613:	8b 40 20             	mov    0x20(%eax),%eax
8010a616:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
8010a61c:	db 85 3c ff ff ff    	fildl  -0xc4(%ebp)
8010a622:	d9 9d 3c ff ff ff    	fstps  -0xc4(%ebp)
8010a628:	db 45 ec             	fildl  -0x14(%ebp)
8010a62b:	83 ec 0c             	sub    $0xc,%esp
8010a62e:	8d 64 24 fc          	lea    -0x4(%esp),%esp
8010a632:	d9 1c 24             	fstps  (%esp)
8010a635:	e8 e4 17 00 00       	call   8010be1e <abs>
8010a63a:	83 c4 10             	add    $0x10,%esp
8010a63d:	d8 85 3c ff ff ff    	fadds  -0xc4(%ebp)
8010a643:	d9 bd 46 ff ff ff    	fnstcw -0xba(%ebp)
8010a649:	0f b7 85 46 ff ff ff 	movzwl -0xba(%ebp),%eax
8010a650:	b4 0c                	mov    $0xc,%ah
8010a652:	66 89 85 44 ff ff ff 	mov    %ax,-0xbc(%ebp)
8010a659:	d9 ad 44 ff ff ff    	fldcw  -0xbc(%ebp)
8010a65f:	db 5d d4             	fistpl -0x2c(%ebp)
8010a662:	d9 ad 46 ff ff ff    	fldcw  -0xba(%ebp)
            int by = min(wnd->wndTitleBar.y, ny);
8010a668:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a66b:	8b 40 08             	mov    0x8(%eax),%eax
8010a66e:	83 ec 08             	sub    $0x8,%esp
8010a671:	ff 75 dc             	pushl  -0x24(%ebp)
8010a674:	50                   	push   %eax
8010a675:	e8 76 f3 ff ff       	call   801099f0 <min>
8010a67a:	83 c4 10             	add    $0x10,%esp
8010a67d:	89 45 d0             	mov    %eax,-0x30(%ebp)
            int bh = wnd->wndBody.h + abs(dy) + UTITLE_HEIGHT;
8010a680:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a683:	8b 40 1c             	mov    0x1c(%eax),%eax
8010a686:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
8010a68c:	db 85 3c ff ff ff    	fildl  -0xc4(%ebp)
8010a692:	d9 9d 3c ff ff ff    	fstps  -0xc4(%ebp)
8010a698:	db 45 e8             	fildl  -0x18(%ebp)
8010a69b:	83 ec 0c             	sub    $0xc,%esp
8010a69e:	8d 64 24 fc          	lea    -0x4(%esp),%esp
8010a6a2:	d9 1c 24             	fstps  (%esp)
8010a6a5:	e8 74 17 00 00       	call   8010be1e <abs>
8010a6aa:	83 c4 10             	add    $0x10,%esp
8010a6ad:	d9 85 3c ff ff ff    	flds   -0xc4(%ebp)
8010a6b3:	de c1                	faddp  %st,%st(1)
8010a6b5:	d9 05 94 0b 11 80    	flds   0x80110b94
8010a6bb:	de c1                	faddp  %st,%st(1)
8010a6bd:	d9 bd 46 ff ff ff    	fnstcw -0xba(%ebp)
8010a6c3:	0f b7 85 46 ff ff ff 	movzwl -0xba(%ebp),%eax
8010a6ca:	b4 0c                	mov    $0xc,%ah
8010a6cc:	66 89 85 44 ff ff ff 	mov    %ax,-0xbc(%ebp)
8010a6d3:	d9 ad 44 ff ff ff    	fldcw  -0xbc(%ebp)
8010a6d9:	db 5d cc             	fistpl -0x34(%ebp)
8010a6dc:	d9 ad 46 ff ff ff    	fldcw  -0xba(%ebp)
            drawPartBitmapToScreen(screen, screen_buf, (Point){bx, by}, (Point){bx, by}, (Size){SCREEN_HEIGHT, SCREEN_WIDTH}, (Size){bh, bw});
8010a6e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
8010a6e5:	89 45 ac             	mov    %eax,-0x54(%ebp)
8010a6e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8010a6eb:	89 45 b0             	mov    %eax,-0x50(%ebp)
8010a6ee:	0f b7 05 46 d2 11 80 	movzwl 0x8011d246,%eax
8010a6f5:	0f b7 c0             	movzwl %ax,%eax
8010a6f8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010a6fb:	0f b7 05 3c d2 11 80 	movzwl 0x8011d23c,%eax
8010a702:	0f b7 c0             	movzwl %ax,%eax
8010a705:	89 45 b8             	mov    %eax,-0x48(%ebp)
8010a708:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010a70b:	89 45 bc             	mov    %eax,-0x44(%ebp)
8010a70e:	8b 45 d0             	mov    -0x30(%ebp),%eax
8010a711:	89 45 c0             	mov    %eax,-0x40(%ebp)
8010a714:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010a717:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010a71a:	8b 45 d0             	mov    -0x30(%ebp),%eax
8010a71d:	89 45 c8             	mov    %eax,-0x38(%ebp)
8010a720:	8b 15 44 37 11 80    	mov    0x80113744,%edx
8010a726:	a1 3c 37 11 80       	mov    0x8011373c,%eax
8010a72b:	83 ec 08             	sub    $0x8,%esp
8010a72e:	ff 75 b0             	pushl  -0x50(%ebp)
8010a731:	ff 75 ac             	pushl  -0x54(%ebp)
8010a734:	ff 75 b8             	pushl  -0x48(%ebp)
8010a737:	ff 75 b4             	pushl  -0x4c(%ebp)
8010a73a:	ff 75 c0             	pushl  -0x40(%ebp)
8010a73d:	ff 75 bc             	pushl  -0x44(%ebp)
8010a740:	ff 75 c8             	pushl  -0x38(%ebp)
8010a743:	ff 75 c4             	pushl  -0x3c(%ebp)
8010a746:	52                   	push   %edx
8010a747:	50                   	push   %eax
8010a748:	e8 c6 f0 ff ff       	call   80109813 <drawPartBitmapToScreen>
8010a74d:	83 c4 30             	add    $0x30,%esp
            wnd->wndTitleBar.x += dx;
8010a750:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a753:	8b 50 04             	mov    0x4(%eax),%edx
8010a756:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010a759:	01 c2                	add    %eax,%edx
8010a75b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a75e:	89 50 04             	mov    %edx,0x4(%eax)
            wnd->wndTitleBar.y += dy;
8010a761:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a764:	8b 50 08             	mov    0x8(%eax),%edx
8010a767:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010a76a:	01 c2                	add    %eax,%edx
8010a76c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a76f:	89 50 08             	mov    %edx,0x8(%eax)
            wnd->wndBody.x += dx;
8010a772:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a775:	8b 50 14             	mov    0x14(%eax),%edx
8010a778:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010a77b:	01 c2                	add    %eax,%edx
8010a77d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a780:	89 50 14             	mov    %edx,0x14(%eax)
            wnd->wndBody.y += dy;
8010a783:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a786:	8b 50 18             	mov    0x18(%eax),%edx
8010a789:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010a78c:	01 c2                	add    %eax,%edx
8010a78e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010a791:	89 50 18             	mov    %edx,0x18(%eax)
            if (proc == 0) {
8010a794:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010a79a:	85 c0                	test   %eax,%eax
8010a79c:	75 07                	jne    8010a7a5 <guiKernelHandleMsg+0x47b>
                switchkvm();
8010a79e:	e8 6e d7 ff ff       	call   80107f11 <switchkvm>
8010a7a3:	eb 12                	jmp    8010a7b7 <guiKernelHandleMsg+0x48d>
            } else {
                switchuvm(proc);
8010a7a5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010a7ab:	83 ec 0c             	sub    $0xc,%esp
8010a7ae:	50                   	push   %eax
8010a7af:	e8 7a d7 ff ff       	call   80107f2e <switchuvm>
8010a7b4:	83 c4 10             	add    $0x10,%esp
            }
        }
        if (mouseDownInContent) {
8010a7b7:	a1 5c 37 11 80       	mov    0x8011375c,%eax
8010a7bc:	85 c0                	test   %eax,%eax
8010a7be:	74 68                	je     8010a828 <guiKernelHandleMsg+0x4fe>
            tempMsg.msg_type = M_MOUSE_MOVE;
8010a7c0:	c7 85 50 ff ff ff 03 	movl   $0x3,-0xb0(%ebp)
8010a7c7:	00 00 00 
            tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
8010a7ca:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010a7d0:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a7d5:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a7db:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010a7e0:	8b 40 04             	mov    0x4(%eax),%eax
8010a7e3:	29 c2                	sub    %eax,%edx
8010a7e5:	89 d0                	mov    %edx,%eax
8010a7e7:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
8010a7ed:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010a7f3:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a7f8:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a7fe:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010a803:	8b 40 08             	mov    0x8(%eax),%eax
8010a806:	29 c2                	sub    %eax,%edx
8010a808:	89 d0                	mov    %edx,%eax
8010a80a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
            dispatchMessage(focus, &tempMsg);
8010a810:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a815:	83 ec 08             	sub    $0x8,%esp
8010a818:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010a81e:	52                   	push   %edx
8010a81f:	50                   	push   %eax
8010a820:	e8 35 fa ff ff       	call   8010a25a <dispatchMessage>
8010a825:	83 c4 10             	add    $0x10,%esp
        }
        clearMouse(screen, screen_buf,lastMousePos.x, lastMousePos.y);
8010a828:	8b 1d 58 37 11 80    	mov    0x80113758,%ebx
8010a82e:	8b 0d 54 37 11 80    	mov    0x80113754,%ecx
8010a834:	8b 15 44 37 11 80    	mov    0x80113744,%edx
8010a83a:	a1 3c 37 11 80       	mov    0x8011373c,%eax
8010a83f:	53                   	push   %ebx
8010a840:	51                   	push   %ecx
8010a841:	52                   	push   %edx
8010a842:	50                   	push   %eax
8010a843:	e8 18 f1 ff ff       	call   80109960 <clearMouse>
8010a848:	83 c4 10             	add    $0x10,%esp
        drawMouseToScreen(screen, 0, mousePos.x, mousePos.y);
8010a84b:	8b 0d 50 37 11 80    	mov    0x80113750,%ecx
8010a851:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010a857:	a1 3c 37 11 80       	mov    0x8011373c,%eax
8010a85c:	51                   	push   %ecx
8010a85d:	52                   	push   %edx
8010a85e:	6a 00                	push   $0x0
8010a860:	50                   	push   %eax
8010a861:	e8 73 f0 ff ff       	call   801098d9 <drawMouseToScreen>
8010a866:	83 c4 10             	add    $0x10,%esp
        break;
8010a869:	e9 1e 04 00 00       	jmp    8010ac8c <guiKernelHandleMsg+0x962>
    case M_MOUSE_DOWN:
        tempR = NOT_IN;
8010a86e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        for (i = wndCount - 1; i >= 0; i--) {
8010a875:	a1 48 37 11 80       	mov    0x80113748,%eax
8010a87a:	83 e8 01             	sub    $0x1,%eax
8010a87d:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010a880:	eb 30                	jmp    8010a8b2 <guiKernelHandleMsg+0x588>
            tempR = mouseInWin(mousePos.x, mousePos.y, focusList[i]);
8010a882:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010a885:	8b 0c 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%ecx
8010a88c:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010a892:	a1 4c 37 11 80       	mov    0x8011374c,%eax
8010a897:	83 ec 04             	sub    $0x4,%esp
8010a89a:	51                   	push   %ecx
8010a89b:	52                   	push   %edx
8010a89c:	50                   	push   %eax
8010a89d:	e8 95 f1 ff ff       	call   80109a37 <mouseInWin>
8010a8a2:	83 c4 10             	add    $0x10,%esp
8010a8a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(tempR != NOT_IN)
8010a8a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010a8ac:	75 0c                	jne    8010a8ba <guiKernelHandleMsg+0x590>
        clearMouse(screen, screen_buf,lastMousePos.x, lastMousePos.y);
        drawMouseToScreen(screen, 0, mousePos.x, mousePos.y);
        break;
    case M_MOUSE_DOWN:
        tempR = NOT_IN;
        for (i = wndCount - 1; i >= 0; i--) {
8010a8ae:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
8010a8b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010a8b6:	79 ca                	jns    8010a882 <guiKernelHandleMsg+0x558>
8010a8b8:	eb 01                	jmp    8010a8bb <guiKernelHandleMsg+0x591>
            tempR = mouseInWin(mousePos.x, mousePos.y, focusList[i]);
            if(tempR != NOT_IN)
                break;
8010a8ba:	90                   	nop
        }
        if(tempR == CONTENT) {
8010a8bb:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
8010a8bf:	75 0a                	jne    8010a8cb <guiKernelHandleMsg+0x5a1>
            mouseDownInContent = 1;
8010a8c1:	c7 05 5c 37 11 80 01 	movl   $0x1,0x8011375c
8010a8c8:	00 00 00 
        }
        if(tempR == BAR) {
8010a8cb:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
8010a8cf:	75 0a                	jne    8010a8db <guiKernelHandleMsg+0x5b1>
            mouseDownInBar = 1;
8010a8d1:	c7 05 60 37 11 80 01 	movl   $0x1,0x80113760
8010a8d8:	00 00 00 
        }
        if (focus != focusList[i]) {
8010a8db:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010a8de:	8b 14 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%edx
8010a8e5:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a8ea:	39 c2                	cmp    %eax,%edx
8010a8ec:	74 16                	je     8010a904 <guiKernelHandleMsg+0x5da>
            focusOnWindow(focusList[i]);
8010a8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010a8f1:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
8010a8f8:	83 ec 0c             	sub    $0xc,%esp
8010a8fb:	50                   	push   %eax
8010a8fc:	e8 d1 f5 ff ff       	call   80109ed2 <focusOnWindow>
8010a901:	83 c4 10             	add    $0x10,%esp
        }
        tempMsg.msg_type = M_MOUSE_DOWN;
8010a904:	c7 85 50 ff ff ff 04 	movl   $0x4,-0xb0(%ebp)
8010a90b:	00 00 00 
        tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
8010a90e:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010a914:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a919:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a91f:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010a924:	8b 40 04             	mov    0x4(%eax),%eax
8010a927:	29 c2                	sub    %eax,%edx
8010a929:	89 d0                	mov    %edx,%eax
8010a92b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
        tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
8010a931:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010a937:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a93c:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a942:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010a947:	8b 40 08             	mov    0x8(%eax),%eax
8010a94a:	29 c2                	sub    %eax,%edx
8010a94c:	89 d0                	mov    %edx,%eax
8010a94e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
        dispatchMessage(focus, &tempMsg);
8010a954:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a959:	83 ec 08             	sub    $0x8,%esp
8010a95c:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010a962:	52                   	push   %edx
8010a963:	50                   	push   %eax
8010a964:	e8 f1 f8 ff ff       	call   8010a25a <dispatchMessage>
8010a969:	83 c4 10             	add    $0x10,%esp
        if (tempR == CLOSE_BTN) {
8010a96c:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
8010a970:	0f 85 0c 03 00 00    	jne    8010ac82 <guiKernelHandleMsg+0x958>
            tempMsg.msg_type = M_CLOSE_WINDOW;
8010a976:	c7 85 50 ff ff ff 0a 	movl   $0xa,-0xb0(%ebp)
8010a97d:	00 00 00 
            dispatchMessage(focus, &tempMsg);
8010a980:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a985:	83 ec 08             	sub    $0x8,%esp
8010a988:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010a98e:	52                   	push   %edx
8010a98f:	50                   	push   %eax
8010a990:	e8 c5 f8 ff ff       	call   8010a25a <dispatchMessage>
8010a995:	83 c4 10             	add    $0x10,%esp
        }
        break;
8010a998:	e9 e5 02 00 00       	jmp    8010ac82 <guiKernelHandleMsg+0x958>
    case M_MOUSE_UP:
        mouseDownInBar = mouseDownInContent = 0;
8010a99d:	c7 05 5c 37 11 80 00 	movl   $0x0,0x8011375c
8010a9a4:	00 00 00 
8010a9a7:	a1 5c 37 11 80       	mov    0x8011375c,%eax
8010a9ac:	a3 60 37 11 80       	mov    %eax,0x80113760
        break;
8010a9b1:	e9 d6 02 00 00       	jmp    8010ac8c <guiKernelHandleMsg+0x962>
    case M_MOUSE_LEFT_CLICK:
        if (mouseDownInContent)
8010a9b6:	a1 5c 37 11 80       	mov    0x8011375c,%eax
8010a9bb:	85 c0                	test   %eax,%eax
8010a9bd:	0f 84 c2 02 00 00    	je     8010ac85 <guiKernelHandleMsg+0x95b>
        {
            mouseDownInContent = 0;
8010a9c3:	c7 05 5c 37 11 80 00 	movl   $0x0,0x8011375c
8010a9ca:	00 00 00 
            tempMsg.msg_type = msg->msg_type;
8010a9cd:	8b 45 08             	mov    0x8(%ebp),%eax
8010a9d0:	8b 00                	mov    (%eax),%eax
8010a9d2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
            tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
8010a9d8:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010a9de:	a1 00 35 11 80       	mov    0x80113500,%eax
8010a9e3:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010a9e9:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010a9ee:	8b 40 04             	mov    0x4(%eax),%eax
8010a9f1:	29 c2                	sub    %eax,%edx
8010a9f3:	89 d0                	mov    %edx,%eax
8010a9f5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
8010a9fb:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010aa01:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aa06:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010aa0c:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010aa11:	8b 40 08             	mov    0x8(%eax),%eax
8010aa14:	29 c2                	sub    %eax,%edx
8010aa16:	89 d0                	mov    %edx,%eax
8010aa18:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
            tempMsg.params[2] = 0; //define 0 left click
8010aa1e:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%ebp)
8010aa25:	00 00 00 

            dispatchMessage(focus, &tempMsg);
8010aa28:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aa2d:	83 ec 08             	sub    $0x8,%esp
8010aa30:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010aa36:	52                   	push   %edx
8010aa37:	50                   	push   %eax
8010aa38:	e8 1d f8 ff ff       	call   8010a25a <dispatchMessage>
8010aa3d:	83 c4 10             	add    $0x10,%esp
        }
        break;
8010aa40:	e9 40 02 00 00       	jmp    8010ac85 <guiKernelHandleMsg+0x95b>
    case M_MOUSE_RIGHT_CLICK:
        if (mouseDownInContent)
8010aa45:	a1 5c 37 11 80       	mov    0x8011375c,%eax
8010aa4a:	85 c0                	test   %eax,%eax
8010aa4c:	0f 84 36 02 00 00    	je     8010ac88 <guiKernelHandleMsg+0x95e>
        {
            mouseDownInContent = 0;
8010aa52:	c7 05 5c 37 11 80 00 	movl   $0x0,0x8011375c
8010aa59:	00 00 00 
            tempMsg.msg_type = msg->msg_type;
8010aa5c:	8b 45 08             	mov    0x8(%ebp),%eax
8010aa5f:	8b 00                	mov    (%eax),%eax
8010aa61:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
            tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
8010aa67:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010aa6d:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aa72:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010aa78:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010aa7d:	8b 40 04             	mov    0x4(%eax),%eax
8010aa80:	29 c2                	sub    %eax,%edx
8010aa82:	89 d0                	mov    %edx,%eax
8010aa84:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
8010aa8a:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010aa90:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aa95:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010aa9b:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010aaa0:	8b 40 08             	mov    0x8(%eax),%eax
8010aaa3:	29 c2                	sub    %eax,%edx
8010aaa5:	89 d0                	mov    %edx,%eax
8010aaa7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
            tempMsg.params[2] = 1; //define 1 left click
8010aaad:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%ebp)
8010aab4:	00 00 00 
            dispatchMessage(focus, &tempMsg);
8010aab7:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aabc:	83 ec 08             	sub    $0x8,%esp
8010aabf:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010aac5:	52                   	push   %edx
8010aac6:	50                   	push   %eax
8010aac7:	e8 8e f7 ff ff       	call   8010a25a <dispatchMessage>
8010aacc:	83 c4 10             	add    $0x10,%esp
        }
        break;
8010aacf:	e9 b4 01 00 00       	jmp    8010ac88 <guiKernelHandleMsg+0x95e>
    case M_MOUSE_DBCLICK:
        if (mouseDownInContent)
8010aad4:	a1 5c 37 11 80       	mov    0x8011375c,%eax
8010aad9:	85 c0                	test   %eax,%eax
8010aadb:	0f 84 aa 01 00 00    	je     8010ac8b <guiKernelHandleMsg+0x961>
        {
            mouseDownInContent = 0;
8010aae1:	c7 05 5c 37 11 80 00 	movl   $0x0,0x8011375c
8010aae8:	00 00 00 
            tempMsg.msg_type = msg->msg_type;
8010aaeb:	8b 45 08             	mov    0x8(%ebp),%eax
8010aaee:	8b 00                	mov    (%eax),%eax
8010aaf0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
            tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
8010aaf6:	8b 15 4c 37 11 80    	mov    0x8011374c,%edx
8010aafc:	a1 00 35 11 80       	mov    0x80113500,%eax
8010ab01:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ab07:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010ab0c:	8b 40 04             	mov    0x4(%eax),%eax
8010ab0f:	29 c2                	sub    %eax,%edx
8010ab11:	89 d0                	mov    %edx,%eax
8010ab13:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
8010ab19:	8b 15 50 37 11 80    	mov    0x80113750,%edx
8010ab1f:	a1 00 35 11 80       	mov    0x80113500,%eax
8010ab24:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ab2a:	05 d0 d3 11 80       	add    $0x8011d3d0,%eax
8010ab2f:	8b 40 08             	mov    0x8(%eax),%eax
8010ab32:	29 c2                	sub    %eax,%edx
8010ab34:	89 d0                	mov    %edx,%eax
8010ab36:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
            tempMsg.params[2] = 2; //define 2 double click
8010ab3c:	c7 85 5c ff ff ff 02 	movl   $0x2,-0xa4(%ebp)
8010ab43:	00 00 00 
            dispatchMessage(focus, &tempMsg);
8010ab46:	a1 00 35 11 80       	mov    0x80113500,%eax
8010ab4b:	83 ec 08             	sub    $0x8,%esp
8010ab4e:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010ab54:	52                   	push   %edx
8010ab55:	50                   	push   %eax
8010ab56:	e8 ff f6 ff ff       	call   8010a25a <dispatchMessage>
8010ab5b:	83 c4 10             	add    $0x10,%esp
        }
        break;
8010ab5e:	e9 28 01 00 00       	jmp    8010ac8b <guiKernelHandleMsg+0x961>
    case M_KEY_DOWN:
        //cprintf("M_KEY_DOWN");
        tempMsg.msg_type = msg->msg_type;
8010ab63:	8b 45 08             	mov    0x8(%ebp),%eax
8010ab66:	8b 00                	mov    (%eax),%eax
8010ab68:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
        tempMsg.params[0] = msg->params[0];
8010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
8010ab71:	8b 40 04             	mov    0x4(%eax),%eax
8010ab74:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
        tempMsg.params[1] = msg->params[1];
8010ab7a:	8b 45 08             	mov    0x8(%ebp),%eax
8010ab7d:	8b 40 08             	mov    0x8(%eax),%eax
8010ab80:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
        dispatchMessage(focus, &tempMsg);
8010ab86:	a1 00 35 11 80       	mov    0x80113500,%eax
8010ab8b:	83 ec 08             	sub    $0x8,%esp
8010ab8e:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010ab94:	52                   	push   %edx
8010ab95:	50                   	push   %eax
8010ab96:	e8 bf f6 ff ff       	call   8010a25a <dispatchMessage>
8010ab9b:	83 c4 10             	add    $0x10,%esp
        break;
8010ab9e:	e9 e9 00 00 00       	jmp    8010ac8c <guiKernelHandleMsg+0x962>
    case M_KEY_UP:
        //cprintf("M_KEY_UP");
        tempMsg.msg_type = msg->msg_type;
8010aba3:	8b 45 08             	mov    0x8(%ebp),%eax
8010aba6:	8b 00                	mov    (%eax),%eax
8010aba8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
        tempMsg.params[0] = msg->params[0];
8010abae:	8b 45 08             	mov    0x8(%ebp),%eax
8010abb1:	8b 40 04             	mov    0x4(%eax),%eax
8010abb4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
        tempMsg.params[1] = msg->params[1];
8010abba:	8b 45 08             	mov    0x8(%ebp),%eax
8010abbd:	8b 40 08             	mov    0x8(%eax),%eax
8010abc0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
        dispatchMessage(focus, &tempMsg);
8010abc6:	a1 00 35 11 80       	mov    0x80113500,%eax
8010abcb:	83 ec 08             	sub    $0x8,%esp
8010abce:	8d 95 50 ff ff ff    	lea    -0xb0(%ebp),%edx
8010abd4:	52                   	push   %edx
8010abd5:	50                   	push   %eax
8010abd6:	e8 7f f6 ff ff       	call   8010a25a <dispatchMessage>
8010abdb:	83 c4 10             	add    $0x10,%esp
        break;
8010abde:	e9 a9 00 00 00       	jmp    8010ac8c <guiKernelHandleMsg+0x962>
    case M_TIMER:
        tempMsg.msg_type = msg->msg_type;
8010abe3:	8b 45 08             	mov    0x8(%ebp),%eax
8010abe6:	8b 00                	mov    (%eax),%eax
8010abe8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
        tempMsg.params[0] = msg->params[0];
8010abee:	8b 45 08             	mov    0x8(%ebp),%eax
8010abf1:	8b 40 04             	mov    0x4(%eax),%eax
8010abf4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
        for(i = 0; i < wndCount; ++i)
8010abfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010ac01:	eb 73                	jmp    8010ac76 <guiKernelHandleMsg+0x94c>
        {
            timerInfo.ticks = msg->params[0];
8010ac03:	8b 45 08             	mov    0x8(%ebp),%eax
8010ac06:	8b 40 04             	mov    0x4(%eax),%eax
8010ac09:	a3 60 d3 11 80       	mov    %eax,0x8011d360
            if(timerInfo.intervalList[i]==-1)
8010ac0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ac11:	8b 04 85 64 d3 11 80 	mov    -0x7fee2c9c(,%eax,4),%eax
8010ac18:	83 f8 ff             	cmp    $0xffffffff,%eax
8010ac1b:	74 54                	je     8010ac71 <guiKernelHandleMsg+0x947>
                continue;
            timerInfo.countList[i] += 10;
8010ac1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ac20:	83 c0 08             	add    $0x8,%eax
8010ac23:	8b 04 85 6c d3 11 80 	mov    -0x7fee2c94(,%eax,4),%eax
8010ac2a:	8d 50 0a             	lea    0xa(%eax),%edx
8010ac2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ac30:	83 c0 08             	add    $0x8,%eax
8010ac33:	89 14 85 6c d3 11 80 	mov    %edx,-0x7fee2c94(,%eax,4)
            if (timerInfo.countList[i] % timerInfo.intervalList[i] == 0)
8010ac3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ac3d:	83 c0 08             	add    $0x8,%eax
8010ac40:	8b 04 85 6c d3 11 80 	mov    -0x7fee2c94(,%eax,4),%eax
8010ac47:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010ac4a:	8b 0c 95 64 d3 11 80 	mov    -0x7fee2c9c(,%edx,4),%ecx
8010ac51:	99                   	cltd   
8010ac52:	f7 f9                	idiv   %ecx
8010ac54:	89 d0                	mov    %edx,%eax
8010ac56:	85 c0                	test   %eax,%eax
8010ac58:	75 18                	jne    8010ac72 <guiKernelHandleMsg+0x948>
                dispatchMessage(i, &tempMsg);
8010ac5a:	83 ec 08             	sub    $0x8,%esp
8010ac5d:	8d 85 50 ff ff ff    	lea    -0xb0(%ebp),%eax
8010ac63:	50                   	push   %eax
8010ac64:	ff 75 f4             	pushl  -0xc(%ebp)
8010ac67:	e8 ee f5 ff ff       	call   8010a25a <dispatchMessage>
8010ac6c:	83 c4 10             	add    $0x10,%esp
8010ac6f:	eb 01                	jmp    8010ac72 <guiKernelHandleMsg+0x948>
        tempMsg.params[0] = msg->params[0];
        for(i = 0; i < wndCount; ++i)
        {
            timerInfo.ticks = msg->params[0];
            if(timerInfo.intervalList[i]==-1)
                continue;
8010ac71:	90                   	nop
        dispatchMessage(focus, &tempMsg);
        break;
    case M_TIMER:
        tempMsg.msg_type = msg->msg_type;
        tempMsg.params[0] = msg->params[0];
        for(i = 0; i < wndCount; ++i)
8010ac72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010ac76:	a1 48 37 11 80       	mov    0x80113748,%eax
8010ac7b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
8010ac7e:	7c 83                	jl     8010ac03 <guiKernelHandleMsg+0x8d9>
                continue;
            timerInfo.countList[i] += 10;
            if (timerInfo.countList[i] % timerInfo.intervalList[i] == 0)
                dispatchMessage(i, &tempMsg);
        }
        break;
8010ac80:	eb 0a                	jmp    8010ac8c <guiKernelHandleMsg+0x962>
        dispatchMessage(focus, &tempMsg);
        if (tempR == CLOSE_BTN) {
            tempMsg.msg_type = M_CLOSE_WINDOW;
            dispatchMessage(focus, &tempMsg);
        }
        break;
8010ac82:	90                   	nop
8010ac83:	eb 07                	jmp    8010ac8c <guiKernelHandleMsg+0x962>
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
            tempMsg.params[2] = 0; //define 0 left click

            dispatchMessage(focus, &tempMsg);
        }
        break;
8010ac85:	90                   	nop
8010ac86:	eb 04                	jmp    8010ac8c <guiKernelHandleMsg+0x962>
            tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
            tempMsg.params[2] = 1; //define 1 left click
            dispatchMessage(focus, &tempMsg);
        }
        break;
8010ac88:	90                   	nop
8010ac89:	eb 01                	jmp    8010ac8c <guiKernelHandleMsg+0x962>
            tempMsg.params[0] = mousePos.x - wndInfoList[focus].wndBody.x;
            tempMsg.params[1] = mousePos.y - wndInfoList[focus].wndBody.y;
            tempMsg.params[2] = 2; //define 2 double click
            dispatchMessage(focus, &tempMsg);
        }
        break;
8010ac8b:	90                   	nop
            if (timerInfo.countList[i] % timerInfo.intervalList[i] == 0)
                dispatchMessage(i, &tempMsg);
        }
        break;
    }
    release(&guiKernelLock);
8010ac8c:	83 ec 0c             	sub    $0xc,%esp
8010ac8f:	68 40 2c 12 80       	push   $0x80122c40
8010ac94:	e8 be a4 ff ff       	call   80105157 <release>
8010ac99:	83 c4 10             	add    $0x10,%esp
}
8010ac9c:	90                   	nop
8010ac9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010aca0:	c9                   	leave  
8010aca1:	c3                   	ret    

8010aca2 <sys_createwindow>:

/*********************************************************
 * System Calls
**********************************************************/
int sys_createwindow(void)
{
8010aca2:	55                   	push   %ebp
8010aca3:	89 e5                	mov    %esp,%ebp
8010aca5:	56                   	push   %esi
8010aca6:	53                   	push   %ebx
8010aca7:	83 ec 20             	sub    $0x20,%esp
    int x, y, cx, cy;
    char * title;
    struct RGB * content;
    argint(0, &x);
8010acaa:	83 ec 08             	sub    $0x8,%esp
8010acad:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010acb0:	50                   	push   %eax
8010acb1:	6a 00                	push   $0x0
8010acb3:	e8 c0 a9 ff ff       	call   80105678 <argint>
8010acb8:	83 c4 10             	add    $0x10,%esp
    argint(1, &y);
8010acbb:	83 ec 08             	sub    $0x8,%esp
8010acbe:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010acc1:	50                   	push   %eax
8010acc2:	6a 01                	push   $0x1
8010acc4:	e8 af a9 ff ff       	call   80105678 <argint>
8010acc9:	83 c4 10             	add    $0x10,%esp
    argint(2, &cx);
8010accc:	83 ec 08             	sub    $0x8,%esp
8010accf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010acd2:	50                   	push   %eax
8010acd3:	6a 02                	push   $0x2
8010acd5:	e8 9e a9 ff ff       	call   80105678 <argint>
8010acda:	83 c4 10             	add    $0x10,%esp
    argint(3, &cy);
8010acdd:	83 ec 08             	sub    $0x8,%esp
8010ace0:	8d 45 e0             	lea    -0x20(%ebp),%eax
8010ace3:	50                   	push   %eax
8010ace4:	6a 03                	push   $0x3
8010ace6:	e8 8d a9 ff ff       	call   80105678 <argint>
8010aceb:	83 c4 10             	add    $0x10,%esp
    argstr(4, &title);
8010acee:	83 ec 08             	sub    $0x8,%esp
8010acf1:	8d 45 dc             	lea    -0x24(%ebp),%eax
8010acf4:	50                   	push   %eax
8010acf5:	6a 04                	push   $0x4
8010acf7:	e8 01 aa ff ff       	call   801056fd <argstr>
8010acfc:	83 c4 10             	add    $0x10,%esp
    int p;
    argint(5, &p);
8010acff:	83 ec 08             	sub    $0x8,%esp
8010ad02:	8d 45 d8             	lea    -0x28(%ebp),%eax
8010ad05:	50                   	push   %eax
8010ad06:	6a 05                	push   $0x5
8010ad08:	e8 6b a9 ff ff       	call   80105678 <argint>
8010ad0d:	83 c4 10             	add    $0x10,%esp
    content = (RGB *) p;
8010ad10:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010ad13:	89 45 f0             	mov    %eax,-0x10(%ebp)

    acquire(&guiKernelLock);
8010ad16:	83 ec 0c             	sub    $0xc,%esp
8010ad19:	68 40 2c 12 80       	push   $0x80122c40
8010ad1e:	e8 cd a3 ff ff       	call   801050f0 <acquire>
8010ad23:	83 c4 10             	add    $0x10,%esp
    //Add to the wndList

    int i;
    for (i = 0; i < MAX_WINDOW_COUNT; ++i)
8010ad26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010ad2d:	e9 3b 01 00 00       	jmp    8010ae6d <sys_createwindow+0x1cb>
    {
        if(wndInfoList[i].hwnd == -1)
8010ad32:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ad35:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ad3b:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010ad40:	8b 00                	mov    (%eax),%eax
8010ad42:	83 f8 ff             	cmp    $0xffffffff,%eax
8010ad45:	0f 85 1e 01 00 00    	jne    8010ae69 <sys_createwindow+0x1c7>
        {
            wndInfoList[i].hwnd = i;
8010ad4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ad4e:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ad54:	8d 90 c0 d3 11 80    	lea    -0x7fee2c40(%eax),%edx
8010ad5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ad5d:	89 02                	mov    %eax,(%edx)
            setRect(&wndInfoList[i].wndTitleBar, x, y - UTITLE_HEIGHT, cx, UTITLE_HEIGHT);
8010ad5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010ad62:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010ad65:	8d 58 e2             	lea    -0x1e(%eax),%ebx
8010ad68:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010ad6b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
8010ad6e:	69 c9 d8 08 00 00    	imul   $0x8d8,%ecx,%ecx
8010ad74:	81 c1 c0 d3 11 80    	add    $0x8011d3c0,%ecx
8010ad7a:	83 c1 04             	add    $0x4,%ecx
8010ad7d:	83 ec 0c             	sub    $0xc,%esp
8010ad80:	6a 1e                	push   $0x1e
8010ad82:	52                   	push   %edx
8010ad83:	53                   	push   %ebx
8010ad84:	50                   	push   %eax
8010ad85:	51                   	push   %ecx
8010ad86:	e8 83 ec ff ff       	call   80109a0e <setRect>
8010ad8b:	83 c4 20             	add    $0x20,%esp
            setRect(&wndInfoList[i].wndBody, x, y, cx, cy);
8010ad8e:	8b 5d e0             	mov    -0x20(%ebp),%ebx
8010ad91:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
8010ad94:	8b 55 e8             	mov    -0x18(%ebp),%edx
8010ad97:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010ad9a:	8b 75 f4             	mov    -0xc(%ebp),%esi
8010ad9d:	69 f6 d8 08 00 00    	imul   $0x8d8,%esi,%esi
8010ada3:	83 c6 10             	add    $0x10,%esi
8010ada6:	81 c6 c0 d3 11 80    	add    $0x8011d3c0,%esi
8010adac:	83 c6 04             	add    $0x4,%esi
8010adaf:	83 ec 0c             	sub    $0xc,%esp
8010adb2:	53                   	push   %ebx
8010adb3:	51                   	push   %ecx
8010adb4:	52                   	push   %edx
8010adb5:	50                   	push   %eax
8010adb6:	56                   	push   %esi
8010adb7:	e8 52 ec ff ff       	call   80109a0e <setRect>
8010adbc:	83 c4 20             	add    $0x20,%esp
            wndInfoList[i].procPtr = proc;
8010adbf:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010adc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010adc8:	69 d2 d8 08 00 00    	imul   $0x8d8,%edx,%edx
8010adce:	81 c2 e0 d3 11 80    	add    $0x8011d3e0,%edx
8010add4:	89 42 04             	mov    %eax,0x4(%edx)
            wndInfoList[i].wholeContent = content;
8010add7:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010adda:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ade0:	8d 90 e0 d3 11 80    	lea    -0x7fee2c20(%eax),%edx
8010ade6:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010ade9:	89 42 0c             	mov    %eax,0xc(%edx)
            wndInfoList[i].content = content + UTITLE_HEIGHT * cx;
8010adec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010adef:	6b c0 5a             	imul   $0x5a,%eax,%eax
8010adf2:	89 c2                	mov    %eax,%edx
8010adf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010adf7:	01 c2                	add    %eax,%edx
8010adf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010adfc:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ae02:	05 e0 d3 11 80       	add    $0x8011d3e0,%eax
8010ae07:	89 50 08             	mov    %edx,0x8(%eax)
            wndInfoList[i].title = title;
8010ae0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010ae0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010ae10:	69 d2 d8 08 00 00    	imul   $0x8d8,%edx,%edx
8010ae16:	81 c2 f0 d3 11 80    	add    $0x8011d3f0,%edx
8010ae1c:	89 02                	mov    %eax,(%edx)
            drawWndTitleBar(i);
8010ae1e:	83 ec 0c             	sub    $0xc,%esp
8010ae21:	ff 75 f4             	pushl  -0xc(%ebp)
8010ae24:	e8 c6 ed ff ff       	call   80109bef <drawWndTitleBar>
8010ae29:	83 c4 10             	add    $0x10,%esp
            initMsgQueue(&wndInfoList[i].msgQ);
8010ae2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010ae2f:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010ae35:	83 c0 30             	add    $0x30,%eax
8010ae38:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010ae3d:	83 c0 04             	add    $0x4,%eax
8010ae40:	83 ec 0c             	sub    $0xc,%esp
8010ae43:	50                   	push   %eax
8010ae44:	e8 b9 f2 ff ff       	call   8010a102 <initMsgQueue>
8010ae49:	83 c4 10             	add    $0x10,%esp
            wndCount += 1;
8010ae4c:	a1 48 37 11 80       	mov    0x80113748,%eax
8010ae51:	83 c0 01             	add    $0x1,%eax
8010ae54:	a3 48 37 11 80       	mov    %eax,0x80113748
            focusOnWindow(i);
8010ae59:	83 ec 0c             	sub    $0xc,%esp
8010ae5c:	ff 75 f4             	pushl  -0xc(%ebp)
8010ae5f:	e8 6e f0 ff ff       	call   80109ed2 <focusOnWindow>
8010ae64:	83 c4 10             	add    $0x10,%esp
            break;
8010ae67:	eb 0e                	jmp    8010ae77 <sys_createwindow+0x1d5>

    acquire(&guiKernelLock);
    //Add to the wndList

    int i;
    for (i = 0; i < MAX_WINDOW_COUNT; ++i)
8010ae69:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010ae6d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
8010ae71:	0f 8e bb fe ff ff    	jle    8010ad32 <sys_createwindow+0x90>
            wndCount += 1;
            focusOnWindow(i);
            break;
       }
    }
    release(&guiKernelLock);
8010ae77:	83 ec 0c             	sub    $0xc,%esp
8010ae7a:	68 40 2c 12 80       	push   $0x80122c40
8010ae7f:	e8 d3 a2 ff ff       	call   80105157 <release>
8010ae84:	83 c4 10             	add    $0x10,%esp
    return i;
8010ae87:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8010ae8a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010ae8d:	5b                   	pop    %ebx
8010ae8e:	5e                   	pop    %esi
8010ae8f:	5d                   	pop    %ebp
8010ae90:	c3                   	ret    

8010ae91 <sys_repaintwindow>:

int repainted = 0;
int sys_repaintwindow()
{
8010ae91:	55                   	push   %ebp
8010ae92:	89 e5                	mov    %esp,%ebp
8010ae94:	83 ec 38             	sub    $0x38,%esp
    if (repainted == 0) {
8010ae97:	a1 64 37 11 80       	mov    0x80113764,%eax
8010ae9c:	85 c0                	test   %eax,%eax
8010ae9e:	75 0f                	jne    8010aeaf <sys_repaintwindow+0x1e>
        initDesktop();
8010aea0:	e8 5d ec ff ff       	call   80109b02 <initDesktop>
        repainted = 1;
8010aea5:	c7 05 64 37 11 80 01 	movl   $0x1,0x80113764
8010aeac:	00 00 00 
    }
    int hwnd;
    argint(0, &hwnd);
8010aeaf:	83 ec 08             	sub    $0x8,%esp
8010aeb2:	8d 45 d0             	lea    -0x30(%ebp),%eax
8010aeb5:	50                   	push   %eax
8010aeb6:	6a 00                	push   $0x0
8010aeb8:	e8 bb a7 ff ff       	call   80105678 <argint>
8010aebd:	83 c4 10             	add    $0x10,%esp
    acquire(&guiKernelLock);
8010aec0:	83 ec 0c             	sub    $0xc,%esp
8010aec3:	68 40 2c 12 80       	push   $0x80122c40
8010aec8:	e8 23 a2 ff ff       	call   801050f0 <acquire>
8010aecd:	83 c4 10             	add    $0x10,%esp
    if (hwnd == focus) {
8010aed0:	8b 55 d0             	mov    -0x30(%ebp),%edx
8010aed3:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aed8:	39 c2                	cmp    %eax,%edx
8010aeda:	0f 85 f7 00 00 00    	jne    8010afd7 <sys_repaintwindow+0x146>
        switchuvm(wndInfoList[focus].procPtr);
8010aee0:	a1 00 35 11 80       	mov    0x80113500,%eax
8010aee5:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010aeeb:	05 e0 d3 11 80       	add    $0x8011d3e0,%eax
8010aef0:	8b 40 04             	mov    0x4(%eax),%eax
8010aef3:	83 ec 0c             	sub    $0xc,%esp
8010aef6:	50                   	push   %eax
8010aef7:	e8 32 d0 ff ff       	call   80107f2e <switchuvm>
8010aefc:	83 c4 10             	add    $0x10,%esp
        WndInfo* wnd = &wndInfoList[focus];
8010aeff:	a1 00 35 11 80       	mov    0x80113500,%eax
8010af04:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010af0a:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010af0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // printf(1, "titlebar:(%d, %d)\n", wnd->wndTitleBar.x, wnd->wndTitleBar.y);
        drawBitmapToScreen(screen_buf, wnd->wholeContent, (Point){wnd->wndTitleBar.x, wnd->wndTitleBar.y}, (Size){wnd->wndBody.h + wnd->wndTitleBar.h, wnd->wndBody.w});
8010af12:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af15:	8b 50 1c             	mov    0x1c(%eax),%edx
8010af18:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af1b:	8b 40 0c             	mov    0xc(%eax),%eax
8010af1e:	01 d0                	add    %edx,%eax
8010af20:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8010af23:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af26:	8b 40 20             	mov    0x20(%eax),%eax
8010af29:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010af2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af2f:	8b 40 04             	mov    0x4(%eax),%eax
8010af32:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010af35:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af38:	8b 40 08             	mov    0x8(%eax),%eax
8010af3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010af3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af41:	8b 50 2c             	mov    0x2c(%eax),%edx
8010af44:	a1 44 37 11 80       	mov    0x80113744,%eax
8010af49:	83 ec 08             	sub    $0x8,%esp
8010af4c:	ff 75 d8             	pushl  -0x28(%ebp)
8010af4f:	ff 75 d4             	pushl  -0x2c(%ebp)
8010af52:	ff 75 e0             	pushl  -0x20(%ebp)
8010af55:	ff 75 dc             	pushl  -0x24(%ebp)
8010af58:	52                   	push   %edx
8010af59:	50                   	push   %eax
8010af5a:	e8 4a e8 ff ff       	call   801097a9 <drawBitmapToScreen>
8010af5f:	83 c4 20             	add    $0x20,%esp
        drawBitmapToScreen(screen, wnd->wholeContent, (Point){wnd->wndTitleBar.x, wnd->wndTitleBar.y}, (Size){wnd->wndBody.h + wnd->wndTitleBar.h, wnd->wndBody.w});
8010af62:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af65:	8b 50 1c             	mov    0x1c(%eax),%edx
8010af68:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af6b:	8b 40 0c             	mov    0xc(%eax),%eax
8010af6e:	01 d0                	add    %edx,%eax
8010af70:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010af73:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af76:	8b 40 20             	mov    0x20(%eax),%eax
8010af79:	89 45 e8             	mov    %eax,-0x18(%ebp)
8010af7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af7f:	8b 40 04             	mov    0x4(%eax),%eax
8010af82:	89 45 ec             	mov    %eax,-0x14(%ebp)
8010af85:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af88:	8b 40 08             	mov    0x8(%eax),%eax
8010af8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010af8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010af91:	8b 50 2c             	mov    0x2c(%eax),%edx
8010af94:	a1 3c 37 11 80       	mov    0x8011373c,%eax
8010af99:	83 ec 08             	sub    $0x8,%esp
8010af9c:	ff 75 e8             	pushl  -0x18(%ebp)
8010af9f:	ff 75 e4             	pushl  -0x1c(%ebp)
8010afa2:	ff 75 f0             	pushl  -0x10(%ebp)
8010afa5:	ff 75 ec             	pushl  -0x14(%ebp)
8010afa8:	52                   	push   %edx
8010afa9:	50                   	push   %eax
8010afaa:	e8 fa e7 ff ff       	call   801097a9 <drawBitmapToScreen>
8010afaf:	83 c4 20             	add    $0x20,%esp
        if (proc == 0) {
8010afb2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010afb8:	85 c0                	test   %eax,%eax
8010afba:	75 07                	jne    8010afc3 <sys_repaintwindow+0x132>
            switchkvm();
8010afbc:	e8 50 cf ff ff       	call   80107f11 <switchkvm>
8010afc1:	eb 23                	jmp    8010afe6 <sys_repaintwindow+0x155>
        } else {
            switchuvm(proc);
8010afc3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010afc9:	83 ec 0c             	sub    $0xc,%esp
8010afcc:	50                   	push   %eax
8010afcd:	e8 5c cf ff ff       	call   80107f2e <switchuvm>
8010afd2:	83 c4 10             	add    $0x10,%esp
8010afd5:	eb 0f                	jmp    8010afe6 <sys_repaintwindow+0x155>
        }
    } else {
        repaintAllWindow(hwnd);
8010afd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
8010afda:	83 ec 0c             	sub    $0xc,%esp
8010afdd:	50                   	push   %eax
8010afde:	e8 66 ed ff ff       	call   80109d49 <repaintAllWindow>
8010afe3:	83 c4 10             	add    $0x10,%esp
    }
    release(&guiKernelLock);
8010afe6:	83 ec 0c             	sub    $0xc,%esp
8010afe9:	68 40 2c 12 80       	push   $0x80122c40
8010afee:	e8 64 a1 ff ff       	call   80105157 <release>
8010aff3:	83 c4 10             	add    $0x10,%esp
   return 0;
8010aff6:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010affb:	c9                   	leave  
8010affc:	c3                   	ret    

8010affd <sys_settimer>:

int sys_settimer()
{
8010affd:	55                   	push   %ebp
8010affe:	89 e5                	mov    %esp,%ebp
8010b000:	83 ec 18             	sub    $0x18,%esp
    int hwnd, interval;
    argint(0, &hwnd);
8010b003:	83 ec 08             	sub    $0x8,%esp
8010b006:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b009:	50                   	push   %eax
8010b00a:	6a 00                	push   $0x0
8010b00c:	e8 67 a6 ff ff       	call   80105678 <argint>
8010b011:	83 c4 10             	add    $0x10,%esp
    argint(1, &interval);
8010b014:	83 ec 08             	sub    $0x8,%esp
8010b017:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b01a:	50                   	push   %eax
8010b01b:	6a 01                	push   $0x1
8010b01d:	e8 56 a6 ff ff       	call   80105678 <argint>
8010b022:	83 c4 10             	add    $0x10,%esp

    acquire(&guiKernelLock);
8010b025:	83 ec 0c             	sub    $0xc,%esp
8010b028:	68 40 2c 12 80       	push   $0x80122c40
8010b02d:	e8 be a0 ff ff       	call   801050f0 <acquire>
8010b032:	83 c4 10             	add    $0x10,%esp

    timerInfo.intervalList[hwnd] = interval;
8010b035:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b038:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010b03b:	89 14 85 64 d3 11 80 	mov    %edx,-0x7fee2c9c(,%eax,4)
    timerInfo.countList[hwnd] = 0;
8010b042:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b045:	83 c0 08             	add    $0x8,%eax
8010b048:	c7 04 85 6c d3 11 80 	movl   $0x0,-0x7fee2c94(,%eax,4)
8010b04f:	00 00 00 00 
    release(&guiKernelLock);
8010b053:	83 ec 0c             	sub    $0xc,%esp
8010b056:	68 40 2c 12 80       	push   $0x80122c40
8010b05b:	e8 f7 a0 ff ff       	call   80105157 <release>
8010b060:	83 c4 10             	add    $0x10,%esp
    return 0;
8010b063:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010b068:	c9                   	leave  
8010b069:	c3                   	ret    

8010b06a <sys_getmessage>:

int sys_getmessage()
{
8010b06a:	55                   	push   %ebp
8010b06b:	89 e5                	mov    %esp,%ebp
8010b06d:	83 ec 18             	sub    $0x18,%esp
    int hwnd, p;
    argint(0, &hwnd);
8010b070:	83 ec 08             	sub    $0x8,%esp
8010b073:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b076:	50                   	push   %eax
8010b077:	6a 00                	push   $0x0
8010b079:	e8 fa a5 ff ff       	call   80105678 <argint>
8010b07e:	83 c4 10             	add    $0x10,%esp
    argint(1, &p);
8010b081:	83 ec 08             	sub    $0x8,%esp
8010b084:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010b087:	50                   	push   %eax
8010b088:	6a 01                	push   $0x1
8010b08a:	e8 e9 a5 ff ff       	call   80105678 <argint>
8010b08f:	83 c4 10             	add    $0x10,%esp
    message *msg = (message *) p;
8010b092:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b095:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (proc != wndInfoList[hwnd].procPtr)
8010b098:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b09b:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010b0a1:	05 e0 d3 11 80       	add    $0x8011d3e0,%eax
8010b0a6:	8b 50 04             	mov    0x4(%eax),%edx
8010b0a9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010b0af:	39 c2                	cmp    %eax,%edx
8010b0b1:	74 07                	je     8010b0ba <sys_getmessage+0x50>
        return 0;
8010b0b3:	b8 00 00 00 00       	mov    $0x0,%eax
8010b0b8:	eb 49                	jmp    8010b103 <sys_getmessage+0x99>
    acquire(&guiKernelLock);
8010b0ba:	83 ec 0c             	sub    $0xc,%esp
8010b0bd:	68 40 2c 12 80       	push   $0x80122c40
8010b0c2:	e8 29 a0 ff ff       	call   801050f0 <acquire>
8010b0c7:	83 c4 10             	add    $0x10,%esp
    int r = getMessageFromQueue(&wndInfoList[hwnd].msgQ, msg);
8010b0ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b0cd:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010b0d3:	83 c0 30             	add    $0x30,%eax
8010b0d6:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010b0db:	83 c0 04             	add    $0x4,%eax
8010b0de:	83 ec 08             	sub    $0x8,%esp
8010b0e1:	ff 75 f4             	pushl  -0xc(%ebp)
8010b0e4:	50                   	push   %eax
8010b0e5:	e8 ab f1 ff ff       	call   8010a295 <getMessageFromQueue>
8010b0ea:	83 c4 10             	add    $0x10,%esp
8010b0ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    release(&guiKernelLock);
8010b0f0:	83 ec 0c             	sub    $0xc,%esp
8010b0f3:	68 40 2c 12 80       	push   $0x80122c40
8010b0f8:	e8 5a a0 ff ff       	call   80105157 <release>
8010b0fd:	83 c4 10             	add    $0x10,%esp
    return r;
8010b100:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
8010b103:	c9                   	leave  
8010b104:	c3                   	ret    

8010b105 <sys_updatewindow>:


int sys_updatewindow()
{
8010b105:	55                   	push   %ebp
8010b106:	89 e5                	mov    %esp,%ebp
8010b108:	56                   	push   %esi
8010b109:	53                   	push   %ebx
8010b10a:	83 ec 20             	sub    $0x20,%esp
    int hwnd, x, y, cx, cy;
    argint(0, &hwnd);
8010b10d:	83 ec 08             	sub    $0x8,%esp
8010b110:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b113:	50                   	push   %eax
8010b114:	6a 00                	push   $0x0
8010b116:	e8 5d a5 ff ff       	call   80105678 <argint>
8010b11b:	83 c4 10             	add    $0x10,%esp
    argint(1, &x);
8010b11e:	83 ec 08             	sub    $0x8,%esp
8010b121:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010b124:	50                   	push   %eax
8010b125:	6a 01                	push   $0x1
8010b127:	e8 4c a5 ff ff       	call   80105678 <argint>
8010b12c:	83 c4 10             	add    $0x10,%esp
    argint(2, &y);
8010b12f:	83 ec 08             	sub    $0x8,%esp
8010b132:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010b135:	50                   	push   %eax
8010b136:	6a 02                	push   $0x2
8010b138:	e8 3b a5 ff ff       	call   80105678 <argint>
8010b13d:	83 c4 10             	add    $0x10,%esp
    argint(3, &cx);
8010b140:	83 ec 08             	sub    $0x8,%esp
8010b143:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010b146:	50                   	push   %eax
8010b147:	6a 03                	push   $0x3
8010b149:	e8 2a a5 ff ff       	call   80105678 <argint>
8010b14e:	83 c4 10             	add    $0x10,%esp
    argint(4, &cy);
8010b151:	83 ec 08             	sub    $0x8,%esp
8010b154:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010b157:	50                   	push   %eax
8010b158:	6a 04                	push   $0x4
8010b15a:	e8 19 a5 ff ff       	call   80105678 <argint>
8010b15f:	83 c4 10             	add    $0x10,%esp

    acquire(&guiKernelLock);
8010b162:	83 ec 0c             	sub    $0xc,%esp
8010b165:	68 40 2c 12 80       	push   $0x80122c40
8010b16a:	e8 81 9f ff ff       	call   801050f0 <acquire>
8010b16f:	83 c4 10             	add    $0x10,%esp
    updateWindow(hwnd, x, y, cx, cy);
8010b172:	8b 75 e4             	mov    -0x1c(%ebp),%esi
8010b175:	8b 5d e8             	mov    -0x18(%ebp),%ebx
8010b178:	8b 4d ec             	mov    -0x14(%ebp),%ecx
8010b17b:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010b17e:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b181:	83 ec 0c             	sub    $0xc,%esp
8010b184:	56                   	push   %esi
8010b185:	53                   	push   %ebx
8010b186:	51                   	push   %ecx
8010b187:	52                   	push   %edx
8010b188:	50                   	push   %eax
8010b189:	e8 fa ed ff ff       	call   80109f88 <updateWindow>
8010b18e:	83 c4 20             	add    $0x20,%esp

    release(&guiKernelLock);
8010b191:	83 ec 0c             	sub    $0xc,%esp
8010b194:	68 40 2c 12 80       	push   $0x80122c40
8010b199:	e8 b9 9f ff ff       	call   80105157 <release>
8010b19e:	83 c4 10             	add    $0x10,%esp
    return 0;
8010b1a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010b1a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010b1a9:	5b                   	pop    %ebx
8010b1aa:	5e                   	pop    %esi
8010b1ab:	5d                   	pop    %ebp
8010b1ac:	c3                   	ret    

8010b1ad <sys_destroywindow>:

int sys_destroywindow()
{
8010b1ad:	55                   	push   %ebp
8010b1ae:	89 e5                	mov    %esp,%ebp
8010b1b0:	83 ec 18             	sub    $0x18,%esp
    int hwnd;
    argint(0, &hwnd);
8010b1b3:	83 ec 08             	sub    $0x8,%esp
8010b1b6:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010b1b9:	50                   	push   %eax
8010b1ba:	6a 00                	push   $0x0
8010b1bc:	e8 b7 a4 ff ff       	call   80105678 <argint>
8010b1c1:	83 c4 10             	add    $0x10,%esp
    acquire(&guiKernelLock);
8010b1c4:	83 ec 0c             	sub    $0xc,%esp
8010b1c7:	68 40 2c 12 80       	push   $0x80122c40
8010b1cc:	e8 1f 9f ff ff       	call   801050f0 <acquire>
8010b1d1:	83 c4 10             	add    $0x10,%esp
    wndInfoList[hwnd].hwnd = -1;
8010b1d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b1d7:	69 c0 d8 08 00 00    	imul   $0x8d8,%eax,%eax
8010b1dd:	05 c0 d3 11 80       	add    $0x8011d3c0,%eax
8010b1e2:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    timerInfo.countList[hwnd] = -1;
8010b1e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b1eb:	83 c0 08             	add    $0x8,%eax
8010b1ee:	c7 04 85 6c d3 11 80 	movl   $0xffffffff,-0x7fee2c94(,%eax,4)
8010b1f5:	ff ff ff ff 
    wndCount -= 1;
8010b1f9:	a1 48 37 11 80       	mov    0x80113748,%eax
8010b1fe:	83 e8 01             	sub    $0x1,%eax
8010b201:	a3 48 37 11 80       	mov    %eax,0x80113748
    focusOnWindow(focusList[wndCount - 1]);
8010b206:	a1 48 37 11 80       	mov    0x80113748,%eax
8010b20b:	83 e8 01             	sub    $0x1,%eax
8010b20e:	8b 04 85 20 d3 11 80 	mov    -0x7fee2ce0(,%eax,4),%eax
8010b215:	83 ec 0c             	sub    $0xc,%esp
8010b218:	50                   	push   %eax
8010b219:	e8 b4 ec ff ff       	call   80109ed2 <focusOnWindow>
8010b21e:	83 c4 10             	add    $0x10,%esp
    release(&guiKernelLock);
8010b221:	83 ec 0c             	sub    $0xc,%esp
8010b224:	68 40 2c 12 80       	push   $0x80122c40
8010b229:	e8 29 9f ff ff       	call   80105157 <release>
8010b22e:	83 c4 10             	add    $0x10,%esp
    return 0;
8010b231:	b8 00 00 00 00       	mov    $0x0,%eax
8010b236:	c9                   	leave  
8010b237:	c3                   	ret    

8010b238 <getColor>:
RGB whiteRGB = {255, 255, 255};
RGB blackRGB = {0, 0, 0};

// 排除边界，获取对应的RGB，对于错误的x，y，将isInPic置位0
struct RGB *getColor(PBitmap *pic, int y, int x, int *isInPic)
{
8010b238:	55                   	push   %ebp
8010b239:	89 e5                	mov    %esp,%ebp
    if (y < 0 || y > pic->height || x < 0 || x > pic->width)
8010b23b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010b23f:	78 1b                	js     8010b25c <getColor+0x24>
8010b241:	8b 45 08             	mov    0x8(%ebp),%eax
8010b244:	8b 40 04             	mov    0x4(%eax),%eax
8010b247:	3b 45 0c             	cmp    0xc(%ebp),%eax
8010b24a:	7c 10                	jl     8010b25c <getColor+0x24>
8010b24c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
8010b250:	78 0a                	js     8010b25c <getColor+0x24>
8010b252:	8b 45 08             	mov    0x8(%ebp),%eax
8010b255:	8b 00                	mov    (%eax),%eax
8010b257:	3b 45 10             	cmp    0x10(%ebp),%eax
8010b25a:	7d 10                	jge    8010b26c <getColor+0x34>
    {
        *isInPic = 1;
8010b25c:	8b 45 14             	mov    0x14(%ebp),%eax
8010b25f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        return (&whiteRGB);
8010b265:	b8 04 35 11 80       	mov    $0x80113504,%eax
8010b26a:	eb 44                	jmp    8010b2b0 <getColor+0x78>
    }

    if (y == pic->height)
8010b26c:	8b 45 08             	mov    0x8(%ebp),%eax
8010b26f:	8b 40 04             	mov    0x4(%eax),%eax
8010b272:	3b 45 0c             	cmp    0xc(%ebp),%eax
8010b275:	75 04                	jne    8010b27b <getColor+0x43>
        y--;
8010b277:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    if (x == pic->width)
8010b27b:	8b 45 08             	mov    0x8(%ebp),%eax
8010b27e:	8b 00                	mov    (%eax),%eax
8010b280:	3b 45 10             	cmp    0x10(%ebp),%eax
8010b283:	75 04                	jne    8010b289 <getColor+0x51>
        x--;
8010b285:	83 6d 10 01          	subl   $0x1,0x10(%ebp)

    *isInPic = 1;
8010b289:	8b 45 14             	mov    0x14(%ebp),%eax
8010b28c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    return (pic->data + y * pic->width + x);
8010b292:	8b 45 08             	mov    0x8(%ebp),%eax
8010b295:	8b 48 08             	mov    0x8(%eax),%ecx
8010b298:	8b 45 08             	mov    0x8(%ebp),%eax
8010b29b:	8b 00                	mov    (%eax),%eax
8010b29d:	0f af 45 0c          	imul   0xc(%ebp),%eax
8010b2a1:	89 c2                	mov    %eax,%edx
8010b2a3:	8b 45 10             	mov    0x10(%ebp),%eax
8010b2a6:	01 c2                	add    %eax,%edx
8010b2a8:	89 d0                	mov    %edx,%eax
8010b2aa:	01 c0                	add    %eax,%eax
8010b2ac:	01 d0                	add    %edx,%eax
8010b2ae:	01 c8                	add    %ecx,%eax
}
8010b2b0:	5d                   	pop    %ebp
8010b2b1:	c3                   	ret    

8010b2b2 <setColor>:

int setColor(RGB *src, RGB *dst)
{
8010b2b2:	55                   	push   %ebp
8010b2b3:	89 e5                	mov    %esp,%ebp
    dst->R = src->R;
8010b2b5:	8b 45 08             	mov    0x8(%ebp),%eax
8010b2b8:	0f b6 50 02          	movzbl 0x2(%eax),%edx
8010b2bc:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b2bf:	88 50 02             	mov    %dl,0x2(%eax)
    dst->G = src->G;
8010b2c2:	8b 45 08             	mov    0x8(%ebp),%eax
8010b2c5:	0f b6 50 01          	movzbl 0x1(%eax),%edx
8010b2c9:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b2cc:	88 50 01             	mov    %dl,0x1(%eax)
    dst->B = src->B;
8010b2cf:	8b 45 08             	mov    0x8(%ebp),%eax
8010b2d2:	0f b6 10             	movzbl (%eax),%edx
8010b2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b2d8:	88 10                	mov    %dl,(%eax)

    return 1;
8010b2da:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010b2df:	5d                   	pop    %ebp
8010b2e0:	c3                   	ret    

8010b2e1 <mixColor>:

// 获取经过二次插值之后的RGB
int mixColor(PBitmap *src, float fy, float fx, RGB *dst)
{
8010b2e1:	55                   	push   %ebp
8010b2e2:	89 e5                	mov    %esp,%ebp
8010b2e4:	83 ec 4c             	sub    $0x4c,%esp
    int x = (int)fx;
8010b2e7:	d9 45 10             	flds   0x10(%ebp)
8010b2ea:	d9 7d be             	fnstcw -0x42(%ebp)
8010b2ed:	0f b7 45 be          	movzwl -0x42(%ebp),%eax
8010b2f1:	b4 0c                	mov    $0xc,%ah
8010b2f3:	66 89 45 bc          	mov    %ax,-0x44(%ebp)
8010b2f7:	d9 6d bc             	fldcw  -0x44(%ebp)
8010b2fa:	db 5d fc             	fistpl -0x4(%ebp)
8010b2fd:	d9 6d be             	fldcw  -0x42(%ebp)
    int y = (int)fy;
8010b300:	d9 45 0c             	flds   0xc(%ebp)
8010b303:	d9 6d bc             	fldcw  -0x44(%ebp)
8010b306:	db 5d f8             	fistpl -0x8(%ebp)
8010b309:	d9 6d be             	fldcw  -0x42(%ebp)
    if (x > fx)
8010b30c:	db 45 fc             	fildl  -0x4(%ebp)
8010b30f:	d9 45 10             	flds   0x10(%ebp)
8010b312:	d9 c9                	fxch   %st(1)
8010b314:	df e9                	fucomip %st(1),%st
8010b316:	dd d8                	fstp   %st(0)
8010b318:	76 04                	jbe    8010b31e <mixColor+0x3d>
        x--;
8010b31a:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    if (y > fy)
8010b31e:	db 45 f8             	fildl  -0x8(%ebp)
8010b321:	d9 45 0c             	flds   0xc(%ebp)
8010b324:	d9 c9                	fxch   %st(1)
8010b326:	df e9                	fucomip %st(1),%st
8010b328:	dd d8                	fstp   %st(0)
8010b32a:	76 04                	jbe    8010b330 <mixColor+0x4f>
        y--;
8010b32c:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)

    int flag[4];
    RGB *Color0 = getColor(src, y, x, &flag[0]);
8010b330:	8d 45 c0             	lea    -0x40(%ebp),%eax
8010b333:	50                   	push   %eax
8010b334:	ff 75 fc             	pushl  -0x4(%ebp)
8010b337:	ff 75 f8             	pushl  -0x8(%ebp)
8010b33a:	ff 75 08             	pushl  0x8(%ebp)
8010b33d:	e8 f6 fe ff ff       	call   8010b238 <getColor>
8010b342:	83 c4 10             	add    $0x10,%esp
8010b345:	89 45 f4             	mov    %eax,-0xc(%ebp)
    RGB *Color1 = getColor(src, y + 1, x, &flag[1]);
8010b348:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010b34b:	83 c0 01             	add    $0x1,%eax
8010b34e:	8d 55 c0             	lea    -0x40(%ebp),%edx
8010b351:	83 c2 04             	add    $0x4,%edx
8010b354:	52                   	push   %edx
8010b355:	ff 75 fc             	pushl  -0x4(%ebp)
8010b358:	50                   	push   %eax
8010b359:	ff 75 08             	pushl  0x8(%ebp)
8010b35c:	e8 d7 fe ff ff       	call   8010b238 <getColor>
8010b361:	83 c4 10             	add    $0x10,%esp
8010b364:	89 45 f0             	mov    %eax,-0x10(%ebp)
    RGB *Color2 = getColor(src, y, x + 1, &flag[2]);
8010b367:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010b36a:	83 c0 01             	add    $0x1,%eax
8010b36d:	8d 55 c0             	lea    -0x40(%ebp),%edx
8010b370:	83 c2 08             	add    $0x8,%edx
8010b373:	52                   	push   %edx
8010b374:	50                   	push   %eax
8010b375:	ff 75 f8             	pushl  -0x8(%ebp)
8010b378:	ff 75 08             	pushl  0x8(%ebp)
8010b37b:	e8 b8 fe ff ff       	call   8010b238 <getColor>
8010b380:	83 c4 10             	add    $0x10,%esp
8010b383:	89 45 ec             	mov    %eax,-0x14(%ebp)
    RGB *Color3 = getColor(src, y + 1, x + 1, &flag[3]);
8010b386:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010b389:	8d 50 01             	lea    0x1(%eax),%edx
8010b38c:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010b38f:	83 c0 01             	add    $0x1,%eax
8010b392:	8d 4d c0             	lea    -0x40(%ebp),%ecx
8010b395:	83 c1 0c             	add    $0xc,%ecx
8010b398:	51                   	push   %ecx
8010b399:	52                   	push   %edx
8010b39a:	50                   	push   %eax
8010b39b:	ff 75 08             	pushl  0x8(%ebp)
8010b39e:	e8 95 fe ff ff       	call   8010b238 <getColor>
8010b3a3:	83 c4 10             	add    $0x10,%esp
8010b3a6:	89 45 e8             	mov    %eax,-0x18(%ebp)

    float u = fx - x;
8010b3a9:	db 45 fc             	fildl  -0x4(%ebp)
8010b3ac:	d9 45 10             	flds   0x10(%ebp)
8010b3af:	de e1                	fsubp  %st,%st(1)
8010b3b1:	d9 5d e4             	fstps  -0x1c(%ebp)
    float v = fy - y;
8010b3b4:	db 45 f8             	fildl  -0x8(%ebp)
8010b3b7:	d9 45 0c             	flds   0xc(%ebp)
8010b3ba:	de e1                	fsubp  %st,%st(1)
8010b3bc:	d9 5d e0             	fstps  -0x20(%ebp)

    float pm3 = u * v;
8010b3bf:	d9 45 e4             	flds   -0x1c(%ebp)
8010b3c2:	d8 4d e0             	fmuls  -0x20(%ebp)
8010b3c5:	d9 5d dc             	fstps  -0x24(%ebp)
    float pm2 = u * (1 - v);
8010b3c8:	d9 e8                	fld1   
8010b3ca:	d8 65 e0             	fsubs  -0x20(%ebp)
8010b3cd:	d8 4d e4             	fmuls  -0x1c(%ebp)
8010b3d0:	d9 5d d8             	fstps  -0x28(%ebp)
    float pm1 = (1 - u) * v;
8010b3d3:	d9 e8                	fld1   
8010b3d5:	d8 65 e4             	fsubs  -0x1c(%ebp)
8010b3d8:	d8 4d e0             	fmuls  -0x20(%ebp)
8010b3db:	d9 5d d4             	fstps  -0x2c(%ebp)
    float pm0 = (1 - u) * (1 - v);
8010b3de:	d9 e8                	fld1   
8010b3e0:	d8 65 e4             	fsubs  -0x1c(%ebp)
8010b3e3:	d9 e8                	fld1   
8010b3e5:	d8 65 e0             	fsubs  -0x20(%ebp)
8010b3e8:	de c9                	fmulp  %st,%st(1)
8010b3ea:	d9 5d d0             	fstps  -0x30(%ebp)

    dst->R = (int)(Color0->R * pm0 * flag[0] + Color1->R * pm1 * flag[1] + Color2->R * pm2 * flag[2] + Color3->R * pm3 * flag[3]);
8010b3ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b3f0:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b3f4:	0f b6 c0             	movzbl %al,%eax
8010b3f7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b3fa:	db 45 b4             	fildl  -0x4c(%ebp)
8010b3fd:	d8 4d d0             	fmuls  -0x30(%ebp)
8010b400:	8b 45 c0             	mov    -0x40(%ebp),%eax
8010b403:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b406:	db 45 b4             	fildl  -0x4c(%ebp)
8010b409:	de c9                	fmulp  %st,%st(1)
8010b40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b40e:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b412:	0f b6 c0             	movzbl %al,%eax
8010b415:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b418:	db 45 b4             	fildl  -0x4c(%ebp)
8010b41b:	d8 4d d4             	fmuls  -0x2c(%ebp)
8010b41e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
8010b421:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b424:	db 45 b4             	fildl  -0x4c(%ebp)
8010b427:	de c9                	fmulp  %st,%st(1)
8010b429:	de c1                	faddp  %st,%st(1)
8010b42b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b42e:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b432:	0f b6 c0             	movzbl %al,%eax
8010b435:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b438:	db 45 b4             	fildl  -0x4c(%ebp)
8010b43b:	d8 4d d8             	fmuls  -0x28(%ebp)
8010b43e:	8b 45 c8             	mov    -0x38(%ebp),%eax
8010b441:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b444:	db 45 b4             	fildl  -0x4c(%ebp)
8010b447:	de c9                	fmulp  %st,%st(1)
8010b449:	de c1                	faddp  %st,%st(1)
8010b44b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b44e:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b452:	0f b6 c0             	movzbl %al,%eax
8010b455:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b458:	db 45 b4             	fildl  -0x4c(%ebp)
8010b45b:	d8 4d dc             	fmuls  -0x24(%ebp)
8010b45e:	8b 45 cc             	mov    -0x34(%ebp),%eax
8010b461:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b464:	db 45 b4             	fildl  -0x4c(%ebp)
8010b467:	de c9                	fmulp  %st,%st(1)
8010b469:	de c1                	faddp  %st,%st(1)
8010b46b:	d9 7d be             	fnstcw -0x42(%ebp)
8010b46e:	0f b7 45 be          	movzwl -0x42(%ebp),%eax
8010b472:	b4 0c                	mov    $0xc,%ah
8010b474:	66 89 45 bc          	mov    %ax,-0x44(%ebp)
8010b478:	d9 6d bc             	fldcw  -0x44(%ebp)
8010b47b:	db 5d b8             	fistpl -0x48(%ebp)
8010b47e:	d9 6d be             	fldcw  -0x42(%ebp)
8010b481:	8b 45 b8             	mov    -0x48(%ebp),%eax
8010b484:	89 c2                	mov    %eax,%edx
8010b486:	8b 45 14             	mov    0x14(%ebp),%eax
8010b489:	88 50 02             	mov    %dl,0x2(%eax)
    dst->G = (int)(Color0->G * pm0 * flag[0] + Color1->G * pm1 * flag[1] + Color2->G * pm2 * flag[2] + Color3->G * pm3 * flag[3]);
8010b48c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b48f:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b493:	0f b6 c0             	movzbl %al,%eax
8010b496:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b499:	db 45 b4             	fildl  -0x4c(%ebp)
8010b49c:	d8 4d d0             	fmuls  -0x30(%ebp)
8010b49f:	8b 45 c0             	mov    -0x40(%ebp),%eax
8010b4a2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b4a5:	db 45 b4             	fildl  -0x4c(%ebp)
8010b4a8:	de c9                	fmulp  %st,%st(1)
8010b4aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b4ad:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b4b1:	0f b6 c0             	movzbl %al,%eax
8010b4b4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b4b7:	db 45 b4             	fildl  -0x4c(%ebp)
8010b4ba:	d8 4d d4             	fmuls  -0x2c(%ebp)
8010b4bd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
8010b4c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b4c3:	db 45 b4             	fildl  -0x4c(%ebp)
8010b4c6:	de c9                	fmulp  %st,%st(1)
8010b4c8:	de c1                	faddp  %st,%st(1)
8010b4ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b4cd:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b4d1:	0f b6 c0             	movzbl %al,%eax
8010b4d4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b4d7:	db 45 b4             	fildl  -0x4c(%ebp)
8010b4da:	d8 4d d8             	fmuls  -0x28(%ebp)
8010b4dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
8010b4e0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b4e3:	db 45 b4             	fildl  -0x4c(%ebp)
8010b4e6:	de c9                	fmulp  %st,%st(1)
8010b4e8:	de c1                	faddp  %st,%st(1)
8010b4ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b4ed:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b4f1:	0f b6 c0             	movzbl %al,%eax
8010b4f4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b4f7:	db 45 b4             	fildl  -0x4c(%ebp)
8010b4fa:	d8 4d dc             	fmuls  -0x24(%ebp)
8010b4fd:	8b 45 cc             	mov    -0x34(%ebp),%eax
8010b500:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b503:	db 45 b4             	fildl  -0x4c(%ebp)
8010b506:	de c9                	fmulp  %st,%st(1)
8010b508:	de c1                	faddp  %st,%st(1)
8010b50a:	d9 6d bc             	fldcw  -0x44(%ebp)
8010b50d:	db 5d b8             	fistpl -0x48(%ebp)
8010b510:	d9 6d be             	fldcw  -0x42(%ebp)
8010b513:	8b 45 b8             	mov    -0x48(%ebp),%eax
8010b516:	89 c2                	mov    %eax,%edx
8010b518:	8b 45 14             	mov    0x14(%ebp),%eax
8010b51b:	88 50 01             	mov    %dl,0x1(%eax)
    dst->B = (int)(Color0->B * pm0 * flag[0] + Color1->B * pm1 * flag[1] + Color2->B * pm2 * flag[2] + Color3->B * pm3 * flag[3]);
8010b51e:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b521:	0f b6 00             	movzbl (%eax),%eax
8010b524:	0f b6 c0             	movzbl %al,%eax
8010b527:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b52a:	db 45 b4             	fildl  -0x4c(%ebp)
8010b52d:	d8 4d d0             	fmuls  -0x30(%ebp)
8010b530:	8b 45 c0             	mov    -0x40(%ebp),%eax
8010b533:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b536:	db 45 b4             	fildl  -0x4c(%ebp)
8010b539:	de c9                	fmulp  %st,%st(1)
8010b53b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b53e:	0f b6 00             	movzbl (%eax),%eax
8010b541:	0f b6 c0             	movzbl %al,%eax
8010b544:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b547:	db 45 b4             	fildl  -0x4c(%ebp)
8010b54a:	d8 4d d4             	fmuls  -0x2c(%ebp)
8010b54d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
8010b550:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b553:	db 45 b4             	fildl  -0x4c(%ebp)
8010b556:	de c9                	fmulp  %st,%st(1)
8010b558:	de c1                	faddp  %st,%st(1)
8010b55a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b55d:	0f b6 00             	movzbl (%eax),%eax
8010b560:	0f b6 c0             	movzbl %al,%eax
8010b563:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b566:	db 45 b4             	fildl  -0x4c(%ebp)
8010b569:	d8 4d d8             	fmuls  -0x28(%ebp)
8010b56c:	8b 45 c8             	mov    -0x38(%ebp),%eax
8010b56f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b572:	db 45 b4             	fildl  -0x4c(%ebp)
8010b575:	de c9                	fmulp  %st,%st(1)
8010b577:	de c1                	faddp  %st,%st(1)
8010b579:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b57c:	0f b6 00             	movzbl (%eax),%eax
8010b57f:	0f b6 c0             	movzbl %al,%eax
8010b582:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b585:	db 45 b4             	fildl  -0x4c(%ebp)
8010b588:	d8 4d dc             	fmuls  -0x24(%ebp)
8010b58b:	8b 45 cc             	mov    -0x34(%ebp),%eax
8010b58e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010b591:	db 45 b4             	fildl  -0x4c(%ebp)
8010b594:	de c9                	fmulp  %st,%st(1)
8010b596:	de c1                	faddp  %st,%st(1)
8010b598:	d9 6d bc             	fldcw  -0x44(%ebp)
8010b59b:	db 5d b8             	fistpl -0x48(%ebp)
8010b59e:	d9 6d be             	fldcw  -0x42(%ebp)
8010b5a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
8010b5a4:	89 c2                	mov    %eax,%edx
8010b5a6:	8b 45 14             	mov    0x14(%ebp),%eax
8010b5a9:	88 10                	mov    %dl,(%eax)

    return 1;
8010b5ab:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010b5b0:	c9                   	leave  
8010b5b1:	c3                   	ret    

8010b5b2 <mixColorInt>:

// 将float改为int计算，加快速度
int mixColorInt(PBitmap *src, const int y_16, const int x_16, RGB *dst)
{
8010b5b2:	55                   	push   %ebp
8010b5b3:	89 e5                	mov    %esp,%ebp
8010b5b5:	53                   	push   %ebx
8010b5b6:	83 ec 40             	sub    $0x40,%esp
    int x = x_16 >> 16;
8010b5b9:	8b 45 10             	mov    0x10(%ebp),%eax
8010b5bc:	c1 f8 10             	sar    $0x10,%eax
8010b5bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int y = y_16 >> 16;
8010b5c2:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b5c5:	c1 f8 10             	sar    $0x10,%eax
8010b5c8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int flag[4];
    RGB *Color0 = getColor(src, y, x, &flag[0]);
8010b5cb:	8d 45 bc             	lea    -0x44(%ebp),%eax
8010b5ce:	50                   	push   %eax
8010b5cf:	ff 75 f8             	pushl  -0x8(%ebp)
8010b5d2:	ff 75 f4             	pushl  -0xc(%ebp)
8010b5d5:	ff 75 08             	pushl  0x8(%ebp)
8010b5d8:	e8 5b fc ff ff       	call   8010b238 <getColor>
8010b5dd:	83 c4 10             	add    $0x10,%esp
8010b5e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    RGB *Color1 = getColor(src, y + 1, x, &flag[1]);
8010b5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b5e6:	83 c0 01             	add    $0x1,%eax
8010b5e9:	8d 55 bc             	lea    -0x44(%ebp),%edx
8010b5ec:	83 c2 04             	add    $0x4,%edx
8010b5ef:	52                   	push   %edx
8010b5f0:	ff 75 f8             	pushl  -0x8(%ebp)
8010b5f3:	50                   	push   %eax
8010b5f4:	ff 75 08             	pushl  0x8(%ebp)
8010b5f7:	e8 3c fc ff ff       	call   8010b238 <getColor>
8010b5fc:	83 c4 10             	add    $0x10,%esp
8010b5ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    RGB *Color2 = getColor(src, y, x + 1, &flag[2]);
8010b602:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010b605:	83 c0 01             	add    $0x1,%eax
8010b608:	8d 55 bc             	lea    -0x44(%ebp),%edx
8010b60b:	83 c2 08             	add    $0x8,%edx
8010b60e:	52                   	push   %edx
8010b60f:	50                   	push   %eax
8010b610:	ff 75 f4             	pushl  -0xc(%ebp)
8010b613:	ff 75 08             	pushl  0x8(%ebp)
8010b616:	e8 1d fc ff ff       	call   8010b238 <getColor>
8010b61b:	83 c4 10             	add    $0x10,%esp
8010b61e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    RGB *Color3 = getColor(src, y + 1, x + 1, &flag[3]);
8010b621:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010b624:	8d 50 01             	lea    0x1(%eax),%edx
8010b627:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010b62a:	83 c0 01             	add    $0x1,%eax
8010b62d:	8d 4d bc             	lea    -0x44(%ebp),%ecx
8010b630:	83 c1 0c             	add    $0xc,%ecx
8010b633:	51                   	push   %ecx
8010b634:	52                   	push   %edx
8010b635:	50                   	push   %eax
8010b636:	ff 75 08             	pushl  0x8(%ebp)
8010b639:	e8 fa fb ff ff       	call   8010b238 <getColor>
8010b63e:	83 c4 10             	add    $0x10,%esp
8010b641:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    unsigned int u_8 = (x_16 & 0xFFFF) >> 8;
8010b644:	8b 45 10             	mov    0x10(%ebp),%eax
8010b647:	0f b7 c0             	movzwl %ax,%eax
8010b64a:	c1 f8 08             	sar    $0x8,%eax
8010b64d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    unsigned int v_8 = (y_16 & 0xFFFF) >> 8;
8010b650:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b653:	0f b7 c0             	movzwl %ax,%eax
8010b656:	c1 f8 08             	sar    $0x8,%eax
8010b659:	89 45 dc             	mov    %eax,-0x24(%ebp)

    unsigned int pm3_16 = (u_8 * v_8);
8010b65c:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010b65f:	0f af 45 dc          	imul   -0x24(%ebp),%eax
8010b663:	89 45 d8             	mov    %eax,-0x28(%ebp)
    unsigned int pm2_16 = (u_8 * (255 - v_8));
8010b666:	b8 ff 00 00 00       	mov    $0xff,%eax
8010b66b:	2b 45 dc             	sub    -0x24(%ebp),%eax
8010b66e:	0f af 45 e0          	imul   -0x20(%ebp),%eax
8010b672:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned int pm1_16 = ((255 - u_8) * v_8);
8010b675:	b8 ff 00 00 00       	mov    $0xff,%eax
8010b67a:	2b 45 e0             	sub    -0x20(%ebp),%eax
8010b67d:	0f af 45 dc          	imul   -0x24(%ebp),%eax
8010b681:	89 45 d0             	mov    %eax,-0x30(%ebp)
    unsigned int pm0_16 = ((255 - u_8) * (255 - v_8));
8010b684:	b8 ff 00 00 00       	mov    $0xff,%eax
8010b689:	2b 45 e0             	sub    -0x20(%ebp),%eax
8010b68c:	89 c2                	mov    %eax,%edx
8010b68e:	b8 ff 00 00 00       	mov    $0xff,%eax
8010b693:	2b 45 dc             	sub    -0x24(%ebp),%eax
8010b696:	0f af c2             	imul   %edx,%eax
8010b699:	89 45 cc             	mov    %eax,-0x34(%ebp)

    dst->R = ((pm0_16 * Color0->R * flag[0] + pm1_16 * Color1->R * flag[1] + pm2_16 * Color2->R * flag[2] + pm3_16 * Color3->R * flag[3]) >> 16);
8010b69c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b69f:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b6a3:	0f b6 c0             	movzbl %al,%eax
8010b6a6:	0f af 45 cc          	imul   -0x34(%ebp),%eax
8010b6aa:	8b 55 bc             	mov    -0x44(%ebp),%edx
8010b6ad:	0f af d0             	imul   %eax,%edx
8010b6b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b6b3:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b6b7:	0f b6 c0             	movzbl %al,%eax
8010b6ba:	0f af 45 d0          	imul   -0x30(%ebp),%eax
8010b6be:	8b 4d c0             	mov    -0x40(%ebp),%ecx
8010b6c1:	0f af c1             	imul   %ecx,%eax
8010b6c4:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
8010b6c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b6ca:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b6ce:	0f b6 c0             	movzbl %al,%eax
8010b6d1:	0f af 45 d8          	imul   -0x28(%ebp),%eax
8010b6d5:	8b 55 c8             	mov    -0x38(%ebp),%edx
8010b6d8:	0f af d0             	imul   %eax,%edx
8010b6db:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b6de:	0f b6 40 02          	movzbl 0x2(%eax),%eax
8010b6e2:	0f b6 c0             	movzbl %al,%eax
8010b6e5:	0f af 45 d4          	imul   -0x2c(%ebp),%eax
8010b6e9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
8010b6ec:	0f af c1             	imul   %ecx,%eax
8010b6ef:	01 d0                	add    %edx,%eax
8010b6f1:	01 d8                	add    %ebx,%eax
8010b6f3:	c1 e8 10             	shr    $0x10,%eax
8010b6f6:	89 c2                	mov    %eax,%edx
8010b6f8:	8b 45 14             	mov    0x14(%ebp),%eax
8010b6fb:	88 50 02             	mov    %dl,0x2(%eax)
    dst->G = ((pm0_16 * Color0->G * flag[0] + pm1_16 * Color1->G * flag[1] + pm2_16 * Color2->G * flag[2] + pm3_16 * Color3->G * flag[3]) >> 16);
8010b6fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b701:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b705:	0f b6 c0             	movzbl %al,%eax
8010b708:	0f af 45 cc          	imul   -0x34(%ebp),%eax
8010b70c:	8b 55 bc             	mov    -0x44(%ebp),%edx
8010b70f:	0f af d0             	imul   %eax,%edx
8010b712:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b715:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b719:	0f b6 c0             	movzbl %al,%eax
8010b71c:	0f af 45 d0          	imul   -0x30(%ebp),%eax
8010b720:	8b 4d c0             	mov    -0x40(%ebp),%ecx
8010b723:	0f af c1             	imul   %ecx,%eax
8010b726:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
8010b729:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b72c:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b730:	0f b6 c0             	movzbl %al,%eax
8010b733:	0f af 45 d8          	imul   -0x28(%ebp),%eax
8010b737:	8b 55 c8             	mov    -0x38(%ebp),%edx
8010b73a:	0f af d0             	imul   %eax,%edx
8010b73d:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b740:	0f b6 40 01          	movzbl 0x1(%eax),%eax
8010b744:	0f b6 c0             	movzbl %al,%eax
8010b747:	0f af 45 d4          	imul   -0x2c(%ebp),%eax
8010b74b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
8010b74e:	0f af c1             	imul   %ecx,%eax
8010b751:	01 d0                	add    %edx,%eax
8010b753:	01 d8                	add    %ebx,%eax
8010b755:	c1 e8 10             	shr    $0x10,%eax
8010b758:	89 c2                	mov    %eax,%edx
8010b75a:	8b 45 14             	mov    0x14(%ebp),%eax
8010b75d:	88 50 01             	mov    %dl,0x1(%eax)
    dst->B = ((pm0_16 * Color0->B * flag[0] + pm1_16 * Color1->B * flag[1] + pm2_16 * Color2->B * flag[2] + pm3_16 * Color3->B * flag[3]) >> 16);
8010b760:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010b763:	0f b6 00             	movzbl (%eax),%eax
8010b766:	0f b6 c0             	movzbl %al,%eax
8010b769:	0f af 45 cc          	imul   -0x34(%ebp),%eax
8010b76d:	8b 55 bc             	mov    -0x44(%ebp),%edx
8010b770:	0f af d0             	imul   %eax,%edx
8010b773:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b776:	0f b6 00             	movzbl (%eax),%eax
8010b779:	0f b6 c0             	movzbl %al,%eax
8010b77c:	0f af 45 d0          	imul   -0x30(%ebp),%eax
8010b780:	8b 4d c0             	mov    -0x40(%ebp),%ecx
8010b783:	0f af c1             	imul   %ecx,%eax
8010b786:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
8010b789:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b78c:	0f b6 00             	movzbl (%eax),%eax
8010b78f:	0f b6 c0             	movzbl %al,%eax
8010b792:	0f af 45 d8          	imul   -0x28(%ebp),%eax
8010b796:	8b 55 c8             	mov    -0x38(%ebp),%edx
8010b799:	0f af d0             	imul   %eax,%edx
8010b79c:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b79f:	0f b6 00             	movzbl (%eax),%eax
8010b7a2:	0f b6 c0             	movzbl %al,%eax
8010b7a5:	0f af 45 d4          	imul   -0x2c(%ebp),%eax
8010b7a9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
8010b7ac:	0f af c1             	imul   %ecx,%eax
8010b7af:	01 d0                	add    %edx,%eax
8010b7b1:	01 d8                	add    %ebx,%eax
8010b7b3:	c1 e8 10             	shr    $0x10,%eax
8010b7b6:	89 c2                	mov    %eax,%edx
8010b7b8:	8b 45 14             	mov    0x14(%ebp),%eax
8010b7bb:	88 10                	mov    %dl,(%eax)
}
8010b7bd:	90                   	nop
8010b7be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010b7c1:	c9                   	leave  
8010b7c2:	c3                   	ret    

8010b7c3 <picScale>:

int picScale(PBitmap *src, PBitmap *dst)
{
8010b7c3:	55                   	push   %ebp
8010b7c4:	89 e5                	mov    %esp,%ebp
8010b7c6:	53                   	push   %ebx
8010b7c7:	83 ec 20             	sub    $0x20,%esp
    // float xScale = (float)src->width / (float)dst->width;
    // float yScale = (float)src->height / (float)dst->height;

    int xrIntFloat_16 = ((src->width)<<16)/dst->width+1;
8010b7ca:	8b 45 08             	mov    0x8(%ebp),%eax
8010b7cd:	8b 00                	mov    (%eax),%eax
8010b7cf:	c1 e0 10             	shl    $0x10,%eax
8010b7d2:	89 c1                	mov    %eax,%ecx
8010b7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b7d7:	8b 18                	mov    (%eax),%ebx
8010b7d9:	89 c8                	mov    %ecx,%eax
8010b7db:	99                   	cltd   
8010b7dc:	f7 fb                	idiv   %ebx
8010b7de:	83 c0 01             	add    $0x1,%eax
8010b7e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int yrIntFloat_16 = ((src->height)<<16)/dst->height+1;
8010b7e4:	8b 45 08             	mov    0x8(%ebp),%eax
8010b7e7:	8b 40 04             	mov    0x4(%eax),%eax
8010b7ea:	c1 e0 10             	shl    $0x10,%eax
8010b7ed:	89 c1                	mov    %eax,%ecx
8010b7ef:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b7f2:	8b 58 04             	mov    0x4(%eax),%ebx
8010b7f5:	89 c8                	mov    %ecx,%eax
8010b7f7:	99                   	cltd   
8010b7f8:	f7 fb                	idiv   %ebx
8010b7fa:	83 c0 01             	add    $0x1,%eax
8010b7fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    const int csdErrorX = -(1<<15)+(xrIntFloat_16>>1);
8010b800:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b803:	d1 f8                	sar    %eax
8010b805:	2d 00 80 00 00       	sub    $0x8000,%eax
8010b80a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    const int csdErrorY = -(1<<15)+(yrIntFloat_16>>1);
8010b80d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b810:	d1 f8                	sar    %eax
8010b812:	2d 00 80 00 00       	sub    $0x8000,%eax
8010b817:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int srcy_16=csdErrorY;
8010b81a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010b81d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int y = 0; y < dst->height; y++)
8010b820:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010b827:	eb 5d                	jmp    8010b886 <picScale+0xc3>
    {
        int srcx_16=csdErrorX;
8010b829:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010b82c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        for (int x = 0; x < dst->width; x++)
8010b82f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
8010b836:	eb 3a                	jmp    8010b872 <picScale+0xaf>
        {
            // mixColor(src, (float)(y + 0.49999) * yScale - 0.5, (float)(x + 0.49999) * xScale - 0.5, (dst->data + y * dst->width + x));
            mixColorInt(src, srcy_16, srcx_16, dst->data + y * dst->width + x);
8010b838:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b83b:	8b 48 08             	mov    0x8(%eax),%ecx
8010b83e:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b841:	8b 00                	mov    (%eax),%eax
8010b843:	0f af 45 f4          	imul   -0xc(%ebp),%eax
8010b847:	89 c2                	mov    %eax,%edx
8010b849:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010b84c:	01 c2                	add    %eax,%edx
8010b84e:	89 d0                	mov    %edx,%eax
8010b850:	01 c0                	add    %eax,%eax
8010b852:	01 d0                	add    %edx,%eax
8010b854:	01 c8                	add    %ecx,%eax
8010b856:	50                   	push   %eax
8010b857:	ff 75 f0             	pushl  -0x10(%ebp)
8010b85a:	ff 75 f8             	pushl  -0x8(%ebp)
8010b85d:	ff 75 08             	pushl  0x8(%ebp)
8010b860:	e8 4d fd ff ff       	call   8010b5b2 <mixColorInt>
8010b865:	83 c4 10             	add    $0x10,%esp
            srcx_16+=xrIntFloat_16;
8010b868:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b86b:	01 45 f0             	add    %eax,-0x10(%ebp)

    int srcy_16=csdErrorY;
    for (int y = 0; y < dst->height; y++)
    {
        int srcx_16=csdErrorX;
        for (int x = 0; x < dst->width; x++)
8010b86e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
8010b872:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b875:	8b 00                	mov    (%eax),%eax
8010b877:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8010b87a:	7f bc                	jg     8010b838 <picScale+0x75>
        {
            // mixColor(src, (float)(y + 0.49999) * yScale - 0.5, (float)(x + 0.49999) * xScale - 0.5, (dst->data + y * dst->width + x));
            mixColorInt(src, srcy_16, srcx_16, dst->data + y * dst->width + x);
            srcx_16+=xrIntFloat_16;
        }
        srcy_16+=yrIntFloat_16;
8010b87c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010b87f:	01 45 f8             	add    %eax,-0x8(%ebp)
    int yrIntFloat_16 = ((src->height)<<16)/dst->height+1;
    const int csdErrorX = -(1<<15)+(xrIntFloat_16>>1);
    const int csdErrorY = -(1<<15)+(yrIntFloat_16>>1);

    int srcy_16=csdErrorY;
    for (int y = 0; y < dst->height; y++)
8010b882:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010b886:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b889:	8b 40 04             	mov    0x4(%eax),%eax
8010b88c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010b88f:	7f 98                	jg     8010b829 <picScale+0x66>
            srcx_16+=xrIntFloat_16;
        }
        srcy_16+=yrIntFloat_16;
    }

    return 1;
8010b891:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010b896:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010b899:	c9                   	leave  
8010b89a:	c3                   	ret    

8010b89b <picFastScale>:

int picFastScale(PBitmap *src, PBitmap *dst)
{
8010b89b:	55                   	push   %ebp
8010b89c:	89 e5                	mov    %esp,%ebp
8010b89e:	83 ec 1c             	sub    $0x1c,%esp
    float xScale = (float)src->width / (float)dst->width;
8010b8a1:	8b 45 08             	mov    0x8(%ebp),%eax
8010b8a4:	8b 00                	mov    (%eax),%eax
8010b8a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010b8a9:	db 45 e4             	fildl  -0x1c(%ebp)
8010b8ac:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b8af:	8b 00                	mov    (%eax),%eax
8010b8b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010b8b4:	db 45 e4             	fildl  -0x1c(%ebp)
8010b8b7:	de f9                	fdivrp %st,%st(1)
8010b8b9:	d9 5d f4             	fstps  -0xc(%ebp)
    float yScale = (float)src->height / (float)dst->height;
8010b8bc:	8b 45 08             	mov    0x8(%ebp),%eax
8010b8bf:	8b 40 04             	mov    0x4(%eax),%eax
8010b8c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010b8c5:	db 45 e4             	fildl  -0x1c(%ebp)
8010b8c8:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b8cb:	8b 40 04             	mov    0x4(%eax),%eax
8010b8ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010b8d1:	db 45 e4             	fildl  -0x1c(%ebp)
8010b8d4:	de f9                	fdivrp %st,%st(1)
8010b8d6:	d9 5d f0             	fstps  -0x10(%ebp)

    for (int y = 0; y < dst->height; y++)
8010b8d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
8010b8e0:	eb 5e                	jmp    8010b940 <picFastScale+0xa5>
    {
        for (int x = 0; x < dst->width; x++)
8010b8e2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
8010b8e9:	eb 47                	jmp    8010b932 <picFastScale+0x97>
        {
            // mixColor(src, (float)(y + 0.49999) * yScale - 0.5, (float)(x + 0.49999) * xScale - 0.5, (dst->data + y * dst->width + x));
            dst = getColor(src, (int)(y*yScale), (int)(x*xScale), 0);
8010b8eb:	db 45 f8             	fildl  -0x8(%ebp)
8010b8ee:	d8 4d f4             	fmuls  -0xc(%ebp)
8010b8f1:	d9 7d ee             	fnstcw -0x12(%ebp)
8010b8f4:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
8010b8f8:	b4 0c                	mov    $0xc,%ah
8010b8fa:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
8010b8fe:	d9 6d ec             	fldcw  -0x14(%ebp)
8010b901:	db 5d e8             	fistpl -0x18(%ebp)
8010b904:	d9 6d ee             	fldcw  -0x12(%ebp)
8010b907:	8b 55 e8             	mov    -0x18(%ebp),%edx
8010b90a:	db 45 fc             	fildl  -0x4(%ebp)
8010b90d:	d8 4d f0             	fmuls  -0x10(%ebp)
8010b910:	d9 6d ec             	fldcw  -0x14(%ebp)
8010b913:	db 5d e8             	fistpl -0x18(%ebp)
8010b916:	d9 6d ee             	fldcw  -0x12(%ebp)
8010b919:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010b91c:	6a 00                	push   $0x0
8010b91e:	52                   	push   %edx
8010b91f:	50                   	push   %eax
8010b920:	ff 75 08             	pushl  0x8(%ebp)
8010b923:	e8 10 f9 ff ff       	call   8010b238 <getColor>
8010b928:	83 c4 10             	add    $0x10,%esp
8010b92b:	89 45 0c             	mov    %eax,0xc(%ebp)
    float xScale = (float)src->width / (float)dst->width;
    float yScale = (float)src->height / (float)dst->height;

    for (int y = 0; y < dst->height; y++)
    {
        for (int x = 0; x < dst->width; x++)
8010b92e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
8010b932:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b935:	8b 00                	mov    (%eax),%eax
8010b937:	3b 45 f8             	cmp    -0x8(%ebp),%eax
8010b93a:	7f af                	jg     8010b8eb <picFastScale+0x50>
int picFastScale(PBitmap *src, PBitmap *dst)
{
    float xScale = (float)src->width / (float)dst->width;
    float yScale = (float)src->height / (float)dst->height;

    for (int y = 0; y < dst->height; y++)
8010b93c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
8010b940:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b943:	8b 40 04             	mov    0x4(%eax),%eax
8010b946:	3b 45 fc             	cmp    -0x4(%ebp),%eax
8010b949:	7f 97                	jg     8010b8e2 <picFastScale+0x47>
        {
            // mixColor(src, (float)(y + 0.49999) * yScale - 0.5, (float)(x + 0.49999) * xScale - 0.5, (dst->data + y * dst->width + x));
            dst = getColor(src, (int)(y*yScale), (int)(x*xScale), 0);
        }
    }
    return 1;
8010b94b:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010b950:	c9                   	leave  
8010b951:	c3                   	ret    

8010b952 <getTurnSize>:

int getTurnSize(int *width, int *height, float angle)
{
8010b952:	55                   	push   %ebp
8010b953:	89 e5                	mov    %esp,%ebp
8010b955:	83 ec 28             	sub    $0x28,%esp
    int w = (int)(*width * abs(cos(angle)) + *height * abs(sin(angle)));
8010b958:	8b 45 08             	mov    0x8(%ebp),%eax
8010b95b:	8b 00                	mov    (%eax),%eax
8010b95d:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010b960:	db 45 e0             	fildl  -0x20(%ebp)
8010b963:	d9 5d e0             	fstps  -0x20(%ebp)
8010b966:	83 ec 0c             	sub    $0xc,%esp
8010b969:	ff 75 10             	pushl  0x10(%ebp)
8010b96c:	e8 76 05 00 00       	call   8010bee7 <cos>
8010b971:	83 c4 10             	add    $0x10,%esp
8010b974:	d9 5d dc             	fstps  -0x24(%ebp)
8010b977:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010b97a:	83 ec 0c             	sub    $0xc,%esp
8010b97d:	50                   	push   %eax
8010b97e:	e8 9b 04 00 00       	call   8010be1e <abs>
8010b983:	83 c4 10             	add    $0x10,%esp
8010b986:	d8 4d e0             	fmuls  -0x20(%ebp)
8010b989:	d9 5d e0             	fstps  -0x20(%ebp)
8010b98c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010b98f:	8b 00                	mov    (%eax),%eax
8010b991:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010b994:	db 45 dc             	fildl  -0x24(%ebp)
8010b997:	d9 5d dc             	fstps  -0x24(%ebp)
8010b99a:	83 ec 0c             	sub    $0xc,%esp
8010b99d:	ff 75 10             	pushl  0x10(%ebp)
8010b9a0:	e8 e5 06 00 00       	call   8010c08a <sin>
8010b9a5:	83 c4 10             	add    $0x10,%esp
8010b9a8:	d9 5d d8             	fstps  -0x28(%ebp)
8010b9ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010b9ae:	83 ec 0c             	sub    $0xc,%esp
8010b9b1:	50                   	push   %eax
8010b9b2:	e8 67 04 00 00       	call   8010be1e <abs>
8010b9b7:	83 c4 10             	add    $0x10,%esp
8010b9ba:	d8 4d dc             	fmuls  -0x24(%ebp)
8010b9bd:	d8 45 e0             	fadds  -0x20(%ebp)
8010b9c0:	d9 7d e6             	fnstcw -0x1a(%ebp)
8010b9c3:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
8010b9c7:	b4 0c                	mov    $0xc,%ah
8010b9c9:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
8010b9cd:	d9 6d e4             	fldcw  -0x1c(%ebp)
8010b9d0:	db 5d f4             	fistpl -0xc(%ebp)
8010b9d3:	d9 6d e6             	fldcw  -0x1a(%ebp)
    int h = (int)(*width * abs(sin(angle)) + *height * abs(cos(angle)));
8010b9d6:	8b 45 08             	mov    0x8(%ebp),%eax
8010b9d9:	8b 00                	mov    (%eax),%eax
8010b9db:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010b9de:	db 45 e0             	fildl  -0x20(%ebp)
8010b9e1:	d9 5d e0             	fstps  -0x20(%ebp)
8010b9e4:	83 ec 0c             	sub    $0xc,%esp
8010b9e7:	ff 75 10             	pushl  0x10(%ebp)
8010b9ea:	e8 9b 06 00 00       	call   8010c08a <sin>
8010b9ef:	83 c4 10             	add    $0x10,%esp
8010b9f2:	d9 5d dc             	fstps  -0x24(%ebp)
8010b9f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010b9f8:	83 ec 0c             	sub    $0xc,%esp
8010b9fb:	50                   	push   %eax
8010b9fc:	e8 1d 04 00 00       	call   8010be1e <abs>
8010ba01:	83 c4 10             	add    $0x10,%esp
8010ba04:	d8 4d e0             	fmuls  -0x20(%ebp)
8010ba07:	d9 5d e0             	fstps  -0x20(%ebp)
8010ba0a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010ba0d:	8b 00                	mov    (%eax),%eax
8010ba0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010ba12:	db 45 dc             	fildl  -0x24(%ebp)
8010ba15:	d9 5d dc             	fstps  -0x24(%ebp)
8010ba18:	83 ec 0c             	sub    $0xc,%esp
8010ba1b:	ff 75 10             	pushl  0x10(%ebp)
8010ba1e:	e8 c4 04 00 00       	call   8010bee7 <cos>
8010ba23:	83 c4 10             	add    $0x10,%esp
8010ba26:	d9 5d d8             	fstps  -0x28(%ebp)
8010ba29:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010ba2c:	83 ec 0c             	sub    $0xc,%esp
8010ba2f:	50                   	push   %eax
8010ba30:	e8 e9 03 00 00       	call   8010be1e <abs>
8010ba35:	83 c4 10             	add    $0x10,%esp
8010ba38:	d8 4d dc             	fmuls  -0x24(%ebp)
8010ba3b:	d8 45 e0             	fadds  -0x20(%ebp)
8010ba3e:	d9 7d e6             	fnstcw -0x1a(%ebp)
8010ba41:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
8010ba45:	b4 0c                	mov    $0xc,%ah
8010ba47:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
8010ba4b:	d9 6d e4             	fldcw  -0x1c(%ebp)
8010ba4e:	db 5d f0             	fistpl -0x10(%ebp)
8010ba51:	d9 6d e6             	fldcw  -0x1a(%ebp)

    *height = h;
8010ba54:	8b 45 0c             	mov    0xc(%ebp),%eax
8010ba57:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010ba5a:	89 10                	mov    %edx,(%eax)
    *width = w;
8010ba5c:	8b 45 08             	mov    0x8(%ebp),%eax
8010ba5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010ba62:	89 10                	mov    %edx,(%eax)
    return 1;
8010ba64:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010ba69:	c9                   	leave  
8010ba6a:	c3                   	ret    

8010ba6b <picTurn>:

int picTurn(PBitmap *src, PBitmap *dst, float angle)
{
8010ba6b:	55                   	push   %ebp
8010ba6c:	89 e5                	mov    %esp,%ebp
8010ba6e:	83 ec 48             	sub    $0x48,%esp

    // 以中心为旋转中心，要找到目标图中的旋转中心
    const float my = (float)src->height / 2;
8010ba71:	8b 45 08             	mov    0x8(%ebp),%eax
8010ba74:	8b 40 04             	mov    0x4(%eax),%eax
8010ba77:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010ba7a:	db 45 c4             	fildl  -0x3c(%ebp)
8010ba7d:	d9 05 98 0b 11 80    	flds   0x80110b98
8010ba83:	de f9                	fdivrp %st,%st(1)
8010ba85:	d9 5d ec             	fstps  -0x14(%ebp)
    const float mx = (float)src->width / 2;
8010ba88:	8b 45 08             	mov    0x8(%ebp),%eax
8010ba8b:	8b 00                	mov    (%eax),%eax
8010ba8d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010ba90:	db 45 c4             	fildl  -0x3c(%ebp)
8010ba93:	d9 05 98 0b 11 80    	flds   0x80110b98
8010ba99:	de f9                	fdivrp %st,%st(1)
8010ba9b:	d9 5d e8             	fstps  -0x18(%ebp)

    const float dy = (float)(dst->height - src->height) / 2;
8010ba9e:	8b 45 0c             	mov    0xc(%ebp),%eax
8010baa1:	8b 50 04             	mov    0x4(%eax),%edx
8010baa4:	8b 45 08             	mov    0x8(%ebp),%eax
8010baa7:	8b 40 04             	mov    0x4(%eax),%eax
8010baaa:	29 c2                	sub    %eax,%edx
8010baac:	89 d0                	mov    %edx,%eax
8010baae:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010bab1:	db 45 c4             	fildl  -0x3c(%ebp)
8010bab4:	d9 05 98 0b 11 80    	flds   0x80110b98
8010baba:	de f9                	fdivrp %st,%st(1)
8010babc:	d9 5d e4             	fstps  -0x1c(%ebp)
    const float dx = (float)(dst->width - src->width) / 2;
8010babf:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bac2:	8b 10                	mov    (%eax),%edx
8010bac4:	8b 45 08             	mov    0x8(%ebp),%eax
8010bac7:	8b 00                	mov    (%eax),%eax
8010bac9:	29 c2                	sub    %eax,%edx
8010bacb:	89 d0                	mov    %edx,%eax
8010bacd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010bad0:	db 45 c4             	fildl  -0x3c(%ebp)
8010bad3:	d9 05 98 0b 11 80    	flds   0x80110b98
8010bad9:	de f9                	fdivrp %st,%st(1)
8010badb:	d9 5d e0             	fstps  -0x20(%ebp)

    const float COSX = cos(-angle);
8010bade:	d9 45 10             	flds   0x10(%ebp)
8010bae1:	d9 e0                	fchs   
8010bae3:	83 ec 0c             	sub    $0xc,%esp
8010bae6:	8d 64 24 fc          	lea    -0x4(%esp),%esp
8010baea:	d9 1c 24             	fstps  (%esp)
8010baed:	e8 f5 03 00 00       	call   8010bee7 <cos>
8010baf2:	83 c4 10             	add    $0x10,%esp
8010baf5:	d9 5d c4             	fstps  -0x3c(%ebp)
8010baf8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
8010bafb:	89 45 dc             	mov    %eax,-0x24(%ebp)
    const float SINX = sin(-angle);
8010bafe:	d9 45 10             	flds   0x10(%ebp)
8010bb01:	d9 e0                	fchs   
8010bb03:	83 ec 0c             	sub    $0xc,%esp
8010bb06:	8d 64 24 fc          	lea    -0x4(%esp),%esp
8010bb0a:	d9 1c 24             	fstps  (%esp)
8010bb0d:	e8 78 05 00 00       	call   8010c08a <sin>
8010bb12:	83 c4 10             	add    $0x10,%esp
8010bb15:	d9 5d c4             	fstps  -0x3c(%ebp)
8010bb18:	8b 45 c4             	mov    -0x3c(%ebp),%eax
8010bb1b:	89 45 d8             	mov    %eax,-0x28(%ebp)

    float srcI = 0;
8010bb1e:	d9 ee                	fldz   
8010bb20:	d9 5d d4             	fstps  -0x2c(%ebp)
    float srcJ = 0;
8010bb23:	d9 ee                	fldz   
8010bb25:	d9 5d d0             	fstps  -0x30(%ebp)

    for (int i = 0; i < dst->height; i++)
8010bb28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010bb2f:	e9 28 01 00 00       	jmp    8010bc5c <picTurn+0x1f1>
    {
        for (int j = 0; j < dst->width; j++)
8010bb34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8010bb3b:	e9 0a 01 00 00       	jmp    8010bc4a <picTurn+0x1df>
        {
            srcI = ((float)i - dy - my) * COSX + ((float)j - dx - mx) * SINX + my;
8010bb40:	db 45 f4             	fildl  -0xc(%ebp)
8010bb43:	d8 65 e4             	fsubs  -0x1c(%ebp)
8010bb46:	d8 65 ec             	fsubs  -0x14(%ebp)
8010bb49:	d8 4d dc             	fmuls  -0x24(%ebp)
8010bb4c:	db 45 f0             	fildl  -0x10(%ebp)
8010bb4f:	d8 65 e0             	fsubs  -0x20(%ebp)
8010bb52:	d8 65 e8             	fsubs  -0x18(%ebp)
8010bb55:	d8 4d d8             	fmuls  -0x28(%ebp)
8010bb58:	de c1                	faddp  %st,%st(1)
8010bb5a:	d8 45 ec             	fadds  -0x14(%ebp)
8010bb5d:	d9 5d d4             	fstps  -0x2c(%ebp)
            srcJ = ((float)j - dx - mx) * COSX - ((float)i - dy - my) * SINX + mx;
8010bb60:	db 45 f0             	fildl  -0x10(%ebp)
8010bb63:	d8 65 e0             	fsubs  -0x20(%ebp)
8010bb66:	d8 65 e8             	fsubs  -0x18(%ebp)
8010bb69:	d8 4d dc             	fmuls  -0x24(%ebp)
8010bb6c:	db 45 f4             	fildl  -0xc(%ebp)
8010bb6f:	d8 65 e4             	fsubs  -0x1c(%ebp)
8010bb72:	d8 65 ec             	fsubs  -0x14(%ebp)
8010bb75:	d8 4d d8             	fmuls  -0x28(%ebp)
8010bb78:	de e9                	fsubrp %st,%st(1)
8010bb7a:	d8 45 e8             	fadds  -0x18(%ebp)
8010bb7d:	d9 5d d0             	fstps  -0x30(%ebp)
            if (!(srcI >= 0 && srcI < src->height && srcJ >= 0 && srcJ < src->width))
8010bb80:	d9 45 d4             	flds   -0x2c(%ebp)
8010bb83:	d9 ee                	fldz   
8010bb85:	d9 c9                	fxch   %st(1)
8010bb87:	df e9                	fucomip %st(1),%st
8010bb89:	dd d8                	fstp   %st(0)
8010bb8b:	0f 93 c0             	setae  %al
8010bb8e:	83 f0 01             	xor    $0x1,%eax
8010bb91:	84 c0                	test   %al,%al
8010bb93:	75 52                	jne    8010bbe7 <picTurn+0x17c>
8010bb95:	8b 45 08             	mov    0x8(%ebp),%eax
8010bb98:	8b 40 04             	mov    0x4(%eax),%eax
8010bb9b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010bb9e:	db 45 c4             	fildl  -0x3c(%ebp)
8010bba1:	d9 45 d4             	flds   -0x2c(%ebp)
8010bba4:	d9 c9                	fxch   %st(1)
8010bba6:	df e9                	fucomip %st(1),%st
8010bba8:	dd d8                	fstp   %st(0)
8010bbaa:	0f 97 c0             	seta   %al
8010bbad:	83 f0 01             	xor    $0x1,%eax
8010bbb0:	84 c0                	test   %al,%al
8010bbb2:	75 33                	jne    8010bbe7 <picTurn+0x17c>
8010bbb4:	d9 45 d0             	flds   -0x30(%ebp)
8010bbb7:	d9 ee                	fldz   
8010bbb9:	d9 c9                	fxch   %st(1)
8010bbbb:	df e9                	fucomip %st(1),%st
8010bbbd:	dd d8                	fstp   %st(0)
8010bbbf:	0f 93 c0             	setae  %al
8010bbc2:	83 f0 01             	xor    $0x1,%eax
8010bbc5:	84 c0                	test   %al,%al
8010bbc7:	75 1e                	jne    8010bbe7 <picTurn+0x17c>
8010bbc9:	8b 45 08             	mov    0x8(%ebp),%eax
8010bbcc:	8b 00                	mov    (%eax),%eax
8010bbce:	89 45 c4             	mov    %eax,-0x3c(%ebp)
8010bbd1:	db 45 c4             	fildl  -0x3c(%ebp)
8010bbd4:	d9 45 d0             	flds   -0x30(%ebp)
8010bbd7:	d9 c9                	fxch   %st(1)
8010bbd9:	df e9                	fucomip %st(1),%st
8010bbdb:	dd d8                	fstp   %st(0)
8010bbdd:	0f 97 c0             	seta   %al
8010bbe0:	83 f0 01             	xor    $0x1,%eax
8010bbe3:	84 c0                	test   %al,%al
8010bbe5:	74 2f                	je     8010bc16 <picTurn+0x1ab>
            {
                setColor(&whiteRGB, (dst->data + i * dst->width + j));
8010bbe7:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bbea:	8b 48 08             	mov    0x8(%eax),%ecx
8010bbed:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bbf0:	8b 00                	mov    (%eax),%eax
8010bbf2:	0f af 45 f4          	imul   -0xc(%ebp),%eax
8010bbf6:	89 c2                	mov    %eax,%edx
8010bbf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010bbfb:	01 c2                	add    %eax,%edx
8010bbfd:	89 d0                	mov    %edx,%eax
8010bbff:	01 c0                	add    %eax,%eax
8010bc01:	01 d0                	add    %edx,%eax
8010bc03:	01 c8                	add    %ecx,%eax
8010bc05:	83 ec 08             	sub    $0x8,%esp
8010bc08:	50                   	push   %eax
8010bc09:	68 04 35 11 80       	push   $0x80113504
8010bc0e:	e8 9f f6 ff ff       	call   8010b2b2 <setColor>
8010bc13:	83 c4 10             	add    $0x10,%esp
            }
            mixColor(src, srcI, srcJ, (dst->data + i * dst->width + j));
8010bc16:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bc19:	8b 48 08             	mov    0x8(%eax),%ecx
8010bc1c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bc1f:	8b 00                	mov    (%eax),%eax
8010bc21:	0f af 45 f4          	imul   -0xc(%ebp),%eax
8010bc25:	89 c2                	mov    %eax,%edx
8010bc27:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010bc2a:	01 c2                	add    %eax,%edx
8010bc2c:	89 d0                	mov    %edx,%eax
8010bc2e:	01 c0                	add    %eax,%eax
8010bc30:	01 d0                	add    %edx,%eax
8010bc32:	01 c8                	add    %ecx,%eax
8010bc34:	50                   	push   %eax
8010bc35:	ff 75 d0             	pushl  -0x30(%ebp)
8010bc38:	ff 75 d4             	pushl  -0x2c(%ebp)
8010bc3b:	ff 75 08             	pushl  0x8(%ebp)
8010bc3e:	e8 9e f6 ff ff       	call   8010b2e1 <mixColor>
8010bc43:	83 c4 10             	add    $0x10,%esp
    float srcI = 0;
    float srcJ = 0;

    for (int i = 0; i < dst->height; i++)
    {
        for (int j = 0; j < dst->width; j++)
8010bc46:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
8010bc4a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bc4d:	8b 00                	mov    (%eax),%eax
8010bc4f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
8010bc52:	0f 8f e8 fe ff ff    	jg     8010bb40 <picTurn+0xd5>
    const float SINX = sin(-angle);

    float srcI = 0;
    float srcJ = 0;

    for (int i = 0; i < dst->height; i++)
8010bc58:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010bc5c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bc5f:	8b 40 04             	mov    0x4(%eax),%eax
8010bc62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
8010bc65:	0f 8f c9 fe ff ff    	jg     8010bb34 <picTurn+0xc9>
            }
            mixColor(src, srcI, srcJ, (dst->data + i * dst->width + j));
        }
    }

    return 1;
8010bc6b:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010bc70:	c9                   	leave  
8010bc71:	c3                   	ret    

8010bc72 <picRollingOver>:

// （上下）翻转
int picRollingOver(PBitmap *src, PBitmap *dst)
{
8010bc72:	55                   	push   %ebp
8010bc73:	89 e5                	mov    %esp,%ebp
8010bc75:	53                   	push   %ebx
8010bc76:	83 ec 10             	sub    $0x10,%esp
    // 如果原图与目标图尺寸不一样，则返回 0；
    if (src->width != dst->width || src->height != dst->height)
8010bc79:	8b 45 08             	mov    0x8(%ebp),%eax
8010bc7c:	8b 10                	mov    (%eax),%edx
8010bc7e:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bc81:	8b 00                	mov    (%eax),%eax
8010bc83:	39 c2                	cmp    %eax,%edx
8010bc85:	75 10                	jne    8010bc97 <picRollingOver+0x25>
8010bc87:	8b 45 08             	mov    0x8(%ebp),%eax
8010bc8a:	8b 50 04             	mov    0x4(%eax),%edx
8010bc8d:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bc90:	8b 40 04             	mov    0x4(%eax),%eax
8010bc93:	39 c2                	cmp    %eax,%edx
8010bc95:	74 0a                	je     8010bca1 <picRollingOver+0x2f>
        return 0;
8010bc97:	b8 00 00 00 00       	mov    $0x0,%eax
8010bc9c:	e9 88 00 00 00       	jmp    8010bd29 <picRollingOver+0xb7>

    int h = src->height;
8010bca1:	8b 45 08             	mov    0x8(%ebp),%eax
8010bca4:	8b 40 04             	mov    0x4(%eax),%eax
8010bca7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int w = src->width;
8010bcaa:	8b 45 08             	mov    0x8(%ebp),%eax
8010bcad:	8b 00                	mov    (%eax),%eax
8010bcaf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < h; i++)
8010bcb2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
8010bcb9:	eb 61                	jmp    8010bd1c <picRollingOver+0xaa>
    {
        for (int j = 0; j < w; j++)
8010bcbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010bcc2:	eb 4c                	jmp    8010bd10 <picRollingOver+0x9e>
        {
            setColor((src->data + i * w + j), (dst->data + (h - i - 1) * w + j));
8010bcc4:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bcc7:	8b 48 08             	mov    0x8(%eax),%ecx
8010bcca:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010bccd:	2b 45 f8             	sub    -0x8(%ebp),%eax
8010bcd0:	83 e8 01             	sub    $0x1,%eax
8010bcd3:	0f af 45 ec          	imul   -0x14(%ebp),%eax
8010bcd7:	89 c2                	mov    %eax,%edx
8010bcd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010bcdc:	01 c2                	add    %eax,%edx
8010bcde:	89 d0                	mov    %edx,%eax
8010bce0:	01 c0                	add    %eax,%eax
8010bce2:	01 d0                	add    %edx,%eax
8010bce4:	01 c1                	add    %eax,%ecx
8010bce6:	8b 45 08             	mov    0x8(%ebp),%eax
8010bce9:	8b 58 08             	mov    0x8(%eax),%ebx
8010bcec:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010bcef:	0f af 45 ec          	imul   -0x14(%ebp),%eax
8010bcf3:	89 c2                	mov    %eax,%edx
8010bcf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010bcf8:	01 c2                	add    %eax,%edx
8010bcfa:	89 d0                	mov    %edx,%eax
8010bcfc:	01 c0                	add    %eax,%eax
8010bcfe:	01 d0                	add    %edx,%eax
8010bd00:	01 d8                	add    %ebx,%eax
8010bd02:	51                   	push   %ecx
8010bd03:	50                   	push   %eax
8010bd04:	e8 a9 f5 ff ff       	call   8010b2b2 <setColor>
8010bd09:	83 c4 08             	add    $0x8,%esp
    int h = src->height;
    int w = src->width;

    for (int i = 0; i < h; i++)
    {
        for (int j = 0; j < w; j++)
8010bd0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010bd10:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010bd13:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8010bd16:	7c ac                	jl     8010bcc4 <picRollingOver+0x52>
        return 0;

    int h = src->height;
    int w = src->width;

    for (int i = 0; i < h; i++)
8010bd18:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
8010bd1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010bd1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
8010bd22:	7c 97                	jl     8010bcbb <picRollingOver+0x49>
        {
            setColor((src->data + i * w + j), (dst->data + (h - i - 1) * w + j));
        }
    }

    return 1;
8010bd24:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010bd29:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010bd2c:	c9                   	leave  
8010bd2d:	c3                   	ret    

8010bd2e <picTurnAround>:

int picTurnAround(PBitmap *src, PBitmap *dst)
{
8010bd2e:	55                   	push   %ebp
8010bd2f:	89 e5                	mov    %esp,%ebp
8010bd31:	53                   	push   %ebx
8010bd32:	83 ec 10             	sub    $0x10,%esp
    // 如果原图与目标图尺寸不一样，则返回 0；
    if (src->width != dst->width || src->height != dst->height)
8010bd35:	8b 45 08             	mov    0x8(%ebp),%eax
8010bd38:	8b 10                	mov    (%eax),%edx
8010bd3a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bd3d:	8b 00                	mov    (%eax),%eax
8010bd3f:	39 c2                	cmp    %eax,%edx
8010bd41:	75 10                	jne    8010bd53 <picTurnAround+0x25>
8010bd43:	8b 45 08             	mov    0x8(%ebp),%eax
8010bd46:	8b 50 04             	mov    0x4(%eax),%edx
8010bd49:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bd4c:	8b 40 04             	mov    0x4(%eax),%eax
8010bd4f:	39 c2                	cmp    %eax,%edx
8010bd51:	74 0a                	je     8010bd5d <picTurnAround+0x2f>
        return 0;
8010bd53:	b8 00 00 00 00       	mov    $0x0,%eax
8010bd58:	e9 88 00 00 00       	jmp    8010bde5 <picTurnAround+0xb7>

    int h = src->height;
8010bd5d:	8b 45 08             	mov    0x8(%ebp),%eax
8010bd60:	8b 40 04             	mov    0x4(%eax),%eax
8010bd63:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int w = src->width;
8010bd66:	8b 45 08             	mov    0x8(%ebp),%eax
8010bd69:	8b 00                	mov    (%eax),%eax
8010bd6b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < h; i++)
8010bd6e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
8010bd75:	eb 61                	jmp    8010bdd8 <picTurnAround+0xaa>
    {
        for (int j = 0; j < w; j++)
8010bd77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010bd7e:	eb 4c                	jmp    8010bdcc <picTurnAround+0x9e>
        {
            setColor((src->data + i * w + j), (dst->data + i * w + (w - j - 1)));
8010bd80:	8b 45 0c             	mov    0xc(%ebp),%eax
8010bd83:	8b 48 08             	mov    0x8(%eax),%ecx
8010bd86:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010bd89:	0f af 45 ec          	imul   -0x14(%ebp),%eax
8010bd8d:	89 c2                	mov    %eax,%edx
8010bd8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010bd92:	2b 45 f4             	sub    -0xc(%ebp),%eax
8010bd95:	01 c2                	add    %eax,%edx
8010bd97:	89 d0                	mov    %edx,%eax
8010bd99:	01 c0                	add    %eax,%eax
8010bd9b:	01 d0                	add    %edx,%eax
8010bd9d:	83 e8 03             	sub    $0x3,%eax
8010bda0:	01 c1                	add    %eax,%ecx
8010bda2:	8b 45 08             	mov    0x8(%ebp),%eax
8010bda5:	8b 58 08             	mov    0x8(%eax),%ebx
8010bda8:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010bdab:	0f af 45 ec          	imul   -0x14(%ebp),%eax
8010bdaf:	89 c2                	mov    %eax,%edx
8010bdb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010bdb4:	01 c2                	add    %eax,%edx
8010bdb6:	89 d0                	mov    %edx,%eax
8010bdb8:	01 c0                	add    %eax,%eax
8010bdba:	01 d0                	add    %edx,%eax
8010bdbc:	01 d8                	add    %ebx,%eax
8010bdbe:	51                   	push   %ecx
8010bdbf:	50                   	push   %eax
8010bdc0:	e8 ed f4 ff ff       	call   8010b2b2 <setColor>
8010bdc5:	83 c4 08             	add    $0x8,%esp
    int h = src->height;
    int w = src->width;

    for (int i = 0; i < h; i++)
    {
        for (int j = 0; j < w; j++)
8010bdc8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010bdcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010bdcf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8010bdd2:	7c ac                	jl     8010bd80 <picTurnAround+0x52>
        return 0;

    int h = src->height;
    int w = src->width;

    for (int i = 0; i < h; i++)
8010bdd4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
8010bdd8:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010bddb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
8010bdde:	7c 97                	jl     8010bd77 <picTurnAround+0x49>
        {
            setColor((src->data + i * w + j), (dst->data + i * w + (w - j - 1)));
        }
    }

    return 1;
8010bde0:	b8 01 00 00 00       	mov    $0x1,%eax
}
8010bde5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010bde8:	c9                   	leave  
8010bde9:	c3                   	ret    

8010bdea <fastrand>:
#include "math.h"

static unsigned int g_seed = 0;

int fastrand() {
8010bdea:	55                   	push   %ebp
8010bdeb:	89 e5                	mov    %esp,%ebp
    ++g_seed;
8010bded:	a1 6c 37 11 80       	mov    0x8011376c,%eax
8010bdf2:	83 c0 01             	add    $0x1,%eax
8010bdf5:	a3 6c 37 11 80       	mov    %eax,0x8011376c
    g_seed = (214013*g_seed+2531011);
8010bdfa:	a1 6c 37 11 80       	mov    0x8011376c,%eax
8010bdff:	69 c0 fd 43 03 00    	imul   $0x343fd,%eax,%eax
8010be05:	05 c3 9e 26 00       	add    $0x269ec3,%eax
8010be0a:	a3 6c 37 11 80       	mov    %eax,0x8011376c
    return (g_seed>>16)&0x7FFF;
8010be0f:	a1 6c 37 11 80       	mov    0x8011376c,%eax
8010be14:	c1 e8 10             	shr    $0x10,%eax
8010be17:	25 ff 7f 00 00       	and    $0x7fff,%eax
}
8010be1c:	5d                   	pop    %ebp
8010be1d:	c3                   	ret    

8010be1e <abs>:

#define PI 3.1415926536

float abs(float x) 
{
8010be1e:	55                   	push   %ebp
8010be1f:	89 e5                	mov    %esp,%ebp
	if (x > 0) return x;
8010be21:	d9 45 08             	flds   0x8(%ebp)
8010be24:	d9 ee                	fldz   
8010be26:	d9 c9                	fxch   %st(1)
8010be28:	df e9                	fucomip %st(1),%st
8010be2a:	dd d8                	fstp   %st(0)
8010be2c:	76 05                	jbe    8010be33 <abs+0x15>
8010be2e:	d9 45 08             	flds   0x8(%ebp)
8010be31:	eb 05                	jmp    8010be38 <abs+0x1a>
	return -x;
8010be33:	d9 45 08             	flds   0x8(%ebp)
8010be36:	d9 e0                	fchs   
}
8010be38:	5d                   	pop    %ebp
8010be39:	c3                   	ret    

8010be3a <pow>:

float pow(float a, int b)
{
8010be3a:	55                   	push   %ebp
8010be3b:	89 e5                	mov    %esp,%ebp
8010be3d:	83 ec 10             	sub    $0x10,%esp
	float r = a;
8010be40:	d9 45 08             	flds   0x8(%ebp)
8010be43:	d9 5d fc             	fstps  -0x4(%ebp)
	if (b > 0) {
8010be46:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010be4a:	7e 17                	jle    8010be63 <pow+0x29>
		while (--b)
8010be4c:	eb 09                	jmp    8010be57 <pow+0x1d>
			r *= a;
8010be4e:	d9 45 fc             	flds   -0x4(%ebp)
8010be51:	d8 4d 08             	fmuls  0x8(%ebp)
8010be54:	d9 5d fc             	fstps  -0x4(%ebp)

float pow(float a, int b)
{
	float r = a;
	if (b > 0) {
		while (--b)
8010be57:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
8010be5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010be5f:	75 ed                	jne    8010be4e <pow+0x14>
8010be61:	eb 2a                	jmp    8010be8d <pow+0x53>
			r *= a;
	}
	else if (b < 0) {
8010be63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010be67:	79 1f                	jns    8010be88 <pow+0x4e>
		while (++b)
8010be69:	eb 09                	jmp    8010be74 <pow+0x3a>
			r *= a;
8010be6b:	d9 45 fc             	flds   -0x4(%ebp)
8010be6e:	d8 4d 08             	fmuls  0x8(%ebp)
8010be71:	d9 5d fc             	fstps  -0x4(%ebp)
	if (b > 0) {
		while (--b)
			r *= a;
	}
	else if (b < 0) {
		while (++b)
8010be74:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
8010be78:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010be7c:	75 ed                	jne    8010be6b <pow+0x31>
			r *= a;
		r = 1.0 / r;
8010be7e:	d9 e8                	fld1   
8010be80:	d8 75 fc             	fdivs  -0x4(%ebp)
8010be83:	d9 5d fc             	fstps  -0x4(%ebp)
8010be86:	eb 05                	jmp    8010be8d <pow+0x53>
	}
	else r = 0;
8010be88:	d9 ee                	fldz   
8010be8a:	d9 5d fc             	fstps  -0x4(%ebp)
	return r;
8010be8d:	d9 45 fc             	flds   -0x4(%ebp)
}
8010be90:	c9                   	leave  
8010be91:	c3                   	ret    

8010be92 <sqrt>:

float sqrt(float number) {
8010be92:	55                   	push   %ebp
8010be93:	89 e5                	mov    %esp,%ebp
8010be95:	83 ec 10             	sub    $0x10,%esp
	float new_guess;
	float last_guess;

	if (number < 0) {
8010be98:	d9 ee                	fldz   
8010be9a:	d9 45 08             	flds   0x8(%ebp)
8010be9d:	d9 c9                	fxch   %st(1)
8010be9f:	df e9                	fucomip %st(1),%st
8010bea1:	dd d8                	fstp   %st(0)
8010bea3:	76 06                	jbe    8010beab <sqrt+0x19>
		return -1;
8010bea5:	d9 e8                	fld1   
8010bea7:	d9 e0                	fchs   
8010bea9:	eb 3a                	jmp    8010bee5 <sqrt+0x53>
	}

	new_guess = 1;
8010beab:	d9 e8                	fld1   
8010bead:	d9 5d fc             	fstps  -0x4(%ebp)
	do {
		last_guess = new_guess;
8010beb0:	d9 45 fc             	flds   -0x4(%ebp)
8010beb3:	d9 5d f8             	fstps  -0x8(%ebp)
		new_guess = (last_guess + number / last_guess) / 2;
8010beb6:	d9 45 08             	flds   0x8(%ebp)
8010beb9:	d8 75 f8             	fdivs  -0x8(%ebp)
8010bebc:	d8 45 f8             	fadds  -0x8(%ebp)
8010bebf:	d9 05 a0 0b 11 80    	flds   0x80110ba0
8010bec5:	de f9                	fdivrp %st,%st(1)
8010bec7:	d9 5d fc             	fstps  -0x4(%ebp)
	} while (new_guess != last_guess);
8010beca:	d9 45 fc             	flds   -0x4(%ebp)
8010becd:	d9 45 f8             	flds   -0x8(%ebp)
8010bed0:	df e9                	fucomip %st(1),%st
8010bed2:	dd d8                	fstp   %st(0)
8010bed4:	7a da                	jp     8010beb0 <sqrt+0x1e>
8010bed6:	d9 45 fc             	flds   -0x4(%ebp)
8010bed9:	d9 45 f8             	flds   -0x8(%ebp)
8010bedc:	df e9                	fucomip %st(1),%st
8010bede:	dd d8                	fstp   %st(0)
8010bee0:	75 ce                	jne    8010beb0 <sqrt+0x1e>

	return new_guess;
8010bee2:	d9 45 fc             	flds   -0x4(%ebp)
}
8010bee5:	c9                   	leave  
8010bee6:	c3                   	ret    

8010bee7 <cos>:

float cos(float x)
{
8010bee7:	55                   	push   %ebp
8010bee8:	89 e5                	mov    %esp,%ebp
8010beea:	83 ec 28             	sub    $0x28,%esp
    float fl = 1;
8010beed:	d9 e8                	fld1   
8010beef:	d9 5d f4             	fstps  -0xc(%ebp)
    if (x > 2 * PI || x < -2 * PI) x -= (int)(x / (2 * PI)) * 2 * PI;
8010bef2:	d9 45 08             	flds   0x8(%ebp)
8010bef5:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010befb:	d9 c9                	fxch   %st(1)
8010befd:	df e9                	fucomip %st(1),%st
8010beff:	dd d8                	fstp   %st(0)
8010bf01:	77 0f                	ja     8010bf12 <cos+0x2b>
8010bf03:	d9 45 08             	flds   0x8(%ebp)
8010bf06:	dd 05 b0 0b 11 80    	fldl   0x80110bb0
8010bf0c:	df e9                	fucomip %st(1),%st
8010bf0e:	dd d8                	fstp   %st(0)
8010bf10:	76 3c                	jbe    8010bf4e <cos+0x67>
8010bf12:	d9 45 08             	flds   0x8(%ebp)
8010bf15:	d9 45 08             	flds   0x8(%ebp)
8010bf18:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010bf1e:	de f9                	fdivrp %st,%st(1)
8010bf20:	d9 7d e2             	fnstcw -0x1e(%ebp)
8010bf23:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
8010bf27:	b4 0c                	mov    $0xc,%ah
8010bf29:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
8010bf2d:	d9 6d e0             	fldcw  -0x20(%ebp)
8010bf30:	db 5d dc             	fistpl -0x24(%ebp)
8010bf33:	d9 6d e2             	fldcw  -0x1e(%ebp)
8010bf36:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010bf39:	01 c0                	add    %eax,%eax
8010bf3b:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010bf3e:	db 45 d8             	fildl  -0x28(%ebp)
8010bf41:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010bf47:	de c9                	fmulp  %st,%st(1)
8010bf49:	de e9                	fsubrp %st,%st(1)
8010bf4b:	d9 5d 08             	fstps  0x8(%ebp)
    if (x > PI) x -= 2 * PI;
8010bf4e:	d9 45 08             	flds   0x8(%ebp)
8010bf51:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010bf57:	d9 c9                	fxch   %st(1)
8010bf59:	df e9                	fucomip %st(1),%st
8010bf5b:	dd d8                	fstp   %st(0)
8010bf5d:	76 0e                	jbe    8010bf6d <cos+0x86>
8010bf5f:	d9 45 08             	flds   0x8(%ebp)
8010bf62:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010bf68:	de e9                	fsubrp %st,%st(1)
8010bf6a:	d9 5d 08             	fstps  0x8(%ebp)
    if (x < -PI) x += 2 * PI;
8010bf6d:	d9 45 08             	flds   0x8(%ebp)
8010bf70:	dd 05 c0 0b 11 80    	fldl   0x80110bc0
8010bf76:	df e9                	fucomip %st(1),%st
8010bf78:	dd d8                	fstp   %st(0)
8010bf7a:	76 0e                	jbe    8010bf8a <cos+0xa3>
8010bf7c:	d9 45 08             	flds   0x8(%ebp)
8010bf7f:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010bf85:	de c1                	faddp  %st,%st(1)
8010bf87:	d9 5d 08             	fstps  0x8(%ebp)
    if (x > PI / 2)
8010bf8a:	d9 45 08             	flds   0x8(%ebp)
8010bf8d:	dd 05 c8 0b 11 80    	fldl   0x80110bc8
8010bf93:	d9 c9                	fxch   %st(1)
8010bf95:	df e9                	fucomip %st(1),%st
8010bf97:	dd d8                	fstp   %st(0)
8010bf99:	76 16                	jbe    8010bfb1 <cos+0xca>
    {
        x -= PI;
8010bf9b:	d9 45 08             	flds   0x8(%ebp)
8010bf9e:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010bfa4:	de e9                	fsubrp %st,%st(1)
8010bfa6:	d9 5d 08             	fstps  0x8(%ebp)
        fl *= -1;
8010bfa9:	d9 45 f4             	flds   -0xc(%ebp)
8010bfac:	d9 e0                	fchs   
8010bfae:	d9 5d f4             	fstps  -0xc(%ebp)
    }
    if (x < -PI / 2)
8010bfb1:	d9 45 08             	flds   0x8(%ebp)
8010bfb4:	dd 05 d0 0b 11 80    	fldl   0x80110bd0
8010bfba:	df e9                	fucomip %st(1),%st
8010bfbc:	dd d8                	fstp   %st(0)
8010bfbe:	76 16                	jbe    8010bfd6 <cos+0xef>
    {
        x += PI;
8010bfc0:	d9 45 08             	flds   0x8(%ebp)
8010bfc3:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010bfc9:	de c1                	faddp  %st,%st(1)
8010bfcb:	d9 5d 08             	fstps  0x8(%ebp)
        fl *= -1;
8010bfce:	d9 45 f4             	flds   -0xc(%ebp)
8010bfd1:	d9 e0                	fchs   
8010bfd3:	d9 5d f4             	fstps  -0xc(%ebp)
    }
    if (x > PI / 4) return fl * sin(PI / 2 - x);
8010bfd6:	d9 45 08             	flds   0x8(%ebp)
8010bfd9:	dd 05 d8 0b 11 80    	fldl   0x80110bd8
8010bfdf:	d9 c9                	fxch   %st(1)
8010bfe1:	df e9                	fucomip %st(1),%st
8010bfe3:	dd d8                	fstp   %st(0)
8010bfe5:	76 28                	jbe    8010c00f <cos+0x128>
8010bfe7:	d9 45 08             	flds   0x8(%ebp)
8010bfea:	dd 05 c8 0b 11 80    	fldl   0x80110bc8
8010bff0:	de e1                	fsubp  %st,%st(1)
8010bff2:	d9 5d e4             	fstps  -0x1c(%ebp)
8010bff5:	d9 45 e4             	flds   -0x1c(%ebp)
8010bff8:	83 ec 0c             	sub    $0xc,%esp
8010bffb:	8d 64 24 fc          	lea    -0x4(%esp),%esp
8010bfff:	d9 1c 24             	fstps  (%esp)
8010c002:	e8 83 00 00 00       	call   8010c08a <sin>
8010c007:	83 c4 10             	add    $0x10,%esp
8010c00a:	d8 4d f4             	fmuls  -0xc(%ebp)
8010c00d:	eb 79                	jmp    8010c088 <cos+0x1a1>
    else return fl * (1 - pow(x, 2) / 2 + pow(x, 4) / 24 - pow(x, 6) / 720 + pow(x, 8) / 40320);//̩�չ�ʽ
8010c00f:	83 ec 08             	sub    $0x8,%esp
8010c012:	6a 02                	push   $0x2
8010c014:	ff 75 08             	pushl  0x8(%ebp)
8010c017:	e8 1e fe ff ff       	call   8010be3a <pow>
8010c01c:	83 c4 10             	add    $0x10,%esp
8010c01f:	d9 05 a0 0b 11 80    	flds   0x80110ba0
8010c025:	de f9                	fdivrp %st,%st(1)
8010c027:	d9 e8                	fld1   
8010c029:	de e1                	fsubp  %st,%st(1)
8010c02b:	d9 5d d8             	fstps  -0x28(%ebp)
8010c02e:	83 ec 08             	sub    $0x8,%esp
8010c031:	6a 04                	push   $0x4
8010c033:	ff 75 08             	pushl  0x8(%ebp)
8010c036:	e8 ff fd ff ff       	call   8010be3a <pow>
8010c03b:	83 c4 10             	add    $0x10,%esp
8010c03e:	d9 05 e0 0b 11 80    	flds   0x80110be0
8010c044:	de f9                	fdivrp %st,%st(1)
8010c046:	d8 45 d8             	fadds  -0x28(%ebp)
8010c049:	d9 5d d8             	fstps  -0x28(%ebp)
8010c04c:	83 ec 08             	sub    $0x8,%esp
8010c04f:	6a 06                	push   $0x6
8010c051:	ff 75 08             	pushl  0x8(%ebp)
8010c054:	e8 e1 fd ff ff       	call   8010be3a <pow>
8010c059:	83 c4 10             	add    $0x10,%esp
8010c05c:	d9 05 e4 0b 11 80    	flds   0x80110be4
8010c062:	de f9                	fdivrp %st,%st(1)
8010c064:	d8 6d d8             	fsubrs -0x28(%ebp)
8010c067:	d9 5d d8             	fstps  -0x28(%ebp)
8010c06a:	83 ec 08             	sub    $0x8,%esp
8010c06d:	6a 08                	push   $0x8
8010c06f:	ff 75 08             	pushl  0x8(%ebp)
8010c072:	e8 c3 fd ff ff       	call   8010be3a <pow>
8010c077:	83 c4 10             	add    $0x10,%esp
8010c07a:	d9 05 e8 0b 11 80    	flds   0x80110be8
8010c080:	de f9                	fdivrp %st,%st(1)
8010c082:	d8 45 d8             	fadds  -0x28(%ebp)
8010c085:	d8 4d f4             	fmuls  -0xc(%ebp)
}
8010c088:	c9                   	leave  
8010c089:	c3                   	ret    

8010c08a <sin>:

float sin(float x)
{
8010c08a:	55                   	push   %ebp
8010c08b:	89 e5                	mov    %esp,%ebp
8010c08d:	83 ec 28             	sub    $0x28,%esp
    float fl = 1;
8010c090:	d9 e8                	fld1   
8010c092:	d9 5d f4             	fstps  -0xc(%ebp)
    if (x > 2 * PI || x < -2 * PI) x -= (int)(x / (2 * PI)) * 2 * PI;
8010c095:	d9 45 08             	flds   0x8(%ebp)
8010c098:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010c09e:	d9 c9                	fxch   %st(1)
8010c0a0:	df e9                	fucomip %st(1),%st
8010c0a2:	dd d8                	fstp   %st(0)
8010c0a4:	77 0f                	ja     8010c0b5 <sin+0x2b>
8010c0a6:	d9 45 08             	flds   0x8(%ebp)
8010c0a9:	dd 05 b0 0b 11 80    	fldl   0x80110bb0
8010c0af:	df e9                	fucomip %st(1),%st
8010c0b1:	dd d8                	fstp   %st(0)
8010c0b3:	76 3c                	jbe    8010c0f1 <sin+0x67>
8010c0b5:	d9 45 08             	flds   0x8(%ebp)
8010c0b8:	d9 45 08             	flds   0x8(%ebp)
8010c0bb:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010c0c1:	de f9                	fdivrp %st,%st(1)
8010c0c3:	d9 7d e2             	fnstcw -0x1e(%ebp)
8010c0c6:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
8010c0ca:	b4 0c                	mov    $0xc,%ah
8010c0cc:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
8010c0d0:	d9 6d e0             	fldcw  -0x20(%ebp)
8010c0d3:	db 5d dc             	fistpl -0x24(%ebp)
8010c0d6:	d9 6d e2             	fldcw  -0x1e(%ebp)
8010c0d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010c0dc:	01 c0                	add    %eax,%eax
8010c0de:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010c0e1:	db 45 d8             	fildl  -0x28(%ebp)
8010c0e4:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010c0ea:	de c9                	fmulp  %st,%st(1)
8010c0ec:	de e9                	fsubrp %st,%st(1)
8010c0ee:	d9 5d 08             	fstps  0x8(%ebp)
    if (x > PI) x -= 2 * PI;
8010c0f1:	d9 45 08             	flds   0x8(%ebp)
8010c0f4:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010c0fa:	d9 c9                	fxch   %st(1)
8010c0fc:	df e9                	fucomip %st(1),%st
8010c0fe:	dd d8                	fstp   %st(0)
8010c100:	76 0e                	jbe    8010c110 <sin+0x86>
8010c102:	d9 45 08             	flds   0x8(%ebp)
8010c105:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010c10b:	de e9                	fsubrp %st,%st(1)
8010c10d:	d9 5d 08             	fstps  0x8(%ebp)
    if (x < -PI) x += 2 * PI;
8010c110:	d9 45 08             	flds   0x8(%ebp)
8010c113:	dd 05 c0 0b 11 80    	fldl   0x80110bc0
8010c119:	df e9                	fucomip %st(1),%st
8010c11b:	dd d8                	fstp   %st(0)
8010c11d:	76 0e                	jbe    8010c12d <sin+0xa3>
8010c11f:	d9 45 08             	flds   0x8(%ebp)
8010c122:	dd 05 a8 0b 11 80    	fldl   0x80110ba8
8010c128:	de c1                	faddp  %st,%st(1)
8010c12a:	d9 5d 08             	fstps  0x8(%ebp)
    if (x > PI / 2)
8010c12d:	d9 45 08             	flds   0x8(%ebp)
8010c130:	dd 05 c8 0b 11 80    	fldl   0x80110bc8
8010c136:	d9 c9                	fxch   %st(1)
8010c138:	df e9                	fucomip %st(1),%st
8010c13a:	dd d8                	fstp   %st(0)
8010c13c:	76 16                	jbe    8010c154 <sin+0xca>
    {
        x -= PI;
8010c13e:	d9 45 08             	flds   0x8(%ebp)
8010c141:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010c147:	de e9                	fsubrp %st,%st(1)
8010c149:	d9 5d 08             	fstps  0x8(%ebp)
        fl *= -1;
8010c14c:	d9 45 f4             	flds   -0xc(%ebp)
8010c14f:	d9 e0                	fchs   
8010c151:	d9 5d f4             	fstps  -0xc(%ebp)
    }
    if (x < -PI / 2)
8010c154:	d9 45 08             	flds   0x8(%ebp)
8010c157:	dd 05 d0 0b 11 80    	fldl   0x80110bd0
8010c15d:	df e9                	fucomip %st(1),%st
8010c15f:	dd d8                	fstp   %st(0)
8010c161:	76 16                	jbe    8010c179 <sin+0xef>
    {
        x += PI;
8010c163:	d9 45 08             	flds   0x8(%ebp)
8010c166:	dd 05 b8 0b 11 80    	fldl   0x80110bb8
8010c16c:	de c1                	faddp  %st,%st(1)
8010c16e:	d9 5d 08             	fstps  0x8(%ebp)
        fl *= -1;
8010c171:	d9 45 f4             	flds   -0xc(%ebp)
8010c174:	d9 e0                	fchs   
8010c176:	d9 5d f4             	fstps  -0xc(%ebp)
    }
    if (x < 0)
8010c179:	d9 ee                	fldz   
8010c17b:	d9 45 08             	flds   0x8(%ebp)
8010c17e:	d9 c9                	fxch   %st(1)
8010c180:	df e9                	fucomip %st(1),%st
8010c182:	dd d8                	fstp   %st(0)
8010c184:	76 10                	jbe    8010c196 <sin+0x10c>
    {
        x *= -1;
8010c186:	d9 45 08             	flds   0x8(%ebp)
8010c189:	d9 e0                	fchs   
8010c18b:	d9 5d 08             	fstps  0x8(%ebp)
        fl *= -1;
8010c18e:	d9 45 f4             	flds   -0xc(%ebp)
8010c191:	d9 e0                	fchs   
8010c193:	d9 5d f4             	fstps  -0xc(%ebp)
    }
    if (x > PI / 4) return fl * cos(PI / 2 - x);
8010c196:	d9 45 08             	flds   0x8(%ebp)
8010c199:	dd 05 d8 0b 11 80    	fldl   0x80110bd8
8010c19f:	d9 c9                	fxch   %st(1)
8010c1a1:	df e9                	fucomip %st(1),%st
8010c1a3:	dd d8                	fstp   %st(0)
8010c1a5:	76 28                	jbe    8010c1cf <sin+0x145>
8010c1a7:	d9 45 08             	flds   0x8(%ebp)
8010c1aa:	dd 05 c8 0b 11 80    	fldl   0x80110bc8
8010c1b0:	de e1                	fsubp  %st,%st(1)
8010c1b2:	d9 5d e4             	fstps  -0x1c(%ebp)
8010c1b5:	d9 45 e4             	flds   -0x1c(%ebp)
8010c1b8:	83 ec 0c             	sub    $0xc,%esp
8010c1bb:	8d 64 24 fc          	lea    -0x4(%esp),%esp
8010c1bf:	d9 1c 24             	fstps  (%esp)
8010c1c2:	e8 20 fd ff ff       	call   8010bee7 <cos>
8010c1c7:	83 c4 10             	add    $0x10,%esp
8010c1ca:	d8 4d f4             	fmuls  -0xc(%ebp)
8010c1cd:	eb 7a                	jmp    8010c249 <sin+0x1bf>
    else return fl * (x - pow(x, 3) / 6 + pow(x, 5) / 120 - pow(x, 7) / 5040 + pow(x, 9) / 362880);//̩�չ�ʽ
8010c1cf:	83 ec 08             	sub    $0x8,%esp
8010c1d2:	6a 03                	push   $0x3
8010c1d4:	ff 75 08             	pushl  0x8(%ebp)
8010c1d7:	e8 5e fc ff ff       	call   8010be3a <pow>
8010c1dc:	83 c4 10             	add    $0x10,%esp
8010c1df:	d9 05 ec 0b 11 80    	flds   0x80110bec
8010c1e5:	de f9                	fdivrp %st,%st(1)
8010c1e7:	d9 45 08             	flds   0x8(%ebp)
8010c1ea:	de e1                	fsubp  %st,%st(1)
8010c1ec:	d9 5d d8             	fstps  -0x28(%ebp)
8010c1ef:	83 ec 08             	sub    $0x8,%esp
8010c1f2:	6a 05                	push   $0x5
8010c1f4:	ff 75 08             	pushl  0x8(%ebp)
8010c1f7:	e8 3e fc ff ff       	call   8010be3a <pow>
8010c1fc:	83 c4 10             	add    $0x10,%esp
8010c1ff:	d9 05 f0 0b 11 80    	flds   0x80110bf0
8010c205:	de f9                	fdivrp %st,%st(1)
8010c207:	d8 45 d8             	fadds  -0x28(%ebp)
8010c20a:	d9 5d d8             	fstps  -0x28(%ebp)
8010c20d:	83 ec 08             	sub    $0x8,%esp
8010c210:	6a 07                	push   $0x7
8010c212:	ff 75 08             	pushl  0x8(%ebp)
8010c215:	e8 20 fc ff ff       	call   8010be3a <pow>
8010c21a:	83 c4 10             	add    $0x10,%esp
8010c21d:	d9 05 f4 0b 11 80    	flds   0x80110bf4
8010c223:	de f9                	fdivrp %st,%st(1)
8010c225:	d8 6d d8             	fsubrs -0x28(%ebp)
8010c228:	d9 5d d8             	fstps  -0x28(%ebp)
8010c22b:	83 ec 08             	sub    $0x8,%esp
8010c22e:	6a 09                	push   $0x9
8010c230:	ff 75 08             	pushl  0x8(%ebp)
8010c233:	e8 02 fc ff ff       	call   8010be3a <pow>
8010c238:	83 c4 10             	add    $0x10,%esp
8010c23b:	d9 05 f8 0b 11 80    	flds   0x80110bf8
8010c241:	de f9                	fdivrp %st,%st(1)
8010c243:	d8 45 d8             	fadds  -0x28(%ebp)
8010c246:	d8 4d f4             	fmuls  -0xc(%ebp)
}
8010c249:	c9                   	leave  
8010c24a:	c3                   	ret    
